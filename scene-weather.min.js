const e={ID:"scene-weather",NAME:"Scene Weather",LCCNAME:"sceneWeather"},t={DISABLED:"disabled",WEATHER_TEMPLATE:"weatherTemplate",WEATHER_GENERATE:"weatherAuto",REGION_TEMPLATE:"regionTemplate",REGION_GENERATE:"regionAuto"},i={REG_FX_FILTERS:e.LCCNAME+"RegisterFilters",REG_FX_GENERATORS:e.LCCNAME+"RegisterGenerators",SETTINGS_UPDATED:e.LCCNAME+"SettingsUpdated",REG_TEMPLATE_REGION:e.LCCNAME+"RegisterRegionTemplate",REG_TEMPLATE_WEATHER:e.LCCNAME+"RegisterWeatherTemplate",REG_WEATHER_PERCIEVERS:e.LCCNAME+"RegisterWeatherPercievers",MODULE_INITIALIZED:e.LCCNAME+"Initialized"},r={WINDDIR:"winddir",TOPDOWN:"topdown",SLANTED:"slanted",WINDINFLUENCED:"windinfluence"},a={INTERNAL:"internal",EXTERNAL:"external",SIMPLE_CALENDAR:"simple-calendar"},n={isaMSLtempC:16,isaSeaLevelPa:101325,adiabaticHyDryCoeff:-.0065,g:9.80665,mAir:.0289644,R:8.3144598,Tzero:237.7},o={none:0,drizzle:1,rain:2,downpour:3,hail:4,snow:5,blizzard:6},s={none:0,fog:1,stratus:2,cumulus:3,cumulunimbus:4},c={dry:20,comfortable:40,pleasant:50,sticky:65,humid:75,oppressive:1/0},d={gloomy:.1,shaded:.3,normal:.7,bright:1/0},l={nothing:.2,slight:.4,average:.7,heavy:.95,extreme:1/0},g={calm:1,light:5,lightBreeze:11,gentleBreeze:28,freshBreeze:38,strongBreeze:49,moderateGale:61,freshGale:74,strongGale:88,wholeGale:102,storm:118,hurricane:1/0},u={low:600,mid:1e3,high:4e3,veryhigh:1/0},m={freezing:-7,cold:-3,chill:3,fresh:7,moderate:18,mild:22,warm:30,hot:37,searing:1/0};class FoundryAbstractionLayer{static get worldId(){return game.world.id}static get systemID(){return game.system.id}static get systemVersion(){return game.system.version||game.system.data.version}static isGm(e=null){const t=e?FoundryAbstractionLayer.getUser(e):game.user;return!!t&&t.isGM}static userName(){const e=game.user;return e&&e.name?e.name:""}static userID(){const e=game.user;return e&&e.id?e.id:""}static getUser(e){const t=game.users;if(t)return t.find((t=>t.id===e))}static getControlledTokens(){return game.canvas.tokens.controlled}static getControlledToken(){return game.canvas.tokens.controlled[0]}static getUserByToken(e){let t,i=e.actor.ownership;return game.users.forEach((e=>{null!==e.character&&e.active&&i[e._id]>0&&(t=e)})),t}static getModuleVersion(){const t=game.modules.get(e.ID);return t?t.version:""}static getLastTickTime(){return canvas.app.ticker.lastTime}static getWorldTime(){return game.time.worldTime}static async advanceWorldTime(e=0){return game.time.advance(e)}static isModuleEnabled(e){const t=game.modules.get(e);return t&&t.active}static getSetting(t,i=null){let r=i??null;try{r=game.settings.get(e.ID,t)}catch{console.log(e.NAME+` Debug | GameConfig '${t}' not found`)}return r}static async setSetting(t,i){game.settings.settings.get(`${e.ID}.${t}`)?(await game.settings.set(e.ID,t,i),Logger.debug(`GameConfig '${t}' set to '${i}'`)):Logger.debug(`GameConfig '${t}' not found`)}static getItem(e,t){return e.items.get(t)}static getToken(e){return canvas.tokens.placeables.find((t=>t.id===e))}static getControlledTokens(){return game.canvas.tokens.controlled}static getControlledToken(){return game.canvas.tokens.controlled[0]}static getActor(e,t){let i=null;return t&&(i=canvas.tokens.placeables.find((e=>e.id===t))),i?i.actor:game.actors.get(e)}static getUserByTokenId(e){let t,i=e.actor.ownership;return game.users.forEach((e=>{null!==e.character&&e.active&&i[e._id]>0&&(t=e)})),t}static getScene(e){return e?game.scenes.get(e):canvas.scene}static getSceneFlag(t,i=null,r){let a=i??null;try{a=FoundryAbstractionLayer.getScene(r).getFlag(e.ID,t)??i}catch{Logger.debug(`SceneFlag '${t}' not found on scene`)}return a}static setSceneFlag(t,i,r){FoundryAbstractionLayer.getScene(r).setFlag(e.ID,t,i)}static getUserFlag(t,i){let r=i??void 0;try{return game.user.getFlag(e.ID,t)}catch{console.log(e.NAME+` Debug | UserFlag '${t}' not found`)}return r}static async setUserFlag(t,i){await game.user.setFlag(e.ID,t,i)}static async unsetUserFlag(t){await game.user.unsetFlag(e.ID,t)}static i18n(e,t=null){let i=game.i18n.localize(e);return i==e?(null==t&&(i=e),i):i}static getModule(t=e.ID){return game.modules.get(t)}static isModuleActive(e){const t=game.modules.get(e);return t&&t.active}}class Logger{static info(t,i=!1){console.log("%c"+e.NAME+" | "+t,"color: cornflowerblue;"),i&&ui.notifications.info(e.NAME+` | ${t}`)}static warn(t,i=!1,r=!1){console.error("%c"+e.NAME+" | "+t,"color: gold; background-color: darkgoldenrod;"),i&&ui.notifications.warn(e.NAME+` | ${t}`,{permanent:r})}static error(t,i=!1,r=!1){console.error("%c"+e.NAME+" | "+t,"color: orangered; background-color: darkred;"),i&&ui.notifications.error(e.NAME+` | ${t}`,{permanent:r})}static _dereferencer={info:{debug:Logger._ignore,trace:Logger._ignore},debug:{debug:Logger._debug,trace:Logger._ignore},trace:{debug:Logger._debug,trace:Logger._trace}};static debug(e,t){Logger._dereferencer[FoundryAbstractionLayer.getSetting("loglevel","info")].debug(e,t)}static trace(e,t){Logger._dereferencer[FoundryAbstractionLayer.getSetting("loglevel","info")].trace(e,t)}static _ignore(e,t){}static _debug(t,i){if(i){const r=Utils$1.deepClone(i);console.log("%c"+e.NAME+" | "+t,"color: darkgrey;",r)}else console.log("%c"+e.NAME+" | "+t,"color: darkgrey;")}static _trace(t,i){if(i){const r=Utils$1.deepClone(i);console.log("%c"+e.NAME+" | "+t,"color: lime; background-color: darkgreen;",r)}else console.log("%c"+e.NAME+" | "+t,"color: lime; background-color: darkgreen;")}}class Utils$1{static getSeedFromString(e){let t=0;if(0===e.length)return t;for(let i=0;i<e.length;i++){t=(t<<5)-t+e.charCodeAt(i),t|=0}return Math.abs(t)}static objectsEqual(e,t){return void 0!==e&&void 0!==t&&(null==e||null==t||"Object"!==getType(e)||"Object"!==getType(t)?e===t:Object.keys(e).length===Object.keys(t).length&&Object.entries(e).every((([e,i])=>{const r=t[e],a=getType(i);return a===getType(r)&&(i?.equals instanceof Function?i.equals(r):"Object"===a?Utils$1.objectsEqual(i,r):i===r)})))}static mergeObject(e,t={},{insertKeys:i=!0,insertValues:r=!0,overwrite:a=!0,recursive:n=!0,inplace:o=!0,enforceTypes:s=!1,performDeletions:c=!1,expand:d=!0}={},l=0){if(t=t||{},!(e instanceof Object&&t instanceof Object))throw new Error("One of original or other are not Objects!");const g={insertKeys:i,insertValues:r,overwrite:a,recursive:n,inplace:o,enforceTypes:s,performDeletions:c,expand:d};if(0===l)if(d&&Object.keys(t).some((e=>/\./.test(e)))&&(t=expandObject(t)),Object.keys(e).some((e=>/\./.test(e)))){const t=d?expandObject(e):e;o&&d?(Object.keys(e).forEach((t=>delete e[t])),Object.assign(e,t)):e=t}else o||(e=Utils$1.deepClone(e));for(let i of Object.keys(t)){const r=t[i];e.hasOwnProperty(i)?Utils$1._mergeUpdate(e,i,r,g,l+1):Utils$1._mergeInsert(e,i,r,g,l+1)}return e}static _mergeInsert(e,t,i,{insertKeys:r,insertValues:a,performDeletions:n,expand:o}={},s){if(t.startsWith("-=")&&n)return void delete e[t.slice(2)];(s<=1&&r||s>1&&a)&&(e[t]=i?.constructor!==Object?i:Utils$1.mergeObject({},i,{insertKeys:!0,inplace:!0,performDeletions:n,expand:o}))}static _mergeUpdate(e,t,i,{insertKeys:r,insertValues:a,enforceTypes:n,overwrite:o,recursive:s,performDeletions:c,expand:d}={},l){const g=e[t],u=getType(i),m=getType(g);if("Object"===u&&"Object"===m&&s)return Utils$1.mergeObject(g,i,{insertKeys:r,insertValues:a,overwrite:o,enforceTypes:n,performDeletions:c,expand:d,inplace:!0},l);if(o){if("undefined"!==m&&u!==m&&n)throw new Error("Mismatched data types encountered during object merge.");e[t]=i}}static flattenObject(e,t=0){return flattenObject(e,t)}static copyToClipboard(e=""){let t=$("<input>");$("body").append(t),t.val(e).select(),document.execCommand("copy"),t.remove()}static arrayNext(e=[],t=""){if(!e.length)return t;const i=e.indexOf(t);return e[(i+1)%e.length]||e[0]}static arrayPrev(e=[],t=""){if(!e.length)return t;const i=e.indexOf(t);return e[(i+e.length-1)%e.length]||e[0]}static clamp(e,t,i){return Math.min(Math.max(e,t),i)}static map(e,t,i,r,a){const n=(e-t)*(a-r)/(i-t)+r;return Utils$1.clamp(n,r,a)}static mapColorHex(e,t,i,r,a){const{r:n,g:o,b:s}=foundry.utils.Color.from(r),{r:c,g:d,b:l}=foundry.utils.Color.from(a);return foundry.utils.Color.fromRGB([Utils$1.map(e,t,i,n,c),Utils$1.map(e,t,i,o,d),Utils$1.map(e,t,i,s,l)]).toString()}static roundToDecimals(e,t){return Number(Math.round(e+"e"+t)+"e-"+t)}static omit(e,t){const{[t]:i,...r}=e;return r}static isBitSet(e,t){return 0!=(e&1<<t)}static deepClone(e,t){return deepClone(e,t)}}class TimeProvider{static _instances={};static hasTimeAuthority(){return TimeProvider._getProviderInstance().hasTimeAuthority()}static getProviderIds(){return Object.keys(TimeProvider._instances)}static async advanceGameTime(e=0){return TimeProvider._getProviderInstance().advanceGameTime(e)}static getHoursInDay(){return TimeProvider._getProviderInstance().getHoursInDay()}static getNumberOfMonths(){return TimeProvider._getProviderInstance().getNumberOfMonths()}static getMonthOffset(e){return TimeProvider._getProviderInstance().getMonthOffset(e)}static getDayOfYear(e=0,t=0){return TimeProvider._getProviderInstance().getDayOfYear(e,t)}static getHourOfDay(e=0,t=0){return TimeProvider._getProviderInstance().getHourOfDay(e,t)}static hourOfDayNoonPct(e=0,t=0){return TimeProvider._getProviderInstance().hourOfDayNoonPct(e,t)}static dayOfYearSummerPct(e=0,t=0){return TimeProvider._getProviderInstance().dayOfYearSummerPct(e,t)}static getI18nDateString(){const e=TimeProvider._getProviderInstance().getTimeStringData(),t=Handlebars.compile(FoundryAbstractionLayer.i18n("time.formatted"))(e);return Logger.trace("TimeProvider.getI18nDateString",{"TimeProvider._getProviderId()":TimeProvider._getProviderId(),timeInfo:e,timeText:t}),t}static getCurrentTimeHash(e=0,t=0){return TimeProvider.getTimeHash(TimeProvider.getDayOfYear()+e,TimeProvider.getHourOfDay()+t)}static getTimeHash(e,t){return e*TimeProvider.getHoursInDay()+t}static getDayOfYearFromTimeHash(e){return Math.trunc(e/TimeProvider.getHoursInDay())+1}static getMonthOfYearFromTimeHash(e){let t=TimeProvider.getDayOfYearFromTimeHash(e);for(let e=0;e<TimeProvider.getNumberOfMonths();e++)if(t<TimeProvider.getMonthOffset(e))return e;return TimeProvider.getNumberOfMonths()}static getDayOfMonthFromTimeHash(e){let t=TimeProvider.getMonthOfYearFromTimeHash(e);return TimeProvider.getDayOfYearFromTimeHash(e)-TimeProvider.getMonthOffset(t-1)}static getTimeOfDayFromTimeHash(e){return e%TimeProvider.getHoursInDay()}static _getProviderId(){let e=FoundryAbstractionLayer.getSceneFlag("timeProvider",a.INTERNAL);return e!=a.SIMPLE_CALENDAR||FoundryAbstractionLayer.isModuleEnabled("foundryvtt-simple-calendar")||(Logger.info("Module [simple-calendar] is not installed or disabled. Reverting time provider to internal for this scene.",!0),FoundryAbstractionLayer.setSceneFlag("timeProvider",a.INTERNAL),e=a.INTERNAL),e}static _getProviderInstance(){return TimeProvider._instances[TimeProvider._getProviderId()]}}class SceneWeatherState{static _lastUpdate=0;static _sceneWeather={};static _regionTemplates={};static _weatherTemplates={};static _generators=[];static _filters=[]}class Noise{static F2=.5*(Math.sqrt(3)-1);static G2=(3-Math.sqrt(3))/6;static F3=1/3;static G3=1/6;static F4=(Math.sqrt(5)-1)/4;static G4=(5-Math.sqrt(5))/20;static fastFloor(e){return 0|Math.floor(e)}static getMulberry32(e){return function(){var t=e+=1831565813;return t=Math.imul(t^t>>>15,1|t),(((t^=t+Math.imul(t^t>>>7,61|t))^t>>>14)>>>0)/4294967296}}static grad2=new Float64Array([1,1,-1,1,1,-1,-1,-1,1,0,-1,0,1,0,-1,0,0,1,0,-1,0,1,0,-1]);static getNoisedValue(e,t,i,r,a){return r+(a*((1*e(1*(t/=i),1*t)+.5*e(2*t,2*t)+.25*e(4*t,4*t))/1.75)*2-a)}static createNoise2D(e){const t=Noise._buildPermutationTable(e),i=new Float64Array(t).map((e=>Noise.grad2[e%12*2])),r=new Float64Array(t).map((e=>Noise.grad2[e%12*2+1]));return function(e,a){let n=0,o=0,s=0;const c=(e+a)*Noise.F2,d=Noise.fastFloor(e+c),l=Noise.fastFloor(a+c),g=(d+l)*Noise.G2,u=e-(d-g),m=a-(l-g);let p,h;u>m?(p=1,h=0):(p=0,h=1);const y=u-p+Noise.G2,f=m-h+Noise.G2,v=u-1+2*Noise.G2,b=m-1+2*Noise.G2,w=255&d,T=255&l;let _=.5-u*u-m*m;if(_>=0){const e=w+t[T];_*=_,n=_*_*(i[e]*u+r[e]*m)}let S=.5-y*y-f*f;if(S>=0){const e=w+p+t[T+h];S*=S,o=S*S*(i[e]*y+r[e]*f)}let P=.5-v*v-b*b;if(P>=0){const e=w+1+t[T+1];P*=P,s=P*P*(i[e]*v+r[e]*b)}return 70*(n+o+s)}}static _buildPermutationTable(e){const t=Noise.getMulberry32(e),i=512,r=new Uint8Array(i);for(let e=0;e<256;e++)r[e]=e;for(let e=0;e<255;e++){const i=e+~~(t()*(256-e)),a=r[e];r[e]=r[i],r[i]=a}for(let e=256;e<i;e++)r[e]=r[e-256];return r}}class WeatherModel{static DEFAULT_MODEL_STRUCT={source:"_DISABLED_",name:"disabled",temp:{ground:0,air:0,percieved:0},wind:{speed:0,gusts:0,direction:0},clouds:{coverage:0,bottom:0,top:0,type:0},precipitation:{amount:0,type:0},sun:{amount:0},humidity:0};constructor({regionMeteo:t,templateId:i,useWeatherConfig:r}){if(Logger.debug("WeatherModel:constrctor",{regionMeteo:t,templateId:i,useWeatherConfig:r}),this._cache={},void 0!==t)this.regionMeteo=t,this.useConfigSceneId=void 0,this.updateConfig();else if(void 0!==r)this.regionMeteo=void 0,this.useConfigSceneId=r,this.updateConfig();else{if(this.regionMeteo=void 0,this.useConfigSceneId=void 0,this.weatherData=SceneWeatherState._weatherTemplates[i],void 0===this.weatherData){this.weatherData=Object.values(SceneWeatherState._weatherTemplates)[0],canvas.scene.setFlag(e.ID,"weatherTemplate",this.weatherData.id);const[t,r]=i.split(".");Logger.error("Unable to set weather template with id ["+t+"], registered by module ["+r+"]. Reverting to ["+FoundryAbstractionLayer.i18n(this.weatherData.name)+"]. Maybe you removed a SceneWeather plugin after configuring your scene.",!0)}this.weatherData.precipitation.mode=FoundryAbstractionLayer.getSceneFlag("rainMode","winddir")}}static getTemplates(){return Logger.debug("getTemplates",{t:Object.entries(SceneWeatherState._weatherTemplates)}),Object.entries(SceneWeatherState._weatherTemplates).map((e=>({id:e[0],name:e[1].name})))}static fromSceneConfig(e){return new WeatherModel({useWeatherConfig:e})}static fromTemplate(e){return new WeatherModel({templateId:e})}static fromRegion(e){return new WeatherModel({regionMeteo:e})}updateConfig(){if(void 0!==this.regionMeteo)return Logger.debug("WeatherModel.updateConfig() -> invalidating cache, invoking on regionMeteo..."),this._cache={},this.regionMeteo.updateConfig();if(void 0!==this.useConfigSceneId){Logger.debug("WeatherModel.updateConfig() -> getting weatherConfig from Scene.",{configSceneId:this.useConfigSceneId});let e=this.useConfigSceneId,t=FoundryAbstractionLayer.getSceneFlag("weatherSettings",void 0,this.useConfigSceneId);Logger.debug("WeatherModel.updateConfig() -> load from scene flags",{weatherConfig:t,sceneId:this.useConfigSceneId}),t||(t=FoundryAbstractionLayer.getSetting("defaultWeatherSettings"),e="_GLOBAL_",Logger.debug("WeatherModel.updateConfig() -> no weather on flags, using global",{weatherConfig:t})),this._noise=Noise.createNoise2D(0);const i=t.wind.speed+t.wind.gusts,r=Math.trunc(1==t.wind.directionType?WeatherModel._getNoisedWindDirection(this._noise,TimeProvider.getCurrentTimeHash(),i):t.wind.direction);let a=Utils$1.mergeObject(Utils$1.deepClone(WeatherModel.DEFAULT_MODEL_STRUCT),{source:e,name:"custom",temp:{ground:t.temp.ground,air:t.temp.air,percieved:Math.trunc(WeatherModel._apparentTemperature(t.temp.air,t.wind.speed,t.humidity,n.isaSeaLevelPa/100))},wind:{speed:t.wind.speed,gusts:i,direction:r,directionType:t.wind.directionType},clouds:{coverage:t.clouds.coverage/100,bottom:t.clouds.bottom,top:t.clouds.bottom+t.clouds.thickness,type:t.clouds.type},precipitation:{amount:t.precipitation.amount/100,type:t.precipitation.type,mode:FoundryAbstractionLayer.getSceneFlag("rainMode","winddir",this.useConfigSceneId)||0},sun:{amount:t.sun.amount/100},humidity:t.humidity});return Logger.debug("WeatherModel.merged",{newWeatherData:a,weatherData:this.weatherData}),Utils$1.objectsEqual(this.weatherData,a)?(Logger.debug("WeatherModel.updateConfig() -> static from sceneConfig, no changes."),!1):(this.weatherData=a,Logger.debug("WeatherModel.updateConfig() -> static from sceneConfig",{sceneId:this.useConfigSceneId,weatherData:this.weatherData}),!0)}return this.weatherData.precipitation.mode==FoundryAbstractionLayer.getSceneFlag("rainMode","winddir")?(Logger.debug("WeatherModel.updateConfig() -> static, nothing to do."),!1):(this.weatherData.precipitation.mode=FoundryAbstractionLayer.getSceneFlag("rainMode","winddir"),!0)}getWeatherData(e=0,t=0){if(void 0!==this.regionMeteo){let i=this.regionMeteo.getRegionBase(e,t);if(void 0!==this._cache[i.timeHash])return this.weatherData=this._cache[i.timeHash],this._cache[i.timeHash];this.weatherData=Utils$1.mergeObject(WeatherModel.DEFAULT_MODEL_STRUCT,{name:i.name,temp:{ground:this._groundTemp(3,3,e,t),air:i.baseTemp,percieved:0},wind:{speed:i.wind,gusts:i.gusts+i.wind,direction:0},clouds:{coverage:0,bottom:Utils$1.clamp(Math.abs(WeatherModel._liftedCondensationLevel(i.baseTemp,i.baseHumidity)),0,2e4),top:0,type:0},precipitation:{amount:0,type:0,mode:FoundryAbstractionLayer.getSceneFlag("rainMode","winddir")},sun:{amount:i.sunAmount},humidity:i.baseHumidity});let r=WeatherModel._calcAdiCloudBottomCoeff(this.weatherData,i),a=WeatherModel._calcGeopotential(i);return this.weatherData.clouds.top=r<0?this.weatherData.clouds.bottom+12.6*a:this.weatherData.clouds.bottom+.27*a,this.weatherData.clouds.coverage=Utils$1.clamp((this.weatherData.clouds.top-this.weatherData.clouds.bottom)/100,0,1),this.weatherData.clouds.bottom<i.elevation?this.weatherData.clouds.type=1:(r<0&&(this.weatherData.clouds.top-this.weatherData.clouds.bottom>1e3&&(this.weatherData.clouds.type=3),this.weatherData.clouds.top-this.weatherData.clouds.bottom>3e3&&(this.weatherData.clouds.type=4)),this.weatherData.clouds.type<3&&this.weatherData.clouds.coverage>.3&&(this.weatherData.clouds.type=2)),this.weatherData.precipitation.amount=Utils$1.clamp(1.2*this.weatherData.clouds.coverage-.4,0,1)*Noise.getNoisedValue(this.regionMeteo._noise,i.timeHash+321,8,.8,.2)*Noise.getNoisedValue(this.regionMeteo._noise,i.timeHash+321,32,1,.5),this.weatherData.wind.gusts=this.weatherData.wind.gusts*(2.5*this.weatherData.precipitation.amount+.5),this.weatherData.wind.speed=this.weatherData.wind.speed+2.2*this.weatherData.precipitation.amount*this.weatherData.wind.speed,this.weatherData.sun.amount=this.weatherData.sun.amount*Utils$1.clamp(1-this.weatherData.clouds.coverage,.2,1),this.weatherData.temp.air=this.weatherData.temp.air-.03*this.weatherData.wind.speed+this.weatherData.sun.amount*Math.max(2,.6*this.weatherData.temp.ground),this.weatherData.temp.percieved=WeatherModel._apparentTemperature(this.weatherData.temp.air,this.weatherData.wind.speed,this.weatherData.humidity,WeatherModel._heightToPressure(i.elevation)),this.weatherData.clouds.top=3*Math.max(0,this.weatherData.clouds.top-i.elevation),this.weatherData.clouds.bottom=3*Math.max(0,this.weatherData.clouds.bottom-i.elevation),this.weatherData.precipitation.type=WeatherModel._calcPrecipitationType(this.weatherData),this.weatherData.wind.direction=WeatherModel._getNoisedWindDirection(this.regionMeteo._noise,i.timeHash,this.weatherData.wind.gusts),this._cache[i.timeHash]=this.weatherData,this.weatherData}return void 0!==this.useConfigSceneId?(Logger.debug("Updating wind direction for weatherConfig based weatherData...",{"this.weatherData":this.weatherData}),1==this.weatherData.wind.directionType&&(this.weatherData.wind.direction=WeatherModel._getNoisedWindDirection(this._noise,TimeProvider.getCurrentTimeHash(e,t),this.weatherData.wind.gusts)),this.weatherData):this.weatherData}static _getNoisedWindDirection(e,t,i){let r=Noise.getNoisedValue(e,t+1277,512,180,180)+Noise.getNoisedValue(e,t+1277,8,16,16)*(.2*i);return r<0&&(r+=360),r>=360&&(r-=360),r}static _calcGeopotential(e){return e.vegetation*(1.3*e.sunAmount+.7*e.wind)+(.3*e.sunAmount+e.waterAmount*(1.3*e.wind))}static _heightToPressure(e){if(e<11e3)return n.isaSeaLevelPa*Math.pow(n.isaMSLtempC/(n.isaMSLtempC+n.adiabaticHyDryCoeff*e),n.g*n.mAir/(n.R*n.adiabaticHyDryCoeff))/100;if(e<=2e4){var t=n.isaSeaLevelPa*Math.pow(n.isaMSLtempC/(e+11e3*n.adiabaticHyDryCoeff),n.g*n.mAir/(n.R*n.adiabaticHyDryCoeff)),i=n.isaMSLtempC+11e3*n.adiabaticHyDryCoeff;return t*Math.exp(-n.g*n.mAir*(e-11e3)/(n.R*i))/100}return 0}static _apparentTemperature(e,t,i,r){return e<10?WeatherModel._windChill(e,t):WeatherModel._heatIndex(e,i,r)}static _windChill(e,t){if(e>=10)return Tc;let i;return i=t>=4.8&&t<=177?13.12+.6215*e+(.3965*e-11.37)*Math.pow(t,.16):t<4.8?e+.2*(.1345*e-1.59)*t:e,i}static _heatIndex(e,t,i){if(i<16)return e;if(e<27||n.R<.4||WeatherModel._dewPoint(e,t)<12)return e;return 1.61139411*e-8.784695+2.338549*t+-.14611605*e*t+-.012308094*e*e+-.016424828*t*t+.002211732*e*e*t+72546e-8*e*t*t+1e-6*-3.582*e*e*t*t}static _dewPoint(e,t){if(e<0||e>60)return e;if((t/=100)<.01||t>1)return e;let i=17.27*e/(n.Tzero+e)+Math.log(t),r=n.Tzero*i/(17.27-i);return r<0||r>50?e:r}static _calcAdiCloudBottomCoeff(e,t){return n.isaMSLtempC+(e.clouds.bottom-t.elevation)*n.adiabaticHyDryCoeff-(t.baseTemp+(e.clouds.bottom-t.elevation)*n.adiabaticHyDryCoeff)}static _calcPrecipitationType(e){return e.precipitation.amount<.1?0:e.clouds.type>3&&e.precipitation.amount>.7?e.temp.air<4?6:e.wind.speed>.2?4:3:e.clouds.type>=3?e.temp.air<4?e.wind.speed>.2?6:5:2:2==e.clouds.type||e.precipitation.amount>.7?e.temp.air<4?5:1:0}_groundTemp(e,t,i=0,r=0){let a=0,n=0;for(let o=0;o<=e;o++){let e=1/Math.log2(o+2);a+=this.regionMeteo.getRegionBase(i,r-o*t).baseTemp*e,n+=e}return a/n}static _liftedCondensationLevel(e,t){return 125*(e-(e-(100-t)/5))}}class WeatherPerception{static _registeredPercievers={};static _singleton;static DEFAULT_WEATHER_STRUCT={name:"unknown",temperature:{air:0,ground:0,percieved:0},humidity:{percent:0},wind:{speed:0,gusts:0,direction:0},clouds:{height:0,amount:0,type:0},sun:{amount:0},precipitation:{amount:0,type:0}};static DEFAULT_INFO_STRUCT={id:e.ID+".default",name:"default"};static registeredPerciever(e=null,t=null,i=null){Logger.debug("WeatherPerception.registeredPerciever(...)",{moduleId:e,id:t,weatherPerception:i}),e&&t&&i&&i instanceof WeatherPerception&&FoundryAbstractionLayer.isModuleEnabled(e)?WeatherPerception._registeredPercievers[e+"."+t]=i:Logger.error("Unable to register WeatherPerciever for moduleId:"+e+" with id:"+t,!0)}static async getAsText(t=e.ID+".default",i){const r=WeatherPerception._getPercieverById(t),a=r.getTextFromModel(Utils$1.mergeObject(Utils$1.deepClone(WeatherModel.DEFAULT_MODEL_STRUCT),i));return Logger.debug("WeatherPerception.getAsText(...)",{id:t,perciever:r,text:a}),a}static async getAsUiHtml(t=e.ID+".default",i){const r=WeatherPerception._getPercieverById(t),a=r.getUiHtmlFromModel(Utils$1.mergeObject(Utils$1.deepClone(WeatherModel.DEFAULT_MODEL_STRUCT),i));return Logger.debug("WeatherPerception.getAsUiHtml(...)",{id:t,perciever:r,uiHtml:a}),a}static async getAsChatHtml(t=e.ID+".default",i){const r=WeatherPerception._getPercieverById(t),a=r.getChatHtmlFromModel(Utils$1.mergeObject(Utils$1.deepClone(WeatherModel.DEFAULT_MODEL_STRUCT),i));return Logger.debug("WeatherPerception.getAsChatHtml(...)",{id:t,perciever:r,chatHtml:a}),a}static async getAsWeatherInfo(t=e.ID+".default",i){const r=WeatherPerception._getPercieverById(t),a=r.getWeatherInfoFromModel(Utils$1.mergeObject(Utils$1.deepClone(WeatherModel.DEFAULT_MODEL_STRUCT),i));return Logger.debug("WeatherPerception.getAsWeatherInfo(...)",{id:t,perciever:r,weatherInfo:a}),a}static getInfo(t=e.ID+".default"){const i=WeatherPerception._getPercieverById(t),r=i.getPercieverInfo();return Logger.debug("WeatherPerception.getInfo(...)",{id:t,perciever:i,percieverInfo:r}),r}static getAllowedIds(e){let t=[];for(const[i,r]of Object.entries(WeatherPerception._registeredPercievers))r.isAllowed(e)&&t.push(i);return Logger.debug("WeatherPerception.getAllowedIds(...)",{userId:e,allowedIds:t}),t}static _getSingleton(){return WeatherPerception._singleton||(WeatherPerception._singleton=new WeatherPerception),WeatherPerception._singleton}static _getPercieverById(e){return WeatherPerception._registeredPercievers[e]?WeatherPerception._registeredPercievers[e]:WeatherPerception._getSingleton()}getTextFromModel(e){return""}getUiHtmlFromModel(e){return""}getChatHtmlFromModel(e){return""}getWeatherInfoFromModel(e){return Utils$1.deepClone(WeatherPerception.DEFAULT_WEATHER_STRUCT)}getPercieverInfo(){return Utils$1.deepClone(WeatherPerception.DEFAULT_INFO_STRUCT)}}class RegionMeteo{constructor(e){if(Logger.debug("RegionMeteo:constrctor",{templateId:e}),void 0!==e){if(this.regionData=SceneWeatherState._regionTemplates[e],void 0===this.regionData){this.regionData=Object.values(SceneWeatherState._regionTemplates)[0],FoundryAbstractionLayer.setSceneFlag("regionTemplate",this.regionData.id);const[t,i]=e.split(".");Logger.error("Unable to set region template with id ["+t+"], registered by module ["+i+"]. Reverting to ["+FoundryAbstractionLayer.i18n(this.regionData.name)+"]. Maybe you removed a SceneWeather plugin after configuring your scene.",!0,!0)}}else this.regionData=FoundryAbstractionLayer.getSceneFlag("regionSettings",void 0),this.regionData;this._noise=Noise.createNoise2D(0),this.updateConfig()}static getTemplates(){return Object.entries(SceneWeatherState._regionTemplates).map((e=>({id:e[0],name:e[1].name})))}static fromTemplate(e){return new RegionMeteo(e)}updateConfig(){return Logger.debug("RegionMeteo.updateConfig()"),this._cache={},!0}getRegionBase(e=0,t=0){void 0===e&&(e=0),void 0===t&&(t=0);let i=TimeProvider.getDayOfYear(),r=TimeProvider.getHourOfDay();if(r+=t,r<0)for(;r<0;)r+=24,i--;if(r>=24)for(;r>=24;)r-=24,i++;if(i+=e,i<0)for(;i<0;)i+=TimeProvider.config.daysInYear;if(i>=TimeProvider.config.daysInYear)for(;i>=TimeProvider.config.daysInYear;)i-=TimeProvider.config.daysInYear;let a=TimeProvider.getTimeHash(i,r);if(void 0!==this._cache[a])return this._cache[a];let n={elevation:this.regionData.elevation,vegetation:this.regionData.vegetation,waterAmount:this.regionData.waterAmount,timeHash:a};void 0===this.regionData.name?n.name="custom":n.name=this.regionData.name;let o=RegionMeteo._hodPct(r),s=RegionMeteo._doyPct(i),c=(this.regionData.summer.temperature.day-this.regionData.winter.temperature.day)*s+this.regionData.winter.temperature.day,d=(this.regionData.summer.temperature.night-this.regionData.winter.temperature.night)*s+this.regionData.winter.temperature.night,l=(this.regionData.summer.temperature.var-this.regionData.winter.temperature.var)*s+this.regionData.winter.temperature.var;n.baseTemp=Noise.getNoisedValue(this._noise,a+1282,64,(c-d)*o+d,l),n.baseTemp<0&&(n.waterAmount=0);let g=(this.regionData.summer.humidity.day-this.regionData.winter.humidity.day)*s+this.regionData.winter.humidity.day,u=(this.regionData.summer.humidity.night-this.regionData.winter.humidity.night)*s+this.regionData.winter.humidity.night,m=(this.regionData.summer.humidity.var-this.regionData.winter.humidity.var)*s+this.regionData.winter.humidity.var;n.baseHumidity=Utils$1.clamp(Noise.getNoisedValue(this._noise,a+732,64,(g-u)*o+u,m),0,100);let p=((this.regionData.summer.sun.hours-this.regionData.winter.sun.hours)*s+this.regionData.winter.sun.hours)/2,h=Math.abs(12-r);n.sunAmount=h>p?0:Utils$1.clamp(p/3*(1-1/(p/h)),0,1);let y=(this.regionData.summer.wind.avg-this.regionData.winter.wind.avg)*s+this.regionData.winter.wind.avg,f=(this.regionData.summer.wind.var-this.regionData.winter.wind.var)*s+this.regionData.winter.wind.var,v=1;return v=n.sunAmount<.1?.9:n.sunAmount<.2?r>12?.8:1.2:1.1,n.wind=Utils$1.clamp(Noise.getNoisedValue(this._noise,a+978,16,v*y,f),0,80),n.gusts=Utils$1.clamp(n.wind+Noise.getNoisedValue(this._noise,a+12,8,v*f,f),0,80),this._cache[a]=n,n}static _hodPct(e){return e%=24,(Math.sin((e/12-.5)*Math.PI)+1)/2}static _doyPct(e){const t=TimeProvider.config.summerSolstice%TimeProvider.config.daysInYear,i=TimeProvider.config.winterSolstice%TimeProvider.config.daysInYear;let r,a=i,n=i;return i<t?n=i+TimeProvider.config.daysInYear:a=i-TimeProvider.config.daysInYear,e>n&&(e-=TimeProvider.config.daysInYear),r=e==t?1:e<t?(e-a)/(t-a):1-(e-t)/(n-t),r}}class SceneWeather$1{constructor(e){this.sceneId=e._id,this.weatherModel=this._getWeatherModelForMode(e),Logger.debug("SceneWeather:constrctor",{weatherModel:this.weatherModel,sceneId:this.sceneId})}_getWeatherModelForMode(i){switch(this.weatherMode=i.getFlag(e.ID,"weatherMode")||t.DISABLED,Logger.debug("SceneWeather._getWeatherModelForMode(...)",{scene:i,weatherMode:this.weatherMode}),this.weatherMode){case t.WEATHER_TEMPLATE:const r=i.getFlag(e.ID,"weatherTemplate");return WeatherModel.fromTemplate(r);case t.WEATHER_GENERATE:return WeatherModel.fromSceneConfig(i._id);case t.REGION_TEMPLATE:const a=i.getFlag(e.ID,"regionTemplate");return WeatherModel.fromRegion(RegionMeteo.fromTemplate(a));case t.REGION_GENERATE:return WeatherModel.fromRegion(new RegionMeteo);case t.DISABLED:default:throw new Error("Unable to instantiate new SceneWeather, while being disabled.")}}updateConfig(){Logger.debug("SceneWeather.updateConfig()",{sceneId:this.sceneId});const e=FoundryAbstractionLayer.getScene(this.sceneId);if(void 0===e)throw Logger.error("Unable to instantiate SceneWeather for non existing Scene with id "+this.sceneId),new Error("Unable to instantiate SceneWeather for non existing Scene with id "+this.sceneId);return FoundryAbstractionLayer.getSceneFlag("weatherMode",null,this.sceneId)!=this.weatherMode?(Logger.debug("SceneWeather.updateConfig() -> new mode",{sceneId:this.sceneId,prevMode:this.weatherMode,newMode:FoundryAbstractionLayer.getSceneFlag("weatherMode","-",this.sceneId)}),this.weatherModel=this._getWeatherModelForMode(e),!0):(Logger.debug("SceneWeather.updateConfig() -> unchanged mode",{sceneId:this.sceneId}),this.weatherModel.updateConfig())}static fromConfig({sceneId:e=null}={}){null==e&&(e=canvas.scene._id);const t=FoundryAbstractionLayer.getScene(e);if(void 0!==t)try{return new SceneWeather$1(t)}catch(e){return}else Logger.error("Unable to instantiate SceneWeather for non existing Scene with id "+e)}calculateWeather({force:t=!1}={}){const i=TimeProvider.getCurrentTimeHash(),r=this.weatherModel.getWeatherData(),a=WeatherPerception.getAsWeatherInfo("perceptive",r);Logger.debug("SceneWeather.calculateWeather() -> WeatherUpdated",{info:a,model:r,timeHash:i,sceneId:this.sceneId,force:t}),Hooks.callAll(e.LCCNAME+"WeatherUpdated",{info:a,model:r,timeHash:i,sceneId:this.sceneId,force:t})}}function getSceneWeatherAPIv1(){const e={id:"unknown",name:"unknown",description:"unknown",elevation:0,vegetation:0,waterAmount:0,summer:{temperature:{day:0,night:0,var:0},humidity:{day:0,night:0,var:0},wind:{avg:0,var:0},sun:{hours:0}},winter:{temperature:{day:0,night:0,var:0},humidity:{day:0,night:0,var:0},wind:{avg:0,var:0},sun:{hours:0}}},t={id:"unknown",name:"unknown",temp:{ground:0,air:0,percieved:0},wind:{speed:0,gusts:0,direction:0},clouds:{coverage:0,bottom:0,top:0,type:0},precipitation:{amount:0,type:0},sun:{amount:0},humidity:0};async function updateWeather({force:e=!1,sceneId:t}={}){if(Logger.debug("SceneWeather.updateWeather(...)",{sceneId:t,force:e,canvasSceneId:canvas.scene._id}),void 0===t&&(t=canvas.scene._id),t!=canvas.scene._id)return;e&&(SceneWeatherState._lastUpdate=-1);const i=TimeProvider.getCurrentTimeHash();if(SceneWeatherState._lastUpdate==i)return;SceneWeatherState._lastUpdate=i;const r=_getSceneWeatherProvider(t);void 0!==r&&r.calculateWeather({force:e})}function _getSceneWeatherProvider(e,t=!1){let i=canvas.scene._id;return void 0!==e&&(i=e),Logger.debug("api::getSceneWeatherProvider()",{forSceneId:e,sceneId:i,ignoreCache:t}),t&&(SceneWeatherState._sceneWeather[i]=void 0),void 0!==SceneWeatherState._sceneWeather[i]||(SceneWeatherState._sceneWeather[i]=SceneWeather$1.fromConfig({sceneId:i})),SceneWeatherState._sceneWeather[i]}return{updateWeatherConfig:async function updateWeatherConfig({forSceneId:e,force:t=!1}={}){Logger.debug("SceneWeather.updateWeatherConfig(...)",{forSceneId:e,force:t});const i=_getSceneWeatherProvider(e,t);void 0!==i&&(i.updateConfig()||t)&&updateWeather({sceneId:e,force:!0})},updateWeather:updateWeather,registerPerciever:WeatherPerception.registeredPerciever,registerRegionTemplate:function registerRegionTemplate(t=null,i=null,r={}){if(t&&i&&r&&FoundryAbstractionLayer.isModuleEnabled(t)){r.id=t+"."+i;const a=Utils$1.mergeObject(Utils$1.deepClone(e),r,{insertKeys:!1});SceneWeatherState._regionTemplates[a.id]=a,Logger.debug("Registered regionTemplate for "+t+"."+i,{regionData:a})}else Logger.error("Unable to register RegionTemplate for moduleId:"+t+" with id:"+id,!0)},registerWeatherTemplate:function registerWeatherTemplate(e=null,i=null,r={}){if(e&&i&&r&&FoundryAbstractionLayer.isModuleEnabled(e)){r.id=e+"."+i;const a=Utils$1.mergeObject(Utils$1.deepClone(t),r,{insertKeys:!1});SceneWeatherState._weatherTemplates[e+"."+i]=a,Logger.debug("Registered weatherTemplate for "+e+"."+i,{weatherData:a})}else Logger.error("Unable to register RegionTemplate for moduleId:"+e+" with id:"+id,!0)},registerWeatherFxGenerator:function registerWeatherFxGenerator(e=null,t=null){Logger.debug("Registered weather fx generator for "+e),SceneWeatherState._generators.push({name:e,getEmitter:t})},registerWeatherFxFilter:function registerWeatherFxFilter(e=null,t=null){Logger.debug("Registered weather fx filter for "+e),SceneWeatherState._filters.push({name:e,getFilterConfig:t})},version:"1.0"}}const registerHbHelpers=function(){Handlebars.__switch_stack__=[],Handlebars.registerHelper("switch",(function(e,t){Handlebars.__switch_stack__.push({switch_match:!1,switch_value:e});var i=t.fn(this);return Handlebars.__switch_stack__.pop(),i})),Handlebars.registerHelper("case",(function(e,t){var i=Array.from(arguments),r=(t=i.pop(),i),a=Handlebars.__switch_stack__[Handlebars.__switch_stack__.length-1];return a.switch_match||-1===r.indexOf(a.switch_value)?"":(a.switch_match=!0,t.fn(this))})),Handlebars.registerHelper("default",(function(e){if(!Handlebars.__switch_stack__[Handlebars.__switch_stack__.length-1].switch_match)return e.fn(this)})),Logger.debug("HB Helpers Registered")},loadHandlebars=function(){loadTemplates({regionConfigSummer:"modules/"+e.ID+"/templates/regionConfigSummer.hbs",regionConfigWinter:"modules/"+e.ID+"/templates/regionConfigWinter.hbs"}),Logger.debug("HB partials loaded")};class RegionConfigDialog extends FormApplication{constructor(e){super(),this.applyToScene=e,Logger.debug("RegionConfigDialog:constrctor",{applyToScene:e})}static get defaultOptions(){return Utils$1.mergeObject(super.defaultOptions,{classes:["form"],popOut:!0,template:"modules/"+e.ID+"/templates/regionConfig.hbs",id:"region-settings",title:"dialogs.regionConfig.title",closeOnSubmit:!0,submitOnChange:!1,submitOnClose:!1})}activateListeners(e){super.activateListeners(e),Logger.debug("RegionConfigDialog:activateListeners");new Tabs({navSelector:".tabs",contentSelector:".content",initial:"summer",callback:{}}).bind(e[0]),e.find(".sceneweather-slider").each((function(t){const i=$(this),r=e.find('input[name="'+i.attr("data-min")+'"]'),a=e.find('input[name="'+i.attr("data-max")+'"]'),n=i.attr("data-range")||"0,100",o=i.attr("data-unit")||"%",s=Number(n.split(",")[0]||0),c=Number(n.split(",")[1]||s);noUiSlider.create(i[0],{start:[r.val()||0,a.val()||0],tooltips:[{to:function(e){return e+o},from:function(e){return Number(e.replace(o,""))}},{to:function(e){return e+o},from:function(e){return Number(e.replace(o,""))}}],behaviour:"drag-all",step:1,margin:0,padding:0,connect:!0,range:{min:s,max:c}}),i[0].noUiSlider.on("change",(function(e,t,i,n,o,s){Logger.debug("Slider Update",{values:e,noUiSlider:s}),r.val(e[0]),a.val(e[1])}))}))}getData(){let e={waterAmounts:[{id:0,name:"dialogs.regionConfig.waterAmounts_0"},{id:5,name:"dialogs.regionConfig.waterAmounts_5"},{id:10,name:"dialogs.regionConfig.waterAmounts_10"},{id:25,name:"dialogs.regionConfig.waterAmounts_25"},{id:50,name:"dialogs.regionConfig.waterAmounts_50"},{id:75,name:"dialogs.regionConfig.waterAmounts_75"},{id:100,name:"dialogs.regionConfig.waterAmounts_100"}]};if(void 0===this.applyToScene)return Utils$1.mergeObject(e,FoundryAbstractionLayer.getSetting("defaultRegionSettings")),Logger.debug("RegionConfigDialog:getData(general)",{applyToScene:this.applyToScene,data:e}),e;{let t=FoundryAbstractionLayer.getSceneFlag("regionSettings",void 0,this.applyToScene);return t||(t=FoundryAbstractionLayer.getSetting("defaultRegionSettings")),Utils$1.mergeObject(e,t),Logger.debug("RegionConfigDialog:getData(scene)",{applyToScene:this.applyToScene,data:e}),e}}_updateObject(e,t){const i=expandObject(t);Logger.debug("updateObject, regionConfig",{data:i,scene:this.applyToScene}),void 0===this.applyToScene?FoundryAbstractionLayer.setSetting("defaultRegionSettings",i):FoundryAbstractionLayer.setSceneFlag("regionSettings",i,this.applyToScene)}}class WeatherConfigDialog extends FormApplication{constructor(e){super(),this.applyToScene=e,Logger.debug("WeatherConfigDialog:constrctor",{applyToScene:e})}static get defaultOptions(){return mergeObject(super.defaultOptions,{classes:["form"],popOut:!0,template:"modules/"+e.ID+"/templates/weatherConfig.hbs",id:"weather-settings",title:"dialogs.weatherConfig.title",closeOnSubmit:!0,submitOnChange:!1,submitOnClose:!1})}activateListeners(e){super.activateListeners(e),Logger.debug("WeatherConfigDialog:activateListeners");0!=e.find('select[name="wind.directionType"]').find(":selected").val()&&e.find("#windTypeGrp").addClass("disabled"),e.find('select[name="wind.directionType"]').on("change",(function(){0!=$(this).find(":selected").val()?e.find("#windTypeGrp").addClass("disabled"):e.find("#windTypeGrp").removeClass("disabled")}));const t=e.find('select[name="clouds.type"]').find(":selected").val();Logger.debug("cloudsType",t),0==t&&(e.find("#cloudSectionGrp").addClass("disabled"),e.find("#preciGrp").addClass("disabled")),e.find('select[name="clouds.type"]').on("change",(function(){const t=$(this).find(":selected").val();Logger.debug("cloudsType.change",t),0==t?(e.find("#cloudSectionGrp").addClass("disabled"),e.find("#preciGrp").addClass("disabled")):(e.find("#cloudSectionGrp").removeClass("disabled"),e.find("#preciGrp").removeClass("disabled"))}));const i=e.find('select[name="precipitation.type"]').find(":selected").val();Logger.debug("preciType",i),0==i&&e.find("#previAmtGrp").addClass("disabled"),e.find('select[name="precipitation.type"]').on("change",(function(){const t=$(this).find(":selected").val();Logger.debug("preciType",t),0==t?e.find("#previAmtGrp").addClass("disabled"):e.find("#previAmtGrp").removeClass("disabled")}))}getData(){let e={windSpeeds:Object.entries(g).map((([e,t])=>"hurricane"===e?{id:120,name:"dialogs.weatherConfig.wind.speeds.hurricane"}:{id:t,name:"dialogs.weatherConfig.wind.speeds."+e})),directionTypes:[{id:0,name:"dialogs.weatherConfig.directionTypes.fixed"},{id:1,name:"dialogs.weatherConfig.directionTypes.noise"}],cloudsTypes:Object.entries(s).map((([e,t])=>({id:t,name:"dialogs.weatherConfig.clouds.types."+e}))),precipitationTypes:Object.entries(o).map((([e,t])=>({id:t,name:"dialogs.weatherConfig.precipitation.types."+e}))),windGustTypes:[{id:0,name:"dialogs.weatherConfig.windGustTypes.none"},{id:6,name:"dialogs.weatherConfig.windGustTypes.some"},{id:11,name:"dialogs.weatherConfig.windGustTypes.more"}]};if(void 0===this.applyToScene)return mergeObject(e,FoundryAbstractionLayer.getSetting("defaultWeatherSettings")),Logger.debug("WeatherConfigDialog:getData(general)",{applyToScene:this.applyToScene,data:e}),e;{let t=FoundryAbstractionLayer.getSceneFlag("weatherSettings",void 0,this.applyToScene);return t||(t=FoundryAbstractionLayer.getSetting("defaultWeatherSettings")),mergeObject(e,t),Logger.debug("WeatherConfigDialog:getData(scene)",{applyToScene:this.applyToScene,data:e}),e}}_updateObject(e,t){const i=expandObject(t);Logger.debug("updateObject, weatherConfig",{data:i,scene:this.applyToScene}),void 0===this.applyToScene?FoundryAbstractionLayer.setSetting("defaultWeatherSettings",i):FoundryAbstractionLayer.setSceneFlag("weatherSettings",i,this.applyToScene)}}class Permissions{static _permissions=void 0;static DEFAULT_PERMISSION_STRUCT={player:!1,trustedPlayer:!1,assistantGameMaster:!1,users:[]};static EMPTY_PERMISSIONS={"perciever.scene-weather.vague":Utils$1.deepClone(Permissions.DEFAULT_PERMISSION_STRUCT),"perciever.scene-weather.icon":Utils$1.deepClone(Permissions.DEFAULT_PERMISSION_STRUCT),"perciever.scene-weather.perceptive":Utils$1.deepClone(Permissions.DEFAULT_PERMISSION_STRUCT),"perciever.scene-weather.precise":Utils$1.deepClone(Permissions.DEFAULT_PERMISSION_STRUCT),sceneSettings:Utils$1.deepClone(Permissions.DEFAULT_PERMISSION_STRUCT),weatherUiControls:Utils$1.deepClone(Permissions.DEFAULT_PERMISSION_STRUCT),timeControls:Utils$1.deepClone(Permissions.DEFAULT_PERMISSION_STRUCT),meteogramUi:Utils$1.deepClone(Permissions.DEFAULT_PERMISSION_STRUCT)};static DEFAULT_PERMISSIONS={"perciever.scene-weather.vague":{player:!0,trustedPlayer:!0,assistantGameMaster:!0},"perciever.scene-weather.icon":{trustedPlayer:!0,assistantGameMaster:!0},"perciever.scene-weather.perceptive":{assistantGameMaster:!0},sceneSettings:Utils$1.deepClone(Permissions.DEFAULT_PERMISSION_STRUCT),weatherUiControls:{assistantGameMaster:!0},timeControls:{assistantGameMaster:!0},meteogramUi:{assistantGameMaster:!0}};static _getDefaultPermissions(){let e=Utils$1.deepClone(Permissions.DEFAULT_PERMISSIONS);return Object.keys(WeatherPerception._registeredPercievers).forEach((t=>{e["perciever."+t]=Utils$1.mergeObject(Utils$1.deepClone(Permissions.DEFAULT_PERMISSION_STRUCT),e["perciever."+t]||{})})),Logger.debug("Permissions._getDefaultPermissions()",{defaultPermissions:e}),e}static _loadPermissions(){const e=Permissions._getDefaultPermissions(),t=FoundryAbstractionLayer.getSetting("permissions",null);if(null==t)return Logger.debug("Permissions._loadPermissions -> no stored permissions",{default:e}),Permissions._permissions=e,Permissions._permissions;{const i=Utils$1.mergeObject(e,t,{insertKeys:!1,expand:!1});return Logger.debug("Permissions._loadPermissions -> loaded from settings",{default:e,effective:i,stored:t}),Permissions._permissions=i,Permissions._permissions}}static async resetPermissions(){let e=Utils$1.deepClone(Permissions.EMPTY_PERMISSIONS);Object.keys(WeatherPerception._registeredPercievers).forEach((t=>{"perciever."+t in e||(e["perciever."+t]=Utils$1.deepClone(Permissions.DEFAULT_PERMISSION_STRUCT))})),Permissions._permissions=Utils$1.mergeObject(e,Permissions.DEFAULT_PERMISSIONS,{expand:!1}),FoundryAbstractionLayer.setSetting("permissions",Permissions._permissions),Logger.debug("Permissions.resetPermissions()",{permissions:Permissions._permissions})}static async updatePermissions(e){Object.keys(WeatherPerception._registeredPercievers).forEach((t=>{"perciever."+t in e||(e["perciever."+t]=Utils$1.deepClone(Permissions.DEFAULT_PERMISSION_STRUCT))})),Permissions._permissions=Utils$1.mergeObject(Utils$1.deepClone(Permissions.EMPTY_PERMISSIONS),e,{expand:!1}),FoundryAbstractionLayer.setSetting("permissions",Permissions._permissions),Logger.debug("Permissions.updatePermissions(...)",{permissions:Permissions._permissions})}static getPermissionNameI18n(e){return e?e.startsWith("perciever.")?FoundryAbstractionLayer.i18n("permissions.percieverName")+WeatherPerception.getInfo(e.replace("perciever.","")).name:FoundryAbstractionLayer.i18n("permissions."+e+".name"):FoundryAbstractionLayer.i18n("permissions.unknown.name")}static getPermissionHintI18n(e){return e?e.startsWith("perciever.")?FoundryAbstractionLayer.i18n("permissions.percieverHint")+WeatherPerception.getInfo(e.replace("perciever.","")).name:FoundryAbstractionLayer.i18n("permissions."+e+".hint"):FoundryAbstractionLayer.i18n("permissions.unknown.hint")+e}static getPermissionIds(){void 0===Permissions._permissions&&Permissions._loadPermissions();const e=Object.keys(Permissions._permissions);return Logger.debug("Permissions.getPermissionIds()",{permissionIds:e}),e}static getPermissionForId(e){return e?(void 0===Permissions._permissions&&Permissions._loadPermissions(),e in Permissions._permissions?(Logger.debug("Permissions.getPermissionForId(...)",{permissionId:e,permission:Permissions._permissions[e]}),Utils$1.mergeObject(Permissions.DEFAULT_PERMISSION_STRUCT,Permissions._permissions[e],{inplace:!1,expand:!1})):(Logger.debug("Permissions.getPermissionForId(unknown)",{permissionId:e}),Utils$1.deepClone(Permissions.DEFAULT_PERMISSION_STRUCT))):Utils$1.deepClone(Permissions.DEFAULT_PERMISSION_STRUCT)}static hasPermission(e="player",t=null,i=!0){if(null===e||null===t)return!1;const r=Permissions.getPermissionForId(t);switch(e){case"player":return!!r.player;case"trustedPlayer":return!!r.trustedPlayer;case"assistantGameMaster":return!!r.assistantGameMaster;default:if(FoundryAbstractionLayer.isGm(e)&&i)return!0;const t=FoundryAbstractionLayer.getUser(e);return!!t&&(!!(r.player&&t.hasRole(1)&&i)||(!!(r.trustedPlayer&&t.hasRole(2)&&i)||(!!(r.assistantGameMaster&&t.hasRole(3)&&i)||!!r.users.includes(e))))}}}class PermissionConfigDialog extends FormApplication{constructor(){super(),Logger.debug("PermissionConfigDialog.ctor")}static get defaultOptions(){return Utils$1.mergeObject(super.defaultOptions,{classes:["form"],popOut:!0,template:"modules/"+e.ID+"/templates/permissionConfig.hbs",id:"scene-weather-permissions-config",title:"dialogs.permissionConfig.title",closeOnSubmit:!0,submitOnChange:!1,submitOnClose:!1,width:220+110*PermissionConfigDialog._getUserIds().length,resizable:!0})}activateListeners(e){super.activateListeners(e),e.find("button[name='reset']").click(this._onResetDefaults.bind(this))}async _onResetDefaults(e){return e.preventDefault(),await Permissions.resetPermissions(),Logger.info(FoundryAbstractionLayer.i18n("dialogs.permissionConfig.defaultsNotice"),!0),this.render()}async _onSubmit(e,t){return e.target.querySelectorAll("input[disabled]").forEach((e=>e.disabled=!1)),super._onSubmit(e,t)}static _getUserIds(){let e=[{id:"player",name:FoundryAbstractionLayer.i18n("USER.RolePlayer"),type:"role"},{id:"trustedPlayer",name:FoundryAbstractionLayer.i18n("USER.RoleTrusted"),type:"role"},{id:"assistantGameMaster",name:FoundryAbstractionLayer.i18n("USER.RoleAssistant"),type:"role"}];return game.users.forEach((t=>{e.push({id:t._id,name:t.name,type:"user",color:t.color||"#ffffff"})})),e}getData(){const e=PermissionConfigDialog._getUserIds();let t={headline:e,matrix:[]};return Permissions.getPermissionIds().forEach((i=>{let r=[];e.forEach((e=>{r.push({id:e.id,name:e.name,check:Permissions.hasPermission(e.id,i,!1),checkId:i+"::"+e.id})})),t.matrix.push({permissionId:i,permissionName:Permissions.getPermissionNameI18n(i),permissionHint:Permissions.getPermissionHintI18n(i),users:r})})),t.matrix.sort(((e,t)=>e.permissionName.localeCompare(t.permissionName))),Logger.debug("PermissionConfigDialog.getData()",{additionalData:t}),t}_updateObject(e,t){let i={};Object.keys(t).filter((e=>t[e])).forEach((e=>{const[t,r]=e.split("::");t in i||(i[t]=Utils$1.deepClone(Permissions.DEFAULT_PERMISSION_STRUCT)),["player","trustedPlayer","assistantGameMaster"].includes(r)?i[t][r]=!0:i[t].users.push(r)})),Logger.debug("PermissionConfigDialog._updateObject(...)",{formData:t,permissions:i}),Permissions.updatePermissions(i)}}function onChangeFunction(e){Hooks.callAll(i.SETTINGS_UPDATED,e)}const registerSettingsPostInit=function(){},registerSettingsPreInit=function(){game.settings.register(e.ID,"startup",{name:"One-Time Startup Prompt",scope:"world",config:!1,type:Boolean,default:!1}),game.settings.registerMenu(e.ID,"permissionSettingsMenu",{name:"settings.permissionSettingsMenu.name",label:"settings.permissionSettingsMenu.label",hint:"settings.permissionSettingsMenu.hint",icon:"fa-regular fa-user-lock",type:PermissionConfigDialog,restricted:!0}),game.settings.register(e.ID,"permissions",{scope:"world",config:!1,type:Object,default:Permissions._getDefaultPermissions()}),game.settings.registerMenu(e.ID,"defaultRegionSettingsMenu",{name:"settings.defaultRegionSettingsMenu.name",label:"settings.defaultRegionSettingsMenu.label",hint:"settings.defaultRegionSettingsMenu.hint",icon:"fas fa-solid fa-sliders",type:RegionConfigDialog,restricted:!0}),game.settings.register(e.ID,"defaultRegionSettings",{scope:"world",config:!1,type:Object,default:{elevation:0,vegetation:0,waterAmount:0,summer:{temperature:{max:0,avg:0,min:0,var:0},humidity:{max:0,avg:0,min:0,var:0},wind:{avg:0,var:0}},winter:{temperature:{max:0,avg:0,min:0,var:0},humidity:{max:0,avg:0,min:0,var:0},wind:{avg:0,var:0}}}}),game.settings.registerMenu(e.ID,"defaultWeatherSettingsMenu",{name:"settings.defaultWeatherSettingsMenu.name",label:"settings.defaultWeatherSettingsMenu.label",hint:"settings.defaultWeatherSettingsMenu.hint",icon:"fas fa-solid fa-sliders",type:WeatherConfigDialog,restricted:!0}),game.settings.register(e.ID,"defaultWeatherSettings",{scope:"world",config:!1,type:Object,default:{temp:{ground:0,air:0},wind:{speed:0,gusts:0,direction:0,directionType:0},clouds:{coverage:0,bottom:0,thickness:0,type:0},precipitation:{amount:0,type:0},sun:{amount:0},humidity:0}}),game.settings.register(e.ID,"enableFx",{name:"settings.enableFx.name",hint:"settings.enableFx.hint",scope:"client",config:!0,type:Boolean,default:!0,onChange:e=>{onChangeFunction({id:"enableFx",value:e})}}),game.settings.register(e.ID,"cloudsAlpha",{name:"settings.cloudsAlpha.name",hint:"settings.cloudsAlpha.hint",scope:"client",config:!0,type:Number,range:{min:0,max:100,step:5},default:100,onChange:e=>{onChangeFunction({id:"cloudsAlpha",value:e})}}),game.settings.register(e.ID,"precipitationAlpha",{name:"settings.precipitationAlpha.name",hint:"settings.precipitationAlpha.hint",scope:"client",config:!0,type:Number,range:{min:0,max:100,step:5},default:100,onChange:e=>{onChangeFunction({id:"precipitationAlpha",value:e})}}),game.settings.register(e.ID,"maxParticles",{name:"settings.maxParticles.name",hint:"settings.maxParticles.hint",scope:"client",config:!0,type:Number,range:{min:200,max:32e3,step:200},default:3200,onChange:e=>{onChangeFunction({id:"maxParticles",value:e})}}),game.settings.register(e.ID,"uiVisible",{name:"settings.uiVisible.name",scope:"client",config:!1,type:Boolean,default:!1}),game.settings.register(e.ID,"uiPosition",{name:"settings.uiPosition.name",scope:"client",config:!1,type:Object,default:{top:440,left:15}}),game.settings.register(e.ID,"meteoVisible",{name:"settings.meteoVisible.name",scope:"client",config:!1,type:Boolean,default:!1}),game.settings.register(e.ID,"meteoPosition",{name:"settings.meteoPosition.name",hint:"settings.meteoPosition.hint",scope:"client",config:!1,type:Object,default:{top:440,left:15}}),game.settings.register(e.ID,"uiPinned",{name:"settings.uiPinned.name",hint:"settings.uiPinned.hint",scope:"client",config:!1,type:Boolean,default:!1}),game.settings.register(e.ID,"loglevel",{name:"settings.loglevel.name",hint:"settings.loglevel.hint",scope:"client",config:!0,type:String,choices:{info:"settings.loglevel.info",debug:"settings.loglevel.debug",trace:"settings.loglevel.trace"},default:"info"}),Logger.debug("Settings Registered")};Hooks.on(e.LCCNAME+"WeatherUpdated",(async e=>{Logger.debug("->Hook:WeatherUpdated -> WeatherUI.update(...)",{data:e}),e.sceneId==canvas.scene._id&&void 0!==e.info&&WeatherUi.update(e.model)})),Hooks.on(e.LCCNAME+"WeatherDisabled",(async e=>{})),Hooks.on("renderWeatherUi",(()=>{Logger.debug("->Hook:renderWeatherUi"),WeatherUi.update()})),Hooks.on("updateWorldTime",(()=>{WeatherUi._updateTimeHeadline()}));class WeatherUi extends FormApplication{static _isOpen=!1;static _weatherModel={};static _perceptionId=void 0;async _render(e=!1,i={}){Logger.debug("WeatherUi._render(...)",{force:e,options:i}),await super._render(e,i),FoundryAbstractionLayer.getSetting("uiPinned",!1)&&WeatherUi.pinApp(),WeatherUi._isOpen=!0,delete ui.windows[this.appId],FoundryAbstractionLayer.getSceneFlag("weatherMode",t.DISABLED)!=t.DISABLED&&WeatherUi._weatherModel.hasPerceiver?$("#scene-weather-app").css("visibility","visible"):(Logger.debug("WeatherUi._render() -> hiding app, DISABLED"),$("#scene-weather-app").css("visibility","hidden"))}async close(e={}){return e.sceneWeather&&(WeatherUi._isOpen=!1,await FoundryAbstractionLayer.setSetting("uiVisible",!1)),super.close(e)}constructor(){super(),Logger.debug("WeatherUi.ctor")}static get defaultOptions(){return this.initialPosition=FoundryAbstractionLayer.getSetting("uiPosition",{top:40,left:40}),mergeObject(super.defaultOptions,{classes:["form"],popOut:!0,width:200,height:100,submitOnChange:!0,closeOnSubmit:!1,minimizable:!1,template:"modules/"+e.ID+"/templates/weatherUi.hbs",id:"scene-weather-app",title:"dialogs.weatherUi.title",top:this.initialPosition.top,left:this.initialPosition.left})}async _updateObject(e,t){Logger.debug("WeatherUi._updateObjec",{event:e,formData:t})}static _addModelFlags(){const e=FoundryAbstractionLayer.userID();WeatherUi._weatherModel.hasControls=Permissions.hasPermission(e,"weatherUiControls"),WeatherUi._weatherModel.hasPerceiver=WeatherPerception.getAllowedIds(FoundryAbstractionLayer.userID()).length>=1,WeatherUi._weatherModel.hasPerceivers=WeatherPerception.getAllowedIds(FoundryAbstractionLayer.userID()).length>1,WeatherUi._weatherModel.hasTimeAuthority=Permissions.hasPermission(e,"timeControls")&&WeatherUi._weatherModel.hasControls&&TimeProvider.hasTimeAuthority()&&[t.REGION_TEMPLATE,t.REGION_GENERATE].includes(FoundryAbstractionLayer.getSceneFlag("weatherMode",t.DISABLED)),WeatherUi._weatherModel.hasTimeAuthority?WeatherUi._weatherModel.timeHeadline=TimeProvider.getI18nDateString():WeatherUi._weatherModel.timeHeadline=""}getData(){return WeatherUi._addModelFlags(),Logger.debug("WeatherUi.getData()",{_weatherModel:WeatherUi._weatherModel}),WeatherUi._weatherModel}_attachDragHandler(e){const t=e.find("#weatherHeadline")[0],i=new Draggable(this,e,t,!1);let r=!1;i._onDragMouseMove=function _newOnDragMouseMove(e){e.preventDefault();const t=document.getElementById("players").getBoundingClientRect(),i=Date.now();if(i-this._moveTime<1e3/60)return;this._moveTime=i;const{left:a,top:n}=this.element.getBoundingClientRect();WeatherUi.unPinApp()&&Object.assign(this.position,{left:a,top:n}),this.app.setPosition({left:this.position.left+(e.clientX-this._initial.x),top:this.position.top+(e.clientY-this._initial.y)});let o=t.top-50,s=t.top+50;e.clientX>t.left&&e.clientX<t.left+t.width&&e.clientY>o&&e.clientY<s?($("#scene-weather-app").css("animation","jiggle 0.2s infinite"),r=!0):($("#scene-weather-app").css("animation",""),r=!1)},i._onDragMouseUp=async function _newOnDragMouseUp(e){e.preventDefault(),window.removeEventListener(...this.handlers.dragMove),window.removeEventListener(...this.handlers.dragUp);const t=document.getElementById("players").getBoundingClientRect().height+90;if(r)WeatherUi.pinApp(),await FoundryAbstractionLayer.setSetting("uiPinned",!0),this.app.setPosition({left:15,top:window.innerHeight-t});else{const e=$("#scene-weather-app").position(),t={top:e.top,left:e.left};await FoundryAbstractionLayer.setSetting("uiPosition",t),await FoundryAbstractionLayer.setSetting("uiPinned",!1)}$("#scene-weather-app").css("animation","")}}_attachControls(e){WeatherUi._weatherModel.hasControls&&e.find("#weatherControls li").each((function(e){const t=$(this),i=t.attr("data-func")||"none",r=Number(t.attr("data-base")||"0");switch(i){case"time":WeatherUi._weatherModel.hasTimeAuthority&&t.on("click",(function(){TimeProvider.advanceGameTime(window.event.ctrlKey?5*r:r)}));break;case"chatSingle":WeatherUi._weatherModel.hasControls&&t.on("click",(async function(){const e=FoundryAbstractionLayer.getControlledTokens();if(0==e.length)Logger.info(FoundryAbstractionLayer.i18n("dialogs.weatherUi.chatNotice"),!0);else{const t=e.map((e=>FoundryAbstractionLayer.getUserByToken(e)));Logger.debug("chatSingle",{tokens:e,userIds:t});const i=await WeatherPerception.getAsChatHtml(WeatherUi._perceptionId,WeatherUi._weatherModel);ChatMessage.create({user:FoundryAbstractionLayer.userID(),whisper:t,content:i})}}));break;case"chatAll":WeatherUi._weatherModel.hasControls&&t.on("click",(async function(){const e=await WeatherPerception.getAsChatHtml(WeatherUi._perceptionId,WeatherUi._weatherModel);ChatMessage.create({user:FoundryAbstractionLayer.userID(),content:e})}));break;case"clipboard":WeatherUi._weatherModel.hasControls&&t.on("click",(async function(){const e=await WeatherPerception.getAsText(WeatherUi._perceptionId,WeatherUi._weatherModel);Utils$1.copyToClipboard(e),Logger.info(FoundryAbstractionLayer.i18n("dialogs.weatherUi.clipboardNotice"),!0)}))}}))}_attachPerceiverControls(e){WeatherUi._weatherModel.hasPerceivers&&e.find("#weatherContainer .percControl").each((function(e){const t=$(this);switch(t.attr("data-func")||"none"){case"prevPerc":t.on("click",(async function(){const e=WeatherPerception.getAllowedIds(FoundryAbstractionLayer.userID());WeatherUi._perceptionId=Utils$1.arrayPrev(e,WeatherUi._perceptionId),Logger.debug("click()",{perceiverPrev:WeatherUi._perceptionId}),await FoundryAbstractionLayer.setUserFlag("perceptionId",WeatherUi._perceptionId),WeatherUi.update()}));break;case"nextPerc":t.on("click",(async function(){const e=WeatherPerception.getAllowedIds(FoundryAbstractionLayer.userID());WeatherUi._perceptionId=Utils$1.arrayNext(e,WeatherUi._perceptionId),Logger.debug("click()",{perceiverNext:WeatherUi._perceptionId}),await FoundryAbstractionLayer.setUserFlag("perceptionId",WeatherUi._perceptionId),WeatherUi.update()}))}}))}activateListeners(e){super.activateListeners(e),this._attachDragHandler(e),this._attachControls(e),this._attachPerceiverControls(e)}static async pinApp(){const e=FoundryAbstractionLayer.getModule().uiApp;e&&!e.element.hasClass("pinned")&&($("#players").before(e.element),e.element.addClass("pinned"))}static unPinApp(){const e=FoundryAbstractionLayer.getModule().uiApp;if(e&&e.element.hasClass("pinned")){const t=e.element;return $("body").append(t),t.removeClass("pinned"),!0}}static async toggleAppVis(e){"toggle"===e?!0===FoundryAbstractionLayer.getSetting("uiVisible",!1)?($("#scene-weather-app").stop(),$("#scene-weather-app").css({animation:"close 0.3s",opacity:"0"}),setTimeout((function(){FoundryAbstractionLayer.getModule().uiApp.close({sceneWeather:!0})}),200)):(WeatherUi._isOpen&&FoundryAbstractionLayer.getModule().uiApp.close({sceneWeather:!0}),FoundryAbstractionLayer.getModule().uiApp=await(new WeatherUi).render(!0),FoundryAbstractionLayer.setSetting("uiVisible",!0)):!0===FoundryAbstractionLayer.getSetting("uiVisible",!1)&&(FoundryAbstractionLayer.getModule().uiApp=await(new WeatherUi).render(!0))}static async _updateTimeHeadline(){Logger.debug("WeatherUi._updateTimeHeadline()",{model:WeatherUi._weatherModel}),WeatherUi._weatherModel.hasTimeAuthority&&(WeatherUi._weatherModel.timeHeadline=TimeProvider.getI18nDateString(),$("#weatherHeadline").html(WeatherUi._weatherModel.timeHeadline))}static async update(e=null){if(null==e&&(e=WeatherUi._weatherModel),Logger.debug("WeatherUi.update(...)",{weatherModel:e}),WeatherUi._weatherModel=e,!WeatherUi._perceptionId){WeatherUi._perceptionId=FoundryAbstractionLayer.getUserFlag("perceptionId",void 0);const e=WeatherPerception.getAllowedIds(FoundryAbstractionLayer.userID());e.includes(WeatherUi._perceptionId)||(WeatherUi._perceptionId=e[0]),await FoundryAbstractionLayer.setUserFlag("perceptionId",WeatherUi._perceptionId)}if(WeatherUi._addModelFlags(),!0===FoundryAbstractionLayer.getSetting("uiVisible",!1)){const e=await WeatherPerception.getAsUiHtml(WeatherUi._perceptionId,WeatherUi._weatherModel);$("#weatherDetail").html(e),WeatherUi._weatherModel.hasTimeAuthority&&WeatherUi._updateTimeHeadline()}}}Hooks.on(e.LCCNAME+"WeatherUpdated",(async e=>{e.sceneId==canvas.scene._id&&void 0!==e.model&&MeteoUi.update()}));class MeteoUi extends FormApplication{static _isOpen=!1;static _context=void 0;static _fromHr=-12;static _toHr=12;async _render(e=!1,t={}){await super._render(e,t),MeteoUi._isOpen=!0,MeteoUi._context=document.getElementById("meteogramCanvas"),MeteoUi._chart=void 0,MeteoUi._drawWeatherModelData(),delete ui.windows[this.appId]}async close(e={}){return e.sceneWeather&&(MeteoUi._isOpen=!1,MeteoUi._context=void 0,FoundryAbstractionLayer.setSetting("meteoVisible",!1)),super.close(e)}constructor(){super()}static get defaultOptions(){return this.initialPosition=FoundryAbstractionLayer.getSetting("meteoPosition",{top:40,left:40}),Utils$1.mergeObject(super.defaultOptions,{classes:["form"],popOut:!0,width:600,height:400,submitOnChange:!1,closeOnSubmit:!1,minimizable:!1,template:"modules/"+e.ID+"/templates/meteoUi.hbs",id:"scene-weather-meteo-app",title:"SceneWeather Meteogram",top:this.initialPosition.top,left:this.initialPosition.left})}async _updateObject(e,t){Logger.debug("MeteoUi._updateObjec",{event:e,formData:t})}getData(){return{}}activateListeners(e){super.activateListeners(e);const t=e.find("#dragHandle")[0],i=new Draggable(this,e,t,!1);i._onDragMouseMove=function _newOnDragMouseMove(e){e.preventDefault();const t=Date.now();t-this._moveTime<1e3/60||(this._moveTime=t,this.app.setPosition({left:this.position.left+(e.clientX-this._initial.x),top:this.position.top+(e.clientY-this._initial.y)}))},i._onDragMouseUp=async function _newOnDragMouseUp(e){e.preventDefault(),window.removeEventListener(...this.handlers.dragMove),window.removeEventListener(...this.handlers.dragUp);let t=$("#scene-weather-meteo-app").position(),i={top:t.top,left:t.left};await FoundryAbstractionLayer.setSetting("meteoPosition",i)}}static async toggleAppVis(e){"toggle"===e?!0===FoundryAbstractionLayer.getSetting("meteoVisible",!1)?($("#scene-weather-meteo-app").stop(),$("#scene-weather-meteo-app").css({animation:"close 0.3s",opacity:"0"}),setTimeout((function(){FoundryAbstractionLayer.getModule().meteoApp.close({sceneWeather:!0})}),200)):(MeteoUi._isOpen&&FoundryAbstractionLayer.getModule().meteoApp.close({sceneWeather:!0}),FoundryAbstractionLayer.getModule().meteoApp=await(new MeteoUi).render(!0),await FoundryAbstractionLayer.setSetting("meteoVisible",!0)):!0===FoundryAbstractionLayer.getSetting("meteoVisible",!1)&&(FoundryAbstractionLayer.getModule().meteoApp=await(new MeteoUi).render(!0))}static async update(){Logger.debug("Updating MeteoUi"),!0===FoundryAbstractionLayer.getSetting("meteoVisible",!1)&&MeteoUi._drawWeatherModelData()}static async _drawWeatherModelData(){const e=MeteoUi._fromHr,t=MeteoUi._toHr,i=MeteoUi._context;if(void 0===i)return void Logger.debug("No Context Yet");let r={labels:[],datasets:[]},a={label:"tempGround",data:[],borderWidth:1,pointRadius:0,borderColor:"#ff0000",borderDash:[5,5],yAxisID:"y"},n={label:"tempAir",data:[],borderWidth:1,pointRadius:0,borderColor:"#ff4400",borderDash:[5,5],yAxisID:"y"},o={label:"tempPercieved",data:[],borderWidth:1,pointRadius:0,borderColor:"#ff0044",yAxisID:"y"},s={label:"windSpeed",data:[],borderWidth:1,pointRadius:0,borderColor:"rgba(20, 200, 0, 0.9)",yAxisID:"y"},c={label:"windGusts",data:[],borderWidth:1,pointRadius:0,borderColor:"rgba(0, 200, 0, 0.8)",borderDash:[5,5],yAxisID:"y"},d={label:"windDirection",data:[],borderWidth:1,showLine:!1,borderColor:"#b74"},l={label:"cloudsCoverage",data:[],borderWidth:1,pointRadius:0,backgroundColor:"rgba(128, 128, 128, 0.3)",fill:!0,stepped:!0,yAxisID:"y2"},g={label:"precipitationAmount",data:[],borderWidth:1,pointRadius:0,backgroundColor:"rgba(60,60,255,0.2)",fill:!0,yAxisID:"y2"},u={label:"sunAmount",data:[],borderWidth:1,pointRadius:0,backgroundColor:"rgba(255, 255, 0, 0.6)",fill:!0,yAxisID:"y2"},m={label:"humidity",data:[],borderWidth:1,pointRadius:0,borderColor:"#9999ff",yAxisID:"y2"};const p=SceneWeatherApi.getSceneWeatherProvider();for(let i=e;i<t;i++){const e=p.weatherModel.getWeatherData(0,i);a.data.push(e.temp.ground),n.data.push(e.temp.air),o.data.push(e.temp.percieved),s.data.push(e.wind.speed),c.data.push(e.wind.gusts),d.data.push(e.wind.direction/10),l.data.push(100*e.clouds.coverage),g.data.push(100*e.precipitation.amount),u.data.push(100*e.sun.amount),m.data.push(e.humidity),i<0?r.labels.push(i+"h"):i>0?r.labels.push("+"+i+"h"):r.labels.push("now")}r.datasets.push(a),r.datasets.push(n),r.datasets.push(o),r.datasets.push(s),r.datasets.push(c),r.datasets.push(d),r.datasets.push(l),r.datasets.push(g),r.datasets.push(u),r.datasets.push(m);let h={type:"line",data:r,options:{layout:{autoPadding:!1},interaction:{mode:"nearest",axis:"x",intersect:!1},plugins:{legend:{position:"right",labels:{usePointStyle:!0}}},responsive:!1,animation:!1,scales:{x:{position:"bottom"},y:{display:!0,position:"left",type:"linear",min:-30,max:70,title:{display:!0,text:"°C"},grid:{color:function(e){return 0==e.tick.value?"rgba(0,0,0,1)":"rgba(80,80,80,0.3)"}}},y2:{position:"right",type:"linear",min:0,max:100,title:{display:!0,text:"%"}}}}};if(void 0===MeteoUi._chart)MeteoUi._chart=new Chart(i,h),Logger.debug("MeteoUI::new",{ctx:i,chart:MeteoUi._chart});else{Logger.debug("MeteoUi::update");for(let e=0;e<MeteoUi._chart.data.datasets.length;e++)MeteoUi._chart.data.datasets[e].data=r.datasets[e].data;MeteoUi._chart.data.labels=r.labels,MeteoUi._chart.update()}}}class WeatherEffect extends ParticleEffect{static label="sceneweather.fxname";static _getFxEmittersForModel(e){let t=[];return SceneWeatherState._generators.forEach((i=>{let r=i.getEmitter(e);r&&t.push(r)})),Logger.debug("WeatherEffect._getFxEmittersForModel()",{model:e,gen:SceneWeatherState._generators,emitters:t}),t}static _equalizeMaxParticles(e,t){let i=0,r=0;for(let t=0;t<e.length;t++){const a=e[t];i+=a.maxParticles,r+=a.weight}if(i<=t)return e;let a=0;for(let t=0;t<e.length;t++){const i=e[t];a+=i.maxParticles*(i.weight/r)}a=t/a;for(let t=0;t<e.length;t++){const i=e[t];i.maxParticles*=a*(i.weight/r)}return Logger.debug("WeatherEffect._equalizeMaxParticles()",{totalParticles:i,maxParticles:t}),e}play({easeIn:e=!0}={}){e||this.emitters.forEach((e=>{e.autoUpdate=!1,e.emit=!0,e.update(e.maxLifetime),e.autoUpdate=!0})),super.play()}getParticleEmitters(e={}){if(Logger.debug("WeatherEffect.getParticleEmitters(...)",{options:e}),void 0===e.data||void 0===e.data.model)return Logger.debug("WeatherEffect.getParticleEmitters() no model data contained, no emitters."),[];const t=WeatherEffect._getFxEmittersForModel(e.data.model),i=FoundryAbstractionLayer.getSetting("maxParticles",3200);WeatherEffect._equalizeMaxParticles(t,i);let r=[];return t.forEach((e=>{r.push(this.createEmitter(e))})),r}async softStop({gracePeriod:e}={}){const t=this.emitters.map((t=>new Promise((i=>{let r=t._activeParticlesFirst;for(;null!=r;){const t=e,i=Math.max(r.age,r.maxLife-t);r.age=i,r.agePercent=r.age*r.oneOverLife,r=r.next}t.emitterLifetime=0,t.playOnceAndDestroy((()=>{i()}))})))),i=[Promise.all(t)];void 0!==e&&i.push(new Promise((t=>setTimeout(t,1e3*e))).then(this.destroy.bind(this))),await Promise.race(i),this.stop()}}Hooks.on(e.LCCNAME+"SettingsUpdated",(async e=>{Logger.debug("-> Hooks::SettingsUpdated -> WeatherEffectsLayer.draw*Effects",{data:e}),["cloudsAlpha","precipitationAlpha","maxParticles","enableFx"].includes(e.id)&&SceneWeather.updateWeather({force:!0})})),Hooks.on(e.LCCNAME+"WeatherDisabled",(async e=>{canvas.scene._id==e.scene.id?void 0!==canvas.sceneweatherfx?await Promise.all([canvas.sceneweatherfx.drawParticleEffects({soft:!1}),canvas.sceneweatherfx.drawFilterEffects({soft:!1})]):Logger.debug("No canvas.sceneweatherfx"):Logger.debug("WeatherDisabled for another scene, ignoring")})),Hooks.on(e.LCCNAME+"WeatherUpdated",(async e=>{Logger.debug("-> Hooks::WeatherUpdated -> WeatherEffectsLayer.draw*Effects",{data:e}),void 0!==canvas.sceneweatherfx?await Promise.all([canvas.sceneweatherfx.drawParticleEffects({soft:!e.force,data:e}),canvas.sceneweatherfx.drawFilterEffects({soft:!e.force,data:e})]):Logger.debug("No canvas.sceneweatherfx")}));class WeatherEffectsLayer extends CanvasLayer{particleEffectsContainer;activeEffects=[];activeFilters={};constructor(){super(),canvas.app.ticker.add(this.handleTick,this)}static getFxFiltersForModel(e){let t={};return SceneWeatherState._filters.forEach((i=>{Utils$1.mergeObject(t,i.getFilterConfig(e))})),Logger.debug("WeatherEffectsLayer.getFxFiltersForModel()",{model:e,filter:t}),t}get elevation(){return(canvas.weather?.elevation??9999)+1}set elevation(e){const t=canvas.weather;t&&(t.elevation=e-1)}static get layerOptions(){return Utils$1.mergeObject(super.layerOptions,{name:"weather-particle-effects"})}async _draw(){Logger.debug("WeatherEffectsLayer._draw()",{this:this})}async _tearDown(){return Logger.debug("WeatherEffectsLayer._tearDown()",{effects:this.activeEffects}),this.activeEffects.forEach((e=>{e.destroy()})),this.activeEffects=[],this.particleEffectsContainer=void 0,super._tearDown()}handleTick(){for(const e in this.activeFilters)this.activeFilters[e].step()}async drawFilterEffects(e){if(Logger.debug("WeatherEffectsLayer.drawFilterEffects(...)",{options:e}),e=Utils$1.mergeObject({soft:!1},e),!canvas.scene)return;const t=Object.values(this.activeFilters).map((e=>e.destroy()));await Promise.all(t);const i=Object.values(this.activeFilters);if(canvas.environment.filters=canvas.environment.filters?.filter((function(e){return!i.find((function(t){return e===t}))}))??[],this.activeFilters={},!FoundryAbstractionLayer.getSetting("enableFx",!0))return;if(void 0===e.data||void 0===e.data.model)return void Logger.debug("WeatherEffectsLayer.drawFilterEffects() no model data contained, no filters.");const r=WeatherEffectsLayer.getFxFiltersForModel(e.data.model);Object.entries(r).map((([t,i])=>{this.activeFilters[t]=new i.type({soft:e.soft,options:Utils$1.mergeObject(i,{"-=type":null},{performDeletions:!0})}),canvas.environment.filters.push(this.activeFilters[t])}))}async drawParticleEffects(e){if(e=Utils$1.mergeObject({soft:!1},e),!canvas.scene)return;this.particleEffectsContainer||(this.particleEffectsContainer=this.addChild(new PIXI.Container));const t=Promise.all(this.activeEffects.map((async t=>{e.soft?await t.softStop({gracePeriod:10}):(t.destroy(),t.stop());const i=this.activeEffects.indexOf(t);i>-1&&this.activeEffects.splice(i,1)})));if(FoundryAbstractionLayer.getSetting("enableFx",!0)){const t=new WeatherEffect(this.particleEffectsContainer,e);t.play({easeIn:e.soft}),this.activeEffects.push(t)}Logger.debug("waiting for emitters to clean up (softly)",{effects:this.activeEffects,soft:e.soft}),await t,Logger.debug("cleaned up emitters",{effects:this.activeEffects})}}class WeatherLayer extends InteractionLayer{static registerLayers(){CONFIG.Canvas.layers.sceneweather={layerClass:WeatherLayer,group:"interface"},CONFIG.Canvas.layers.sceneweatherfx={layerClass:WeatherEffectsLayer,group:"primary"}}static registerLayerButtons(){Hooks.on("getSceneControlButtons",(i=>{const r=FoundryAbstractionLayer.userID(),a=[{name:"dialogs.weatherUi.toggleName",title:"dialogs.weatherUi.toggleTitle",icon:"fas fa-solid fa-window-maximize",visible:WeatherPerception.getAllowedIds(r).length>=1,toggle:!0,active:WeatherUi._isOpen,onClick:()=>{WeatherUi.toggleAppVis("toggle")}},{name:"dialogs.meteoUi.toggleName",title:"dialogs.meteoUi.toggleTitle",icon:"fas fa-solid fa-chart-line",visible:Permissions.hasPermission(r,"meteogramUi")&&[t.REGION_TEMPLATE,t.REGION_GENERATE].includes(FoundryAbstractionLayer.getSceneFlag("weatherMode",t.DISABLED)),toggle:!0,active:MeteoUi._isOpen,onClick:()=>{MeteoUi.toggleAppVis("toggle")}},{name:"dialogs.weatherConfig.toggleName",title:"dialogs.weatherConfig.toggleTitle",icon:"fas fa-solid fa-sliders",visible:Permissions.hasPermission(r,"sceneSettings")&&[t.WEATHER_GENERATE].includes(FoundryAbstractionLayer.getSceneFlag("weatherMode",t.DISABLED)),button:!0,onClick:()=>{if(Permissions.hasPermission(r,"sceneSettings")&&[t.WEATHER_GENERATE].includes(FoundryAbstractionLayer.getSceneFlag("weatherMode",t.DISABLED))){new WeatherConfigDialog(canvas.scene._id).render(!0)}}},{name:"dialogs.regionConfig.toggleName",title:"dialogs.regionConfig.toggleTitle",icon:"fas fa-solid fa-sliders",visible:Permissions.hasPermission(r,"sceneSettings")&&[t.REGION_GENERATE].includes(FoundryAbstractionLayer.getSceneFlag("weatherMode",t.DISABLED)),button:!0,onClick:()=>{if(Permissions.hasPermission(r,"sceneSettings")&&[t.REGION_GENERATE].includes(FoundryAbstractionLayer.getSceneFlag("weatherMode",t.DISABLED))){new RegionConfigDialog(canvas.scene._id).render(!0)}}},{name:"settings.enableFx.toggleName",title:"settings.enableFx.toggleTitle",icon:"fas fa-solid fa-eye",visible:!0,toggle:!0,active:FoundryAbstractionLayer.getSetting("enableFx",!0),onClick:()=>{const t=!FoundryAbstractionLayer.getSetting("enableFx",!0);FoundryAbstractionLayer.setSetting("enableFx",t),Hooks.callAll(e.LCCNAME+"SettingsUpdated",{id:"enableFx",value:t})}}];i.splice(i.findIndex((e=>"sounds"===e.name))+1,0,{name:"settings.buttonName",title:"settings.buttonTitle",icon:"fas fa-solid fa-cloud-bolt-sun",layer:"sceneweather",tools:a})}))}static get layerOptions(){return Utils$1.mergeObject(super.layerOptions,{name:"sceneweather",canDragCreate:!1,controllableObjects:!0,rotatableObjects:!0,zIndex:479})}selectObjects(e){canvas.tokens.selectObjects(e)}}class WeatherTab{static async addControlsTab(i,a){Logger.debug("WeatherTab.addControlsTab",{app:i,jQ:a});const n=i.document.flags[e.ID],o={weatherMode:"disabled",weatherTemplate:Object.values(SceneWeatherState._weatherTemplates)[0].id,regionTemplate:Object.values(SceneWeatherState._regionTemplates)[0].id,timeProvider:TimeProvider.getProviderIds()[0],seed:""},s={data:Utils$1.mergeObject(o,n,{overwrite:!0}),timeProviders:TimeProvider.getProviderIds().map((e=>({id:e,name:"configTab.general.timeSources."+e+".name",hint:"configTab.general.timeSources."+e+".hint"}))),rainModes:Object.values(r).map((e=>({id:e,name:"configTab.rainModes."+e+".name",hint:"configTab.rainModes."+e+".hint"}))),weatherModes:Object.values(t).map((e=>({id:e,name:"configTab.weatherModes."+e+".name",hint:"configTab.weatherModes."+e+".hint"}))),weatherTemplates:WeatherModel.getTemplates(),regionTemplates:RegionMeteo.getTemplates()},c=await renderTemplate("modules/"+e.ID+"/templates/weatherTab.hbs",s);$(".sheet-tabs",a).append($("<a>").addClass("item").attr("data-tab","weather").html('<i class="fas fa-solid fa-cloud-bolt-sun"></i> '+FoundryAbstractionLayer.i18n("configTab.title"))),$("<div>").addClass("tab").attr("data-tab","weather").insertAfter($('div[data-tab="ambience"]',a)).append(c),WeatherTab.activateListeners(i,a,s.data.weatherMode)}static activateListeners(e,t,i){Logger.debug("WeatherTab.activateListeners",{app:e,jQ:t,select:i}),t.find('div[id="sceneWeather.mode.'+i+'"]').addClass("active"),t.find('div[id="not_sceneWeather.mode.'+i+'"]').removeClass("active"),t.find('button[data-key="flags.scene-weather.regionConfig"]').on("click",(function(){Logger.debug("Clicked Config Region for Scene",{sceneId:e.document._id});new RegionConfigDialog(e.document._id).render(!0)})),t.find('button[data-key="flags.scene-weather.weatherConfig"]').on("click",(function(){Logger.debug("Clicked Config Weather for Scene",{sceneId:e.document._id});new WeatherConfigDialog(e.document._id).render(!0)})),t.find("#randomSeed").on("click",(async function(){const e=t.find('input[name="flags.scene-weather.seed"]');let i=[];Object.values(Utils$1.flattenObject(game.i18n.translations)).forEach((e=>{e.split(/(\s+)/).forEach((e=>{e&&e.length>5&&e.length<13&&/^\w+$/.test(e)&&i.push(e)}))}));let r=[];for(var a=0;a<3;a++)r.push(i[Math.floor(Math.random()*i.length)]);e.val(r.join(" "))})),t.find('select[name="flags.scene-weather.weatherMode"]').on("change",(function(){let i=$(this).find(":selected").val();t.find("div.sceneWeather-collapsibleModeOption").each((function(){$(this).attr("id").startsWith("not_sceneWeather.mode.")?$(this).attr("id")=="not_sceneWeather.mode."+i?$(this).removeClass("active"):$(this).addClass("active"):$(this).attr("id")=="sceneWeather.mode."+i?$(this).addClass("active"):$(this).removeClass("active")})),e.setPosition({height:"auto"}),Logger.debug("onChange",{app:e,jQ:t})}))}}Hooks.once("init",(()=>{registerSettingsPreInit(),Logger.debug("->Hook:init"),registerHbHelpers(),loadHandlebars(),window.SceneWeather=getSceneWeatherAPIv1(),Logger.info("API registered at global symbol SceneWeather"),Hooks.callAll(i.REG_FX_GENERATORS),Hooks.callAll(i.REG_FX_FILTERS),Hooks.callAll(i.REG_TEMPLATE_REGION),Hooks.callAll(i.REG_TEMPLATE_WEATHER),Hooks.callAll(i.REG_WEATHER_PERCIEVERS),Logger.debug("Initialized"),Hooks.callAll(i.MODULE_INITIALIZED)})),Hooks.on(e.LCCNAME+"Initialized",(async()=>{Logger.debug("->Hook:"+e.LCCNAME+"Initialized"),Hooks.on("updateScene",(async(i,r,a,n)=>{void 0!==r.flags&&void 0!==r.flags[e.ID]&&(Logger.debug("updateScene-> ",{deltaData:r,options:a}),SceneWeather.updateWeatherConfig({forSceneId:r._id,force:!0}),r.flags[e.ID].weatherMode==t.DISABLED&&(Logger.debug("updateScene-> Disabled SceneWeather...",{scene:i,sceneId:n}),Hooks.callAll(e.LCCNAME+"WeatherDisabled",{scene:i,sceneId:n})),void 0!==r.flags[e.ID].weatherMode&&(Logger.debug("updateScene-> WeatherUi needs update..."),WeatherUi.toggleAppVis("initial")))})),Hooks.on("renderSceneConfig",(async(e,t,i)=>{Logger.debug("renderSceneConfig",{app:e,jQ:t,data:i}),WeatherTab.addControlsTab(e,t)}))})),Hooks.once("setup",(()=>{Logger.debug("->Hook:setup"),WeatherLayer.registerLayers(),WeatherLayer.registerLayerButtons()})),Hooks.on("canvasReady",(async e=>{Logger.debug("->Hook:canvasReady(...)",{canvas:e}),WeatherUi.toggleAppVis("initial"),FoundryAbstractionLayer.getSetting("uiPinned",!1)&&WeatherUi.pinApp(),MeteoUi.toggleAppVis("initial"),SceneWeather.updateWeather({force:!0})})),Hooks.on("ready",(async()=>{Hooks.callAll(e.LCCNAME+"Ready"),Logger.info("Ready")})),Hooks.on(e.LCCNAME+"Ready",(async()=>{Logger.debug("->Hook:"+e.LCCNAME+"Ready")})),Hooks.on("updateWorldTime",((e,i,r,a)=>{Logger.debug("->Hook:updateWorldTime",{worldTime:e,delta:i,options:r,userId:a}),[t.REGION_TEMPLATE,t.REGION_GENERATE].includes(FoundryAbstractionLayer.getSceneFlag("weatherMode",t.DISABLED))&&SceneWeather.updateWeather()}));class ColorFilter extends PIXI.filters.AdjustmentFilter{constructor({options:e={},soft:t=!1}={}){super();const{color:i,...r}=Utils$1.mergeObject({tint:"#ffffff",saturation:1,gamma:1,brightness:1,contrast:1},e),{r:a,g:n,b:o}=foundry.utils.Color.from(e.tint),s={...r,red:a,green:n,blue:o},c=Object.keys(s);for(const e of c)this.optionContext[e]=s[e];this.enabled=!0}get optionContext(){return this}async destroy(){return this.enabled=!1,!0}async step(){}}class Generators{static _scaleValues(e,t){e.list=e.list.map((e=>({...e,value:e.value*t})))}static _scaleRange(e,t){e.min=e.min*t,e.max=e.max*t}static _getTransposedPosition(e,t,i,r,a,n){const o=e+i/2,s=t+r/2,c=n*Math.PI/180;return{x:o+a*Math.cos(c)-i/2,y:s+a*Math.sin(c)-r/2}}static applyGeneratorToEmitterConfig(e,t){const i=2/3,r=canvas.dimensions.sceneRect;t.maxParticles=canvas.dimensions.width/canvas.dimensions.size*(canvas.dimensions.height/canvas.dimensions.size)*e.density;const a=t.behaviors.find((({type:e})=>"moveSpeedStatic"===e))?.config;if(void 0!==a){const n=(a.min+a.max)/2,o=Math.sqrt(r.width*r.width+r.height*r.height),s=o/n,c=s/i/2,d=s/i;t.lifetime={min:c,max:d},t.frequency=(c+d)/2/t.maxParticles;const l=Generators._getTransposedPosition(r.x,r.y,r.width,r.height,o/4,(e.direction+180)%360);t.behaviors.push({type:"spawnShape",config:{type:"rect",data:{x:l.x,y:l.y,w:r.width,h:r.height}}})}else{t.frequency=(t.lifetime.min+t.lifetime.max)/2/t.maxParticles;const e=canvas.dimensions.sceneRect;t.behaviors.push({type:"spawnShape",config:{type:"rect",data:{x:e.x-e.width/4,y:e.y-e.height/4,w:1.5*e.width,h:1.5*e.height}}})}void 0!==e.alpha&&t.behaviors.filter((e=>"alpha"===e.type)).forEach((({config:t})=>Generators._scaleValues(t.alpha,e.alpha)));let n=e.scale*(canvas.dimensions.size/100);t.behaviors.filter((e=>"scale"===e.type)).forEach((({config:e})=>Generators._scaleValues(e.scale,n))),t.behaviors.filter((e=>"scaleStatic"===e.type)).forEach((({config:e})=>Generators._scaleRange(e,n))),n=e.speed*(canvas.dimensions.size/100),t.behaviors.filter((e=>["moveSpeed","movePath"].includes(e.type))).forEach((({config:e})=>Generators._scaleValues(e.speed,n))),t.behaviors.filter((e=>"moveSpeedStatic"===e.type)).forEach((({config:e})=>Generators._scaleRange(e,n))),Generators._scaleRange(t.lifetime,1/n),t.frequency/=n;const o=e.direction;void 0!==o&&(t.behaviors.filter((e=>"rotation"===e.type)).forEach((({config:e})=>{const t=e.maxStart-e.minStart;e.minStart=o-t/2,e.maxStart=o+t/2})),t.behaviors.filter((e=>"rotationStatic"===e.type)).forEach((({config:e})=>{const t=e.max-e.min;e.min=o-t/2,e.max=o+t/2})));const s=e.lifetime;Generators._scaleRange(t.lifetime,s),t.frequency*=s,null!=e.tint&&(t.behaviors=t.behaviors.filter((({type:e})=>"color"!==e&&"colorStatic"!==e)).concat({type:"colorStatic",config:{color:e.tint}}))}}Hooks.on(i.REG_FX_GENERATORS,(async()=>{SceneWeather.registerWeatherFxGenerator("cumulus",(function(t){if(FoundryAbstractionLayer.getSetting("cloudsAlpha",100)<2)return;if(![s.cumulus,s.cumulunimbus].includes(t.clouds.type))return null;let i={alpha:FoundryAbstractionLayer.getSetting("cloudsAlpha",100)/100,direction:(Math.round(t.wind.direction)+90)%360,speed:Utils$1.map(t.wind.speed,10,70,.2,3),scale:Utils$1.map(t.clouds.coverage,.3,1,.8,1),lifetime:1,density:Utils$1.map(t.clouds.coverage,.2,1,.005,.02),tint:null};4==t.clouds.type&&(i.tint="#B0B0B0",i.density=.001);const r=Utils$1.deepClone({weight:.8,behaviors:[{type:"alpha",config:{alpha:{list:[{value:0,time:0},{value:.5,time:.05},{value:.5,time:.95},{value:0,time:1}]}}},{type:"moveSpeedStatic",config:{min:30,max:100}},{type:"scaleStatic",config:{min:2.58,max:3.3}},{type:"rotationStatic",config:{min:85,max:95}},{type:"textureRandom",config:{textures:Array.fromRange(5).map((t=>"modules/"+e.ID+`/assets/cu${t+1}.webp`))}}]});return Generators.applyGeneratorToEmitterConfig(i,r),r}))}));class FlashFilter extends PIXI.filters.AdjustmentFilter{options;constructor({options:e={},soft:t=!1}={}){super(),this.options=Utils$1.mergeObject({frequency:0,duration:0,brightness:1,nextTime:FoundryAbstractionLayer.getLastTickTime()/10},e);const i=Object.keys(this.options);for(const e of i)this.optionContext[e]=this.options[e];this.enabled=!0}get optionContext(){return this}async discard(){return this.enabled=!1,!0}async step(){if(FoundryAbstractionLayer.getLastTickTime()/10>this.options.nextTime){this.options.nextTime=FoundryAbstractionLayer.getLastTickTime()/10+40+this.options.frequency*Math.random();const animate=t=>{const i=[{parent:this,attribute:"brightness",to:t}];return CanvasAnimation.animate(i,{name:e.ID+`.${this.constructor.name}.${randomID()}`,context:this,duration:100+this.options.duration*Math.random(),easing:function(e){const t=2.5949095;return e<.5?Math.pow(2*e,2)*(7.189819*e-t)/2:(Math.pow(2*e-2,2)*((t+1)*(2*e-2)+t)+2)/2}})};await animate(this.options.brightness),await animate(1)}}}Hooks.on(e.LCCNAME+"RegisterGenerators",(async()=>{SceneWeather.registerWeatherFxGenerator("fog",(function(t){if(FoundryAbstractionLayer.getSetting("cloudsAlpha",100)<2)return;if(t.clouds.type!=s.fog)return null;const i={alpha:FoundryAbstractionLayer.getSetting("cloudsAlpha",100)/100,direction:0,speed:1,scale:1,lifetime:1,density:Utils$1.map(t.clouds.coverage,.2,1,.01,1),tint:null},r=Utils$1.deepClone({weight:.9,lifetime:{min:10,max:25},behaviors:[{type:"alpha",config:{alpha:{list:[{value:0,time:0},{value:.1,time:.1},{value:.3,time:.5},{value:.1,time:.9},{value:0,time:1}]}}},{type:"moveSpeed",config:{speed:{list:[{time:0,value:15},{time:1,value:10}]},minMult:.2}},{type:"scale",config:{scale:{list:[{value:2.5,time:0},{value:2,time:1}]},minMult:.5}},{type:"rotation",config:{accel:0,minSpeed:.15,maxSpeed:.35,minStart:0,maxStart:365}},{type:"textureRandom",config:{textures:Array.fromRange(3).map((t=>"modules/"+e.ID+`/assets/fg${t+1}.webp`))}},{type:"colorStatic",config:{color:"dddddd"}}]});return Generators.applyGeneratorToEmitterConfig(i,r),r}))})),Hooks.on(i.REG_FX_FILTERS,(async()=>{SceneWeather.registerWeatherFxFilter("freeze",(function(e){let t={};return e.temp.air<0&&(t.freeze={type:ColorFilter,tint:Utils$1.mapColorHex(e.temp.air+10,0,10,"#E1F3FE","#FFFFFF"),saturation:1-Utils$1.map(e.temp.air+10,10,0,0,.4),gamma:1,brightness:1,contrast:1}),t}))})),Hooks.on(i.REG_FX_FILTERS,(async()=>{SceneWeather.registerWeatherFxFilter("heatglare",(function(e){let t={};return e.sun.amount>.8&&e.temp.air>30&&(t.heatglare={type:ColorFilter,tint:Utils$1.mapColorHex(e.sun.amount,.8,1,"#ffffff","#FFF3D1"),saturation:1,gamma:1,brightness:Utils$1.map(e.sun.amount,.8,1,1,1.4),contrast:Utils$1.map(e.temp.air,30,50,1,1.5)}),t}))})),Hooks.on(i.REG_FX_FILTERS,(async()=>{SceneWeather.registerWeatherFxFilter("lightning",(function(e){let t={};return e.clouds.type>s.cumulus&&[o.rain,o.downpour,o.hail].includes(e.precipitation.type)&&e.precipitation.amount>.3&&(t.lightning={type:FlashFilter,frequency:2e3-Utils$1.map(e.precipitation.amount,.3,1,0,1600),duration:100,brightness:1.2},t.cloudcolor={type:ColorFilter,tint:"#D1CBD7",saturation:1,gamma:1,brightness:1,contrast:1}),t}))})),Hooks.on(e.LCCNAME+"RegisterGenerators",(async()=>{SceneWeather.registerWeatherFxGenerator("nimbus",(function(t){if(FoundryAbstractionLayer.getSetting("cloudsAlpha",100)<2)return;if(t.clouds.type!=s.cumulunimbus)return null;let i={alpha:FoundryAbstractionLayer.getSetting("cloudsAlpha",100)/100,direction:(Math.round(t.wind.direction)+90)%360,speed:Utils$1.map(t.wind.speed,10,70,.2,3),scale:Utils$1.map(t.clouds.coverage,.3,1,.8,1),lifetime:1,density:Utils$1.map(t.clouds.coverage,.2,1,.005,.02),tint:null};const r=Utils$1.deepClone({weight:.9,behaviors:[{type:"alpha",config:{alpha:{list:[{value:0,time:0},{value:.5,time:.05},{value:.5,time:.95},{value:0,time:1}]}}},{type:"moveSpeedStatic",config:{min:30,max:100}},{type:"scaleStatic",config:{min:2.08,max:2.8}},{type:"rotationStatic",config:{min:90,max:90}},{type:"textureRandom",config:{textures:Array.fromRange(4).map((t=>"modules/"+e.ID+`/assets/tcu${t+1}.webp`))}}]});return Generators.applyGeneratorToEmitterConfig(i,r),r}))})),Hooks.on(e.LCCNAME+"RegisterGenerators",(async()=>{SceneWeather.registerWeatherFxGenerator("rain",(function(e){if(FoundryAbstractionLayer.getSetting("precipitationAlpha",100)<2)return;if(![o.drizzle,o.rain,o.downpour,o.hail].includes(e.precipitation.type))return null;let t=90;switch(e.precipitation.mode??"winddir"){case"winddir":default:t=(Math.round(e.wind.direction)+90)%360;break;case"topdown":t=90;break;case"slanted":t=75;break;case"windinfluence":t=90+Math.sin(e.wind.direction*Math.PI/180)*Utils$1.map(e.wind.speed,10,70,3,45)}const i={alpha:FoundryAbstractionLayer.getSetting("precipitationAlpha",100)/100,direction:t,speed:Utils$1.map(e.precipitation.amount,.4,.95,.6,2),scale:1,lifetime:Utils$1.map(e.precipitation.amount,.4,.95,1,.5),density:Utils$1.map(e.precipitation.amount,.4,.95,.01,4),tint:null},r=Utils$1.deepClone({weight:.2,lifetime:{min:.5,max:.5},pos:{x:0,y:0},behaviors:[{type:"alpha",config:{alpha:{list:[{time:0,value:.7},{time:1,value:.1}]}}},{type:"moveSpeedStatic",config:{min:2800,max:3500}},{type:"scaleStatic",config:{min:.8,max:1}},{type:"rotationStatic",config:{min:89,max:91}},{type:"textureSingle",config:{texture:"ui/particles/rain.png"}}]});return Generators.applyGeneratorToEmitterConfig(i,r),r}))})),Hooks.on(e.LCCNAME+"RegisterGenerators",(async()=>{SceneWeather.registerWeatherFxGenerator("snow",(function(e){if(FoundryAbstractionLayer.getSetting("precipitationAlpha",100)<2)return;if(![o.snow,o.blizzard].includes(e.precipitation.type))return null;let t=90;switch(e.precipitation.mode??"winddir"){case"winddir":default:t=(Math.round(e.wind.direction)+90)%360;break;case"topdown":t=90;break;case"slanted":t=75;break;case"windinfluence":t=90+Math.sin(e.wind.direction*Math.PI/180)*Utils$1.map(e.wind.speed,10,70,10,90)}const i={alpha:FoundryAbstractionLayer.getSetting("precipitationAlpha",100)/100,direction:t,speed:Utils$1.map(e.wind.speed,10,70,.3,5),scale:1,lifetime:Utils$1.map(e.precipitation.amount,.4,.95,1,.7),density:Utils$1.map(e.precipitation.amount,.4,.95,.01,3),tint:null},r=Utils$1.deepClone({weight:.2,lifetime:{min:4,max:4},behaviors:[{type:"alpha",config:{alpha:{list:[{time:0,value:.9},{time:1,value:.5}]}}},{type:"moveSpeed",config:{speed:{list:[{time:0,value:190},{time:1,value:210}]},minMult:.6}},{type:"scale",config:{scale:{list:[{time:0,value:.2},{time:1,value:.4}]},minMult:.5}},{type:"rotation",config:{accel:0,minSpeed:0,maxSpeed:200,minStart:50,maxStart:75}},{type:"textureSingle",config:{texture:"ui/particles/snow.png"}}]});return Generators.applyGeneratorToEmitterConfig(i,r),r}))})),Hooks.on(e.LCCNAME+"RegisterGenerators",(async()=>{SceneWeather.registerWeatherFxGenerator("stratus",(function(t){if(FoundryAbstractionLayer.getSetting("cloudsAlpha",100)<2)return;if(![s.stratus,s.cumulus,s.cumulunimbus].includes(t.clouds.type))return null;let i={alpha:FoundryAbstractionLayer.getSetting("cloudsAlpha",100)/100,direction:(Math.round(t.wind.direction)+90)%360,speed:Utils$1.map(t.wind.speed,10,100,.2,2.5),scale:Utils$1.map(t.clouds.coverage,.3,1,1,2),lifetime:1,density:Utils$1.map(t.clouds.coverage,.2,1,.001,.01),tint:null};3==t.clouds.type&&(i.tint="#A0A0A0",i.density=.007,i.scale=1),4==t.clouds.type&&(i.tint="#808080",i.density=.01,i.scale=1.2);const r=Utils$1.deepClone({weight:.7,behaviors:[{type:"alpha",config:{alpha:{list:[{value:0,time:0},{value:.5,time:.05},{value:.5,time:.95},{value:0,time:1}]}}},{type:"moveSpeedStatic",config:{min:30,max:100}},{type:"scaleStatic",config:{min:2.58,max:3.3}},{type:"rotationStatic",config:{min:80,max:100}},{type:"textureRandom",config:{textures:Array.fromRange(6).map((t=>"modules/"+e.ID+`/assets/st${t+1}.webp`))}}]});return Generators.applyGeneratorToEmitterConfig(i,r),r}))})),Hooks.on(i.REG_WEATHER_PERCIEVERS,(async()=>{SceneWeather.registerPerciever(e.ID,"icon",new IconPerciever)}));const p="meteo.icon.";class IconPerciever extends WeatherPerception{isAllowed(e){return Permissions.hasPermission(e,"perciever.scene-weather.icon")}async getTextFromModel(e){return Handlebars.compile(FoundryAbstractionLayer.i18n("meteo.icon.templates.text"))(await this.getWeatherInfoFromModel(e))}async getUiHtmlFromModel(t){return await renderTemplate("modules/"+e.ID+"/templates/iconPerceptionUi.hbs",await this.getWeatherInfoFromModel(t))}async getChatHtmlFromModel(t){return await renderTemplate("modules/"+e.ID+"/templates/iconPerceptionChat.hbs",Utils$1.mergeObject({description:await this.getTextFromModel(t)},await this.getWeatherInfoFromModel(t)))}async getWeatherInfoFromModel(e){let t=Utils$1.mergeObject(Utils$1.deepClone(WeatherPerception.DEFAULT_WEATHER_STRUCT),{temperature:{air:e.temp.air.toFixed(1),ground:e.temp.ground.toFixed(1),percieved:e.temp.percieved.toFixed(1)},humidity:{percent:NaN},wind:{speed:NaN,gusts:NaN,direction:NaN},clouds:{height:NaN,amount:30*Math.round(30*e.clouds.coverage),type:e.clouds.type},sun:{amount:e.sun.amount>.3?1:0},precipitation:{amount:e.precipitation.amount>.4?1:0,type:e.precipitation.type},composite:{sun:e.sun.amount>.3?"sun":"none",clouds:"none",preci:"none",wind:"none"},descriptive:{sun:e.sun.amount>.3?p+"sun.sun":p+"sun.none",clouds:p+"clouds.none",preci:p+"precipitation.none",wind:p+"wind.none"}});switch(e.clouds.type){case s.fog:return t.composite.clouds="fog",t.descriptive.clouds=p+"clouds.fog",t;case s.stratus:case s.cumulus:t.composite.clouds="cloud",t.descriptive.clouds=p+"clouds.cloud";break;case s.cumulunimbus:t.composite.clouds="thunder",t.descriptive.clouds=p+"clouds.thunder"}switch(e.precipitation.type){case o.drizzle:t.composite.preci="lightRain",t.descriptive.preci=p+"precipitation.lightRain";break;case o.rain:case o.downpour:t.composite.preci="rain",t.descriptive.preci=p+"precipitation.rain";break;case o.hail:case o.snow:t.composite.preci="lightSnow",t.descriptive.preci=p+"precipitation.lightSnow";break;case o.blizzard:t.composite.preci="snow",t.descriptive.preci=p+"precipitation.snow"}return e.wind.speed>50&&(t.composite.wind="wind",t.descriptive.preci=p+"wind.wind"),Logger.debug("IconPerciever.getWeatherInfoFromModel()",{modelData:e,weatherInfo:t}),t}getPercieverInfo(){const e=Utils$1.mergeObject(Utils$1.deepClone(WeatherPerception.DEFAULT_INFO_STRUCT),{id:"icon",name:FoundryAbstractionLayer.i18n(p+"name")});return Logger.debug("IconPerciever.getPercieverInfo()",{info:e}),e}}Hooks.on(i.REG_WEATHER_PERCIEVERS,(async()=>{SceneWeather.registerPerciever(e.ID,"perceptive",new PerceptivePerciever)}));const h="meteo.perceptive.";class PerceptivePerciever extends WeatherPerception{isAllowed(e){return Permissions.hasPermission(e,"perciever.scene-weather.perceptive")}async getTextFromModel(e){const t=await this.getWeatherInfoFromModel(e);return Handlebars.compile(FoundryAbstractionLayer.i18n("meteo.perceptive.templates.text"))(t)}async getUiHtmlFromModel(e){const t=await this.getWeatherInfoFromModel(e);return Handlebars.compile(FoundryAbstractionLayer.i18n("meteo.perceptive.templates.ui"))(t)}async getChatHtmlFromModel(e){return this.getUiHtmlFromModel(e)}async getWeatherInfoFromModel(e){const t=Utils$1.mergeObject(Utils$1.deepClone(WeatherPerception.DEFAULT_WEATHER_STRUCT),PerceptivePerciever._calculateWeatherInfoFromModelData(e));return Logger.debug("PerceptivePerciever.getWeatherInfoFromModel()",{weatherModel:e,weatherInfo:t}),t}getPercieverInfo(){const e=Utils$1.mergeObject(Utils$1.deepClone(WeatherPerception.DEFAULT_INFO_STRUCT),{id:"perceptive",name:FoundryAbstractionLayer.i18n(h+"name")});return Logger.debug("PerceptivePerciever.getPercieverInfo()",{info:e}),e}static _fahrenheitToCelsius(e){return(e-32)/1.8}static _celsiusToFahrenheit(e){return 1.8*e+32}static _getPrecipitationTypeId(e){const[t]=Object.entries(o).find((([,t])=>t===e));return t?h+t:h+"none"}static _getPrecipitationAmountId(e){const[t]=Object.entries(l).find((([,t])=>e<t));return h+t}static _getSunAmountId(e){const[t]=Object.entries(d).find((([,t])=>e<t));return h+t}static _getCloudTypeId(e){const[t]=Object.entries(s).find((([,t])=>t===e));return t?h+t:h+"cumulunimbus"}static _getCloudAmountId(e){return h+["skc","few","few","sct","sct","bkn","bkn","bkn","ovc"][Math.round(8*e)]}static _getCloudHightId(e){const[t]=Object.entries(u).find((([,t])=>e<t));return h+t}static _getWindDirId(e){let t=Math.floor(e/22.5+.5);return h+["n","nne","ne","ene","e","ese","se","sse","s","ssw","sw","wsw","w","wnw","nw","nnw"][t%16]}static _getWindSpeedId(e){let t=e.gusts>5?"Gusting":"";const[i]=Object.entries(g).find((([,t])=>e.speed<t));return h+i+t}static _getHumidityId(e){const[t]=Object.entries(c).find((([,t])=>e<t));return h+t}static _getPercievedTempId(e){const[t]=Object.entries(m).find((([,t])=>e<t));return h+t}static _calculateWeatherInfoFromModelData(e){return Logger.debug("PerceptivePerciever._calculateWeatherInfoFromModelData()",{modelData:e}),{name:e.name,temperature:{air:Math.round(e.temp.air),ground:Math.round(e.temp.ground),percieved:Math.round(e.temp.percieved),percievedId:PerceptivePerciever._getPercievedTempId(e.temp.percieved)},humidity:{percent:Math.round(e.humidity),percentId:PerceptivePerciever._getHumidityId(e.humidity)},wind:{speed:Math.round(e.wind.speed),gusts:Math.round(e.wind.gusts),speedId:PerceptivePerciever._getWindSpeedId(e.wind),direction:Math.round(e.wind.direction),directionId:PerceptivePerciever._getWindDirId(e.wind.direction)},clouds:{height:Math.round(e.clouds.bottom),heightId:PerceptivePerciever._getCloudHightId(e.clouds.bottom),amount:Math.round(100*e.clouds.coverage),amountId:PerceptivePerciever._getCloudAmountId(e.clouds.coverage),type:PerceptivePerciever._getCloudTypeId(e.clouds.type)},sun:{amount:Math.round(100*e.sun.amount),amountId:PerceptivePerciever._getSunAmountId(e.sun.amount)},precipitation:{amount:Math.round(100*e.precipitation.amount),amountId:PerceptivePerciever._getPrecipitationAmountId(e.precipitation.amount),type:PerceptivePerciever._getPrecipitationTypeId(e.precipitation.type)}}}}Hooks.on(i.REG_WEATHER_PERCIEVERS,(async()=>{SceneWeather.registerPerciever(e.ID,"precise",new PrecisePerciever)}));class PrecisePerciever extends WeatherPerception{isAllowed(e){return Permissions.hasPermission(e,"perciever.scene-weather.precise")}async getTextFromModel(e){return JSON.stringify(this.getWeatherInfoFromModel(e))}async getUiHtmlFromModel(t){return await renderTemplate("modules/"+e.ID+"/templates/precisePerceptionUi.hbs",await this.getWeatherInfoFromModel(t))}async getChatHtmlFromModel(e){return this.getUiHtmlFromModel(e)}async getWeatherInfoFromModel(e){const t=Utils$1.mergeObject(Utils$1.deepClone(WeatherPerception.DEFAULT_WEATHER_STRUCT),{temperature:{air:e.temp.air.toFixed(1),ground:e.temp.ground.toFixed(1),percieved:e.temp.percieved.toFixed(1)},humidity:{percent:e.humidity.toFixed(1)},wind:{speed:Math.round(e.wind.speed),gusts:Math.round(e.wind.gusts),direction:Math.round(e.wind.direction)},clouds:{height:Math.round(e.clouds.bottom),amount:Math.round(100*e.clouds.coverage),type:e.clouds.type,typeId:PrecisePerciever._getCloudTypeId(e.clouds.type)},sun:{amount:Math.round(100*e.sun.amount)},precipitation:{amount:Math.round(100*e.precipitation.amount),type:e.precipitation.type,typeId:PrecisePerciever._getPrecipitationTypeId(e.precipitation.type)}});return Logger.debug("PerceptivePerciever.getWeatherInfoFromModel()",{modelData:e,weatherInfo:t}),t}getPercieverInfo(){const e=Utils$1.mergeObject(Utils$1.deepClone(WeatherPerception.DEFAULT_INFO_STRUCT),{id:"precise",name:FoundryAbstractionLayer.i18n("meteo.precise.name")});return Logger.debug("PrecisePerciever.getPercieverInfo()",{info:e}),e}static _getCloudTypeId(e){const[t]=Object.entries(s).find((([,t])=>t===e));return t?`meteo.precise.cloudTypes.${t}`:"meteo.precise.cloudTypes.cumulunimbus"}static _getPrecipitationTypeId(e){const[t]=Object.entries(o).find((([,t])=>t===e));return t?`meteo.precise.precipitationTypes.${t}`:"meteo.precise.precipitationTypes.none"}}Hooks.on(i.REG_WEATHER_PERCIEVERS,(async()=>{Logger.debug("registered weatherPerciever for vague"),SceneWeather.registerPerciever(e.ID,"vague",new VaguePerciever)}));class VaguePerciever extends WeatherPerception{isAllowed(e){return Permissions.hasPermission(e,"perciever.scene-weather.vague")}async getTextFromModel(e){return Handlebars.compile(FoundryAbstractionLayer.i18n("meteo.vague.templates.text"))(await this.getWeatherInfoFromModel(e))}async getUiHtmlFromModel(e){return Handlebars.compile(FoundryAbstractionLayer.i18n("meteo.vague.templates.ui"))(await this.getWeatherInfoFromModel(e))}async getChatHtmlFromModel(e){return this.getUiHtmlFromModel(e)}async getWeatherInfoFromModel(e){const t=5*Math.round(e.temp.percieved/5);let i=Utils$1.mergeObject(Utils$1.deepClone(WeatherPerception.DEFAULT_WEATHER_STRUCT),{temperature:{air:t,ground:NaN,percieved:t},humidity:{percent:NaN},wind:{speed:NaN,gusts:NaN,direction:NaN},clouds:{height:NaN,amount:10*Math.round(10*e.clouds.coverage),type:e.clouds.type>s.stratus?s.cumulus:s.none},sun:{amount:e.sun.amount>.3?1:0},precipitation:{amount:e.precipitation.amount>.4?1:0,type:e.precipitation.type>o.rain?o.rain:o.none},modifiers:{skyType:"none",tempType:"none",windType:"none"}});if(e.clouds.type==s.none)i.modifiers.skyType="meteo.vague.clear";else if(e.clouds.type==s.fog)i.modifiers.skyType="meteo.vague.fog";else if(e.clouds.type>=s.stratus)switch(e.precipitation.type){case o.blizzard:case o.snow:i.modifiers.skyType="meteo.vague.snow";break;case o.hail:case o.downpour:i.modifiers.skyType="meteo.vague.downpour",e.clouds.type>=s.cumulunimbus&&(i.modifiers.skyType="meteo.vague.thunderstorm");break;case o.rain:i.modifiers.skyType="meteo.vague.rain",e.clouds.type>=s.cumulunimbus&&(i.modifiers.skyType="meteo.vague.thunderstorm");break;case o.drizzle:i.modifiers.skyType="meteo.vague.drizzle";break;case o.none:default:i.modifiers.skyType="meteo.vague.cloudy"}return t>30?(i.modifiers.tempType="meteo.vague.warm",e.wind.speed>40&&(i.modifiers.windType="meteo.vague.windy")):t<5&&(i.modifiers.tempType="meteo.vague.cold",e.wind.speed>40&&(i.modifiers.windType="meteo.vague.windy")),Logger.debug("VaguePerciever.getWeatherInfoFromModel()",{modelData:e,weatherInfo:i}),i}getPercieverInfo(){const e=Utils$1.mergeObject(Utils$1.deepClone(WeatherPerception.DEFAULT_INFO_STRUCT),{id:"vague",name:FoundryAbstractionLayer.i18n("meteo.vague.name")});return Logger.debug("VaguePerciever.getPercieverInfo()",{info:e}),e}}Hooks.once("init",(()=>{Logger.trace("->Hook:InternalTimeProvider.init()"),TimeProvider._instances[a.INTERNAL]=new InternalTimeProvider(!0),TimeProvider._instances[a.EXTERNAL]=new InternalTimeProvider(!1)}));class InternalTimeProvider extends TimeProvider{constructor(e=!1){super(),Logger.trace("InternalTimeProvider:ctor(...)",{hasAuthority:e}),this._hasAuthoriy=e,this._monthOffset=[0,31,59,90,120,151,181,212,243,273,304,334]}hasTimeAuthority(){return this._hasAuthoriy}async advanceGameTime(e=0){if(Logger.debug("InternalTimeProvider.advanceGameTime(...)",{deltaSeconds:e}),this._hasAuthoriy){if(0==e)return;FoundryAbstractionLayer.isGm()&&(FoundryAbstractionLayer.getWorldTime(),await FoundryAbstractionLayer.advanceWorldTime(e))}}getHoursInDay(){return 25}getNumberOfMonths(){return 12}getMonthOffset(e){return this._monthOffset[Utils.clamp(e,0,11)]}getDayOfYear(e=0,t=0){const i=new Date(1e3*(FoundryAbstractionLayer.getWorldTime()+3600*t+86400*e)),r=this._monthOffset[i.getMonth()]+i.getDate();return Logger.trace("InternalTimeProvider.getDayOfYear()",{"month#":i.getMonth(),"day#":i.getDate(),doY:r}),r}getHourOfDay(e=0,t=0){const i=FoundryAbstractionLayer.getWorldTime()+3600*t+86400*e,r=Math.abs(Math.trunc(i%86400/3600));return Logger.trace("InternalTimeProvider.getHourOfDay()",{currentWorldTime:i,dayTime:r}),i<0?24-r:r}hourOfDayNoonPct(e=0,t=0){const i=TimeProvider.getHourOfDay(e,t)%24;return(Math.sin((i/12-.5)*Math.PI)+1)/2}dayOfYearSummerPct(e=0,t=0){let i,r=TimeProvider.getDayOfYear(e,t);return r>355&&(r-=365),i=172==r?1:r<172?(r+10)/182:1-(r-172)/183,i}static _decodeFractalString(e=0,t=""){if(""==t)return"";let i="";return t.split(",").find((t=>{const[r,a]=t.split(":");if(r.includes("-")){const[t,n]=r.split("-");if(e<=Number(n)&&e>=Number(t))return i=a,!0}else if(Number(r)==e)return i=a,!0;return!1})),i}getTimeStringData(){const e=FoundryAbstractionLayer.getWorldTime(),t=new Date(1e3*e);return{month:{number:t.getMonth(),name:FoundryAbstractionLayer.i18n("time.months."+t.getMonth()),prefix:InternalTimeProvider._decodeFractalString(t.getDate(),FoundryAbstractionLayer.i18n("time.monthPrefixTypes")),suffix:InternalTimeProvider._decodeFractalString(t.getDate(),FoundryAbstractionLayer.i18n("time.monthSuffixTypes"))},day:{number:t.getDate(),name:t.getDate(),prefix:InternalTimeProvider._decodeFractalString(t.getDate(),FoundryAbstractionLayer.i18n("time.dayPrefixTypes")),suffix:InternalTimeProvider._decodeFractalString(t.getDate(),FoundryAbstractionLayer.i18n("time.daySuffixTypes"))},hour:{number:t.getHours(),name:t.getHours()<10?"0"+t.getHours():t.getHours()},minute:{number:t.getMinutes(),name:t.getMinutes()<10?"0"+t.getMinutes():t.getMinutes()}}}}Hooks.once("init",(()=>{Logger.trace("->Hook:init -> ScTimeProvider.init()"),FoundryAbstractionLayer.isModuleEnabled("foundryvtt-simple-calendar")&&(TimeProvider._instances[a.SIMPLE_CALENDAR]=new ScTimeProvider)})),Hooks.once("simple-calendar-init",(()=>{Logger.trace("->Hook:simple-calendar-init -> ScTimeProvider.initConfig()"),FoundryAbstractionLayer.isModuleEnabled("foundryvtt-simple-calendar")&&ScTimeProvider.initConfig()}));class ScTimeProvider extends TimeProvider{static _config={daysInYear:365,summerSolstice:172,winterSolstice:355,monthOffset:[0,31,59,90,120,151,181,212,243,273,304,334],hoursInDay:24,minutesInHour:60,secondsInMinute:60,secondsInHour:3600,secondsInDay:86400};constructor(){super(),Logger.trace("ScTimeProvider:ctor()")}hasTimeAuthority(){return!1}async advanceGameTime(e=0){Logger.warn("ScTimeProvider.advanceGameTime(...) -> no time authority, ignoring")}getHoursInDay(){return ScTimeProvider._config.hoursInDay}getNumberOfMonths(){return ScTimeProvider._config.monthOffset.length}getMonthOffset(e){return ScTimeProvider._config.monthOffset[Utils.clamp(e,0,ScTimeProvider._config.monthOffset.length-1)]}getDayOfYear(e=0,t=0){const i=SimpleCalendar.api.timestampToDate(FoundryAbstractionLayer.getWorldTime()+t*ScTimeProvider._config.secondsInHour+e*ScTimeProvider._config.secondsInDay);return Logger.trace("ScTimeProvider.getDayOfYear()",{scInstance:i,_config:ScTimeProvider._config}),ScTimeProvider._config.monthOffset[i.month]+i.day}getHourOfDay(e=0,t=0){const i=FoundryAbstractionLayer.getWorldTime()+t*ScTimeProvider._config.secondsInHour+e*ScTimeProvider._config.secondsInDay,r=Math.abs(Math.trunc(i%ScTimeProvider._config.secondsInDay/ScTimeProvider._config.secondsInHour));return Logger.trace("ScTimeProvider.getHourOfDay()",{currentWorldTime:i,dayTime:r}),i<0?ScTimeProvider._config.hoursInDay-r:r}hourOfDayNoonPct(e=0,t=0){const i=this.getHourOfDay(e,t)%ScTimeProvider._config.hoursInDay;return(Math.sin((i/(ScTimeProvider._config.hoursInDay/2)-.5)*Math.PI)+1)/2}dayOfYearSummerPct(e=0,t=0){const i=this.getDayOfYear(e,t),r=ScTimeProvider._config.summerSolstice,a=ScTimeProvider._config.winterSolstice;let n,o=a,s=a;return a<r?s=a+ScTimeProvider._config.daysInYear:o=a-ScTimeProvider._config.daysInYear,i>s&&(i-=ScTimeProvider._config.daysInYear),n=i==r?1:i<r?(i-o)/(r-o):1-(i-r)/(s-r),n}getTimeStringData(){const e=SimpleCalendar.api.timestampToDate(FoundryAbstractionLayer.getWorldTime());return{month:{number:e.display.month,name:e.display.monthName,prefix:"",suffix:""},day:{number:e.display.day,name:e.display.day,prefix:"",suffix:e.display.daySuffix},hour:{number:e.hour,name:e.hour<10?"0"+e.hour:e.hour},minute:{number:e.minute,name:e.minute<10?"0"+e.minute:e.minute}}}static _getHoursInDay(){return ScTimeProvider._config.hoursInDay}static initConfig(){const e=SimpleCalendar.api.getAllMonths()||[],t=SimpleCalendar.api.getTimeConfiguration(),i=e.map((e=>e.numberOfDays)),r=ScTimeProvider._getStartingDays(i),n=r[r.length-1]+i[i.length-1];ScTimeProvider._config={providerId:a.SIMPLE_CALENDAR,daysInYear:n,summerSolstice:172,winterSolstice:355,monthOffset:r,hoursInDay:t.hoursInDay,minutesInHour:t.minutesInHour,secondsInMinute:t.secondsInMinute,secondsInHour:t.secondsInMinute*t.minutesInHour,secondsInDay:t.secondsInMinute*t.minutesInHour*t.hoursInDay},ScTimeProvider._calculateSolstices(),Logger.debug("ScTimeProvider._initConfig(simple-calendar)",{_config:ScTimeProvider._config})}static _getStartingDays(e){const t=e.reduce(((e,t)=>(e.push(e[e.length-1]+t),e)),[0]).slice(0,-1);return Logger.trace("ScTimeProvider._getStartingDays(...)",{daysInMonth:e,dayOffsets:t}),t}static _calculateSolstices(){let e=[];ScTimeProvider._config.summerSolstice=-1,ScTimeProvider._config.winterSolstice=-1,SimpleCalendar.api.getAllSeasons().forEach((t=>{const i=ScTimeProvider._config.monthOffset[t.startingMonth]+t.startingDay;e.push({icon:t.icon,dayLengthSeconds:t.sunsetTime-t.sunriseTime,startingDoY:i}),"summer"==t.icon&&(ScTimeProvider._config.summerSolstice=i),"winter"==t.icon&&(ScTimeProvider._config.winterSolstice=i)}));const t=e.sort(((e,t)=>e.startingDoY-t.startingDoY));if(-1==ScTimeProvider._config.summerSolstice){const e=t.reduce(((e,t)=>e.dayLengthSeconds>=t.dayLengthSeconds?e:t),null);ScTimeProvider._config.summerSolstice=e.startingDoY}if(-1==ScTimeProvider._config.winterSolstice){const e=t.reduce(((e,t)=>e.dayLengthSeconds<=t.dayLengthSeconds?e:t),null);ScTimeProvider._config.winterSolstice=e.startingDoY}Logger.trace("ScTimeProvider._calculateSolstices()",{summerSolstice:ScTimeProvider._config.summerSolstice,winterSolstice:ScTimeProvider._config.winterSolstice})}}Hooks.on(i.REG_TEMPLATE_REGION,(async()=>{SceneWeather.registerRegionTemplate(e.ID,"alpine",{name:"templates.region.alpine.name",description:"templates.region.alpine.description",elevation:1e3,vegetation:0,waterAmount:0,summer:{temperature:{day:15,night:5,var:7.5},humidity:{day:50,night:60,var:5},wind:{avg:30,var:10},sun:{hours:14}},winter:{temperature:{day:0,night:-15,var:7.5},humidity:{day:70,night:60,var:5},wind:{avg:40,var:20},sun:{hours:10}}})})),Hooks.on(i.REG_TEMPLATE_REGION,(async()=>{SceneWeather.registerRegionTemplate(e.ID,"chaparral",{name:"templates.region.chaparral.name",description:"templates.region.chaparral.description",elevation:1e3,vegetation:5,waterAmount:5,summer:{temperature:{day:32.5,night:17.5,var:5},humidity:{day:60,night:40,var:5},wind:{avg:25,var:10},sun:{hours:13}},winter:{temperature:{day:17.5,night:2.5,var:5},humidity:{day:60,night:50,var:5},wind:{avg:30,var:10},sun:{hours:11}}})})),Hooks.on(i.REG_TEMPLATE_REGION,(async()=>{SceneWeather.registerRegionTemplate(e.ID,"coastal",{name:"templates.region.coastal.name",description:"templates.region.coastal.description",elevation:100,vegetation:20,waterAmount:70,summer:{temperature:{day:25,night:15,var:10},humidity:{day:80,night:75,var:15},wind:{avg:10,var:25},sun:{hours:14}},winter:{temperature:{day:15,night:5,var:10},humidity:{day:75,night:70,var:5},wind:{avg:20,var:25},sun:{hours:10}}})})),Hooks.on(i.REG_TEMPLATE_REGION,(async()=>{SceneWeather.registerRegionTemplate(e.ID,"desert",{name:"templates.region.desert.name",description:"templates.region.desert.description",elevation:500,vegetation:0,waterAmount:0,summer:{temperature:{day:45,night:25,var:10},humidity:{day:10,night:20,var:5},wind:{avg:30,var:10},sun:{hours:13}},winter:{temperature:{day:25,night:5,var:10},humidity:{day:30,night:50,var:20},wind:{avg:25,var:10},sun:{hours:11}}})})),Hooks.on(i.REG_TEMPLATE_REGION,(async()=>{SceneWeather.registerRegionTemplate(e.ID,"grassland",{name:"templates.region.grassland.name",description:"templates.region.grassland.description",elevation:200,vegetation:40,waterAmount:20,summer:{temperature:{day:30,night:15,var:10},humidity:{day:70,night:80,var:5},wind:{avg:10,var:10},sun:{hours:14}},winter:{temperature:{day:10,night:-5,var:10},humidity:{day:70,night:60,var:10},wind:{avg:10,var:10},sun:{hours:10}}})})),Hooks.on(i.REG_TEMPLATE_REGION,(async()=>{SceneWeather.registerRegionTemplate(e.ID,"littoral",{name:"templates.region.littoral.name",description:"templates.region.littoral.description",elevation:0,vegetation:1,waterAmount:50,summer:{temperature:{day:25,night:15,var:10},humidity:{day:60,night:60,var:5},wind:{avg:10,var:5},sun:{hours:16}},winter:{temperature:{day:15,night:5,var:10},humidity:{day:60,night:60,var:10},wind:{avg:15,var:10},sun:{hours:8}}})})),Hooks.on(i.REG_TEMPLATE_REGION,(async()=>{SceneWeather.registerRegionTemplate(e.ID,"mangrove",{name:"templates.region.mangrove.name",description:"templates.region.mangrove.description",elevation:0,vegetation:80,waterAmount:60,summer:{temperature:{day:32.5,night:22.5,var:5},humidity:{day:60,night:70,var:10},wind:{avg:10,var:5},sun:{hours:16}},winter:{temperature:{day:27.5,night:17.5,var:5},humidity:{day:60,night:60,var:10},wind:{avg:15,var:10},sun:{hours:8}}})})),Hooks.on(i.REG_TEMPLATE_REGION,(async()=>{SceneWeather.registerRegionTemplate(e.ID,"mediterranean",{name:"templates.region.mediterranean.name",description:"templates.region.mediterranean.description",elevation:500,vegetation:50,waterAmount:20,summer:{temperature:{day:30,night:17.5,var:7.5},humidity:{day:60,night:65,var:5},wind:{avg:15,var:10},sun:{hours:15}},winter:{temperature:{day:17.5,night:7.5,var:5},humidity:{day:70,night:60,var:10},wind:{avg:20,var:10},sun:{hours:9}}})})),Hooks.on(i.REG_TEMPLATE_REGION,(async()=>{SceneWeather.registerRegionTemplate(e.ID,"polar",{name:"templates.region.polar.name",description:"templates.region.polar.description",elevation:0,vegetation:0,waterAmount:30,summer:{temperature:{day:2.5,night:-2.5,var:5},humidity:{day:80,night:65,var:10},wind:{avg:35,var:20},sun:{hours:23}},winter:{temperature:{day:-15,night:-25,var:10},humidity:{day:90,night:70,var:5},wind:{avg:40,var:20},sun:{hours:1}}})})),Hooks.on(i.REG_TEMPLATE_REGION,(async()=>{SceneWeather.registerRegionTemplate(e.ID,"rainforest",{name:"templates.region.rainforest.name",description:"templates.region.rainforest.description",elevation:200,vegetation:100,waterAmount:80,summer:{temperature:{day:32.5,night:22.5,var:5},humidity:{day:90,night:80,var:10},wind:{avg:5,var:5},sun:{hours:12}},winter:{temperature:{day:32.5,night:22.5,var:5},humidity:{day:80,night:70,var:10},wind:{avg:5,var:5},sun:{hours:12}}})})),Hooks.on(i.REG_TEMPLATE_REGION,(async()=>{SceneWeather.registerRegionTemplate(e.ID,"savanna",{name:"templates.region.savanna.name",description:"templates.region.savanna.description",elevation:300,vegetation:30,waterAmount:5,summer:{temperature:{day:32.5,night:22.5,var:5},humidity:{day:60,night:70,var:10},wind:{avg:20,var:10},sun:{hours:13}},winter:{temperature:{day:27.5,night:17.5,var:5},humidity:{day:40,night:30,var:10},wind:{avg:20,var:10},sun:{hours:11}}})})),Hooks.on(i.REG_TEMPLATE_REGION,(async()=>{SceneWeather.registerRegionTemplate(e.ID,"steppe",{name:"templates.region.steppe.name",description:"templates.region.steppe.description",elevation:500,vegetation:5,waterAmount:0,summer:{temperature:{day:27.5,night:15,var:5},humidity:{day:30,night:25,var:5},wind:{avg:25,var:10},sun:{hours:14}},winter:{temperature:{day:5,night:-5,var:10},humidity:{day:40,night:30,var:10},wind:{avg:20,var:10},sun:{hours:10}}})})),Hooks.on(i.REG_TEMPLATE_REGION,(async()=>{SceneWeather.registerRegionTemplate(e.ID,"taiga",{name:"templates.region.taiga.name",description:"templates.region.taiga.description",elevation:400,vegetation:70,waterAmount:10,summer:{temperature:{day:20,night:10,var:10},humidity:{day:70,night:80,var:5},wind:{avg:15,var:10},sun:{hours:17}},winter:{temperature:{day:-5,night:-25,var:10},humidity:{day:80,night:60,var:5},wind:{avg:25,var:10},sun:{hours:8}}})})),Hooks.on(i.REG_TEMPLATE_REGION,(async()=>{SceneWeather.registerRegionTemplate(e.ID,"temperate",{name:"templates.region.temperate.name",description:"templates.region.temperate.description",elevation:400,vegetation:50,waterAmount:10,summer:{temperature:{day:25,night:15,var:10},humidity:{day:70,night:60,var:10},wind:{avg:15,var:10},sun:{hours:15}},winter:{temperature:{day:10,night:0,var:10},humidity:{day:60,night:65,var:5},wind:{avg:20,var:10},sun:{hours:9}}})})),Hooks.on(i.REG_TEMPLATE_REGION,(async()=>{SceneWeather.registerRegionTemplate(e.ID,"tundra",{name:"templates.region.tundra.name",description:"templates.region.tundra.description",elevation:300,vegetation:1,waterAmount:5,summer:{temperature:{day:7.5,night:2.5,var:5},humidity:{day:60,night:50,var:10},wind:{avg:20,var:10},sun:{hours:18}},winter:{temperature:{day:-15,night:-25,var:10},humidity:{day:70,night:50,var:5},wind:{avg:25,var:10},sun:{hours:6}}})})),Hooks.on(i.REG_TEMPLATE_REGION,(async()=>{SceneWeather.registerRegionTemplate(e.ID,"wetland",{name:"templates.region.wetland.name",description:"templates.region.wetland.description",elevation:100,vegetation:60,waterAmount:80,summer:{temperature:{day:25,night:15,var:10},humidity:{day:70,night:80,var:10},wind:{avg:15,var:10},sun:{hours:16}},winter:{temperature:{day:5,night:-5,var:10},humidity:{day:60,night:60,var:5},wind:{avg:20,var:5},sun:{hours:8}}})})),Hooks.on(i.REG_TEMPLATE_WEATHER,(async()=>{SceneWeather.registerWeatherTemplate(e.ID,"blizzard",{name:"templates.weather.blizzard.name",temp:{ground:0,air:-3,percieved:-4},wind:{speed:70,gusts:85,direction:115},clouds:{coverage:.7,bottom:1e3,top:3e3,type:s.cumulunimbus},precipitation:{amount:1,type:o.blizzard},sun:{amount:.1},humidity:10})})),Hooks.on(i.REG_TEMPLATE_WEATHER,(async()=>{SceneWeather.registerWeatherTemplate(e.ID,"densefog",{name:"templates.weather.densefog.name",temp:{ground:18,air:15,percieved:16},wind:{speed:15,gusts:16,direction:127},clouds:{coverage:.9,bottom:0,top:3e3,type:s.fog},precipitation:{amount:0,type:o.none},sun:{amount:.6},humidity:80})})),Hooks.on(i.REG_TEMPLATE_WEATHER,(async()=>{SceneWeather.registerWeatherTemplate(e.ID,"fog",{name:"templates.weather.fog.name",temp:{ground:18,air:15,percieved:16},wind:{speed:15,gusts:16,direction:127},clouds:{coverage:.3,bottom:0,top:3e3,type:s.fog},precipitation:{amount:0,type:o.none},sun:{amount:.6},humidity:80})})),Hooks.on(i.REG_TEMPLATE_WEATHER,(async()=>{SceneWeather.registerWeatherTemplate(e.ID,"frigid",{name:"templates.weather.frigid.name",temp:{ground:-5,air:-20,percieved:-25},wind:{speed:30,gusts:35,direction:70},clouds:{coverage:0,bottom:0,top:0,type:s.none},precipitation:{amount:0,type:o.none},sun:{amount:.6},humidity:10})})),Hooks.on(i.REG_TEMPLATE_WEATHER,(async()=>{SceneWeather.registerWeatherTemplate(e.ID,"heatwave",{name:"templates.weather.heatwave.name",temp:{ground:30,air:37,percieved:42},wind:{speed:0,gusts:0,direction:0},clouds:{coverage:0,bottom:0,top:0,type:s.none},precipitation:{amount:0,type:o.none},sun:{amount:1},humidity:80})})),Hooks.on(i.REG_TEMPLATE_WEATHER,(async()=>{SceneWeather.registerWeatherTemplate(e.ID,"heavyrain",{name:"templates.weather.heavyrain.name",temp:{ground:15,air:15,percieved:12},wind:{speed:25,gusts:29,direction:85},clouds:{coverage:.8,bottom:500,top:1e3,type:s.cumulus},precipitation:{amount:.9,type:o.rain},sun:{amount:.3},humidity:70})})),Hooks.on(i.REG_TEMPLATE_WEATHER,(async()=>{SceneWeather.registerWeatherTemplate(e.ID,"moderaterain",{name:"templates.weather.moderaterain.name",temp:{ground:16,air:18,percieved:16},wind:{speed:14,gusts:18,direction:75},clouds:{coverage:.6,bottom:1e3,top:3e3,type:s.cumulus},precipitation:{amount:.4,type:o.rain},sun:{amount:.6},humidity:65})})),Hooks.on(i.REG_TEMPLATE_WEATHER,(async()=>{SceneWeather.registerWeatherTemplate(e.ID,"partlycloudy",{name:"templates.weather.partlycloudy.name",temp:{ground:22,air:25,percieved:25},wind:{speed:20,gusts:25,direction:15},clouds:{coverage:.3,bottom:3e3,top:4e3,type:s.stratus},precipitation:{amount:0,type:o.none},sun:{amount:.6},humidity:60})})),Hooks.on(i.REG_TEMPLATE_WEATHER,(async()=>{SceneWeather.registerWeatherTemplate(e.ID,"rain",{name:"templates.weather.rain.name",temp:{ground:15,air:17,percieved:15},wind:{speed:22,gusts:27,direction:80},clouds:{coverage:.8,bottom:500,top:1e3,type:s.cumulus},precipitation:{amount:.6,type:o.rain},sun:{amount:.3},humidity:65})})),Hooks.on(i.REG_TEMPLATE_WEATHER,(async()=>{SceneWeather.registerWeatherTemplate(e.ID,"slightsnow",{name:"templates.weather.slightsnow.name",id:"",name:"Snowing slightly",temp:{ground:1,air:2,percieved:0},wind:{speed:14,gusts:18,direction:133},clouds:{coverage:.3,bottom:1e3,top:3e3,type:s.cumulus},precipitation:{amount:.4,type:o.snow},sun:{amount:.5},humidity:45})})),Hooks.on(i.REG_TEMPLATE_WEATHER,(async()=>{SceneWeather.registerWeatherTemplate(e.ID,"snow",{name:"templates.weather.snow.name",id:"",name:"Snowing",temp:{ground:0,air:-3,percieved:-4},wind:{speed:24,gusts:28,direction:223},clouds:{coverage:.3,bottom:1e3,top:3e3,type:s.cumulus},precipitation:{amount:.6,type:o.snow},sun:{amount:.3},humidity:45})})),Hooks.on(i.REG_TEMPLATE_WEATHER,(async()=>{SceneWeather.registerWeatherTemplate(e.ID,"snow",{name:"templates.weather.snow.name",id:"",name:"Snowing",temp:{ground:0,air:-3,percieved:-4},wind:{speed:24,gusts:28,direction:223},clouds:{coverage:.3,bottom:1e3,top:3e3,type:s.cumulus},precipitation:{amount:.6,type:o.snow},sun:{amount:.3},humidity:45})})),Hooks.on(i.REG_TEMPLATE_WEATHER,(async()=>{SceneWeather.registerWeatherTemplate(e.ID,"thunderstorm",{name:"templates.weather.thunderstorm.name",temp:{ground:14,air:13,percieved:11},wind:{speed:50,gusts:75,direction:90},clouds:{coverage:.95,bottom:500,top:8e3,type:s.cumulunimbus},precipitation:{amount:.95,type:o.downpour},sun:{amount:.1},humidity:70})}));export{u as CLOUD_HEIGHT,s as CLOUD_TYPE,ColorFilter,i as EVENTS,FlashFilter,FoundryAbstractionLayer,t as GENERATOR_MODES,Generators,c as HUMIDITY_LEVELS,InternalTimeProvider,Logger,n as METEO,e as MODULE,MeteoUi,Noise,l as PRECI_AMOUNT,o as PRECI_TYPE,PermissionConfigDialog,Permissions,r as RAIN_MODES,RegionConfigDialog,RegionMeteo,d as SUN_INTENSITY,ScTimeProvider,SceneWeather$1 as SceneWeather,SceneWeatherState,m as TEMP_TYPES,a as TIME_PROVIDERS,TimeProvider,Utils$1 as Utils,g as WIND_SPEED,WeatherConfigDialog,WeatherEffect,WeatherEffectsLayer,WeatherLayer,WeatherModel,WeatherPerception,WeatherTab,WeatherUi,getSceneWeatherAPIv1,loadHandlebars,registerHbHelpers,registerSettingsPostInit,registerSettingsPreInit};
