const e={ID:"scene-weather",NAME:"Scene Weather",LCCNAME:"sceneWeather"};class Logger{static info(t,a=!1){console.log(e.NAME+` Info | ${t}`),a&&ui.notifications.info(e.NAME+` | ${t}`)}static error(t,a=!1){console.error(e.NAME+` Error | ${t}`),a&&ui.notifications.error(e.NAME+` | ${t}`)}static debug(t,a){if(game.gmTokenTools?game.gmTokenTools.isDebug:Utils.getSetting("debug",!1)){if(!a)return void console.log(e.NAME+` Debug | ${t}`);const n=Utils.deepClone(a);console.log(e.NAME+` Debug | ${t}`,n)}}}class Utils{static roundToDecimals(e,t){return Number(Math.round(e+"e"+t)+"e-"+t)}static omit(e,t){const{[t]:a,...n}=e;return n}static isBitSet(e,t){return 0!=(e&1<<t)}static deepClone(e,t){return deepClone(e,t)}static getActor(e,t){let a=null;return t&&(a=canvas.tokens.placeables.find((e=>e.id===t))),a?a.actor:game.actors.get(e)}static getItem(e,t){return e.items.get(t)}static getToken(e){return canvas.tokens.placeables.find((t=>t.id===e))}static getControlledTokens(){return game.canvas.tokens.controlled}static getControlledToken(){return game.canvas.tokens.controlled[0]}static getUserByTokenId(e){let t,a=e.actor.ownership;return game.users.forEach((e=>{null!==e.character&&e.active&&a[e._id]>0&&(t=e)})),t}static getSetting(t,a=null){let n=a??null;try{n=game.settings.get(e.ID,t)}catch{console.log(e.NAME+` Debug | GameConfig '${t}' not found`)}return n}static async setSetting(t,a){game.settings.settings.get(`${e.ID}.${t}`)?(await game.settings.set(e.ID,t,a),Logger.debug(`GameConfig '${t}' set to '${a}'`)):Logger.debug(`GameConfig '${t}' not found`)}static getUserFlag(t){return game.user.getFlag(e.ID,t)}static async setUserFlag(t,a){await game.user.setFlag(e.ID,t,a)}static async unsetUserFlag(t){await game.user.unsetFlag(e.ID,t)}static i18n(e,t=null){let a=game.i18n.localize(e);return a==e?(null==t&&(a=e),a):a}static isModuleActive(e){const t=game.modules.get(e);return t&&t.active}}class SceneWeather{constructor(e){this.weatherModel=e,Logger.debug("SceneWeather:constrctor",{weatherModel:e})}async update(){this.weatherModel.update()}async applyFxToScene(){}}class WeatherModel{static templates={default:{name:"Default",temp:{ground:14,air:18,percieved:18},wind:{speed:0,gusts:0,direction:0},clouds:{coverage:0,bottom:0,top:0},precipitation:{amount:0,type:"none"},humidity:0}};constructor({regionMeteo:e,templateId:t="default"}){Logger.debug("WeatherModel:constrctor",{regionMeteo:e,templateId:t}),void 0===e?(this.templateId=t,this.regionMeteo=void 0):(this.templateId=null,this.regionMeteo=e)}async update(){void 0!==this.regionMeteo&&this.regionMeteo.update()}static getTemplates(){let e=[];for(let t in WeatherModel.templates)e.push({id:t,name:WeatherModel.templates[t].name});return Logger.debug("getTemplates",{res:e}),e}static fromTemplate(e){return new WeatherModel({templateId:e})}static fromRegion(e){return new WeatherModel({regionMeteo:e})}}class RegionMeteo{static templates={plains:{name:"Plains",elevation:200,vegetation:40,waterAmount:5,summer:{temperature:{max:27,avg:25,min:22,var:3},humidity:{max:80,avg:65,min:50,var:10},wind:{avg:5,var:5}},winter:{temperature:{max:15,avg:7,min:2,var:5},humidity:{max:60,avg:40,min:30,var:10},wind:{avg:10,var:8}}}};constructor(t){Logger.debug("RegionMeteo:constrctor",{templateId:t}),this.regionData=void 0!==t?RegionMeteo.templates[t]:canvas.scene.getFlag(e.ID,"regionSettings")}static getTemplates(){let e=[];for(let t in RegionMeteo.templates)e.push({id:t,name:RegionMeteo.templates[t].name});return Logger.debug("getTemplates",{res:e}),e}static fromTemplate(e){return new RegionMeteo(e)}async update(){}cloudBottomHeight(e,t){const a=273.15,n=8.31;let i=e*(1+.61*(t/100*(6.11*10**(7.5*(e-a)/(e-a+237.3))))/(n*e/.01802));return n*i/9.8*(25e5/n)*(1/(i-a)-1/e)}cloudTopHeight(e,t){const a=273.15,n=273.15-56.5;let i=t/100*(6.11*10**(7.5*(e-a)/(e-a+237.3)));return 461*n/9.8*log(i*(n/(e*(1+.61*i/(8.31*e/.01802))))**(461/8.31)/.027687976025741)}cloudCoverage(e,t){const a=273.15;let n=6.11*10**(7.5*(e-a)/(e-a+237.3)),i=t/100*n,r=.622*i/(n-i);return r/(r+.622)*100}cloudTopHeight2(e,t){const a=273.15,n=273.15-56.5;let i=t/100*(6.11*10**(7.5*(e-a)/(e-a+237.3)));return 461*n/9.8*log(i*(n/(e*(1+.61*i/(8.31*e/.01802))))**(461/8.31)/.027687976025741)}airTemperature(e,t,a,n){let i=(e-t)/1e3/60;return n+2*n*(i/(i+(a-e)/1e3/60))}}class SceneWeatherApi{static async registerApi(){game.sceneWeather?Logger.debug("SceneWeather API aleady registered!"):(game.sceneWeather={},game.sceneWeather.get=SceneWeatherApi.getSceneWeatherProvider,game.sceneWeather.updateSettings=SceneWeatherApi.updateSettings,Logger.debug("sceneWeather API registered as game.sceneWeather"))}static async updateSettings(){}static getSceneWeatherProvider(){switch(canvas.scene.getFlag(e.ID,"weatherMode")){case"weatherTemplate":let t=canvas.scene.getFlag(e.ID,"weatherTemplate");return Logger.debug("getSceneWeatherProvider:weatherTemplate",{weatherTemplate:t}),new SceneWeather(WeatherModel.fromTemplate(t));case"regionTemplate":let a=canvas.scene.getFlag(e.ID,"regionTemplate");return Logger.debug("getSceneWeatherProvider:regionTemplate",{regionTemplate:a}),new SceneWeather(WeatherModel.fromRegion(RegionMeteo.fromTemplate(a)));case"regionAuto":return new SceneWeather(WeatherModel.fromRegion(new RegionMeteo));default:return Logger.debug("getSceneWeatherProvider:disabled"),null}}}const registerHbHelpers=function(){Handlebars.__switch_stack__=[],Handlebars.registerHelper("switch",(function(e,t){Handlebars.__switch_stack__.push({switch_match:!1,switch_value:e});var a=t.fn(this);return Handlebars.__switch_stack__.pop(),a})),Handlebars.registerHelper("case",(function(e,t){var a=Array.from(arguments),n=(t=a.pop(),a),i=Handlebars.__switch_stack__[Handlebars.__switch_stack__.length-1];return i.switch_match||-1===n.indexOf(i.switch_value)?"":(i.switch_match=!0,t.fn(this))})),Handlebars.registerHelper("default",(function(e){if(!Handlebars.__switch_stack__[Handlebars.__switch_stack__.length-1].switch_match)return e.fn(this)})),Logger.debug("HB Helpers Registered")},loadHandlebars=function(){loadTemplates({manualTime:"modules/"+e.ID+"/templates/manualTime.hbs",manualSeason:"modules/"+e.ID+"/templates/manualSeason.hbs"}),Logger.debug("HB partials loaded")};class RegionConfigDialog extends FormApplication{constructor(e){super(),this.applyToScene=e,Logger.debug("RegionConfigDialog:constrctor",{applyToScene:e})}static get defaultOptions(){return mergeObject(super.defaultOptions,{classes:["form"],popOut:!0,template:"modules/"+e.ID+"/templates/regionConfig.hbs",id:"region-settings",title:"Region Settings",closeOnSubmit:!0,submitOnChange:!1,submitOnClose:!1})}activateListeners(e){super.activateListeners(e),Logger.debug("RegionConfigDialog:activateListeners")}getData(){let t={waterAmounts:[{id:0,name:"Desert, Rocky Wasteland (0%)"},{id:5,name:"Plains, City (5%)"},{id:10,name:"Meadow, Shrubland (10%)"},{id:25,name:"Marsh, Some Rivers, Forest (25%)"},{id:50,name:"Shoreline, Huge Lake (50%)"},{id:75,name:"Small Island (75%)"},{id:100,name:"Ocean (100%)"}]};if(void 0===this.applyToScene)return mergeObject(t,game.settings.get(e.ID,"defaultRegionSettings")),Logger.debug("RegionConfigDialog:getData(general)",{applyToScene:this.applyToScene,data:t}),t;{let a=game.scenes.get(this.applyToScene).getFlag(e.ID,"regionSettings");return mergeObject(t,a),Logger.debug("RegionConfigDialog:getData(scene)",{applyToScene:this.applyToScene,data:t}),t}}_updateObject(t,a){const n=expandObject(a);Logger.debug("updateObject, regionConfig",{data:n,scene:this.applyToScene}),void 0===this.applyToScene?game.settings.set(e.ID,"defaultRegionSettings",n):game.scenes.get(this.applyToScene).setFlag(e.ID,"regionSettings",n)}}const registerSettings=function(){game.settings.register(e.ID,"startup",{name:"One-Time Startup Prompt",scope:"world",config:!1,type:Boolean,default:!1}),game.settings.registerMenu(e.ID,"defaultRegionSettingsMenu",{name:"Default Region Settings",label:"Default Region Settings",hint:"A description of what will occur in the submenu dialog.",icon:"fas fa-bars",type:RegionConfigDialog,restricted:!0}),game.settings.register(e.ID,"defaultRegionSettings",{scope:"world",config:!1,type:Object,default:{elevation:0,vegetation:0,waterAmount:0,summer:{temperature:{max:0,avg:0,min:0,var:0},humidity:{max:0,avg:0,min:0,var:0},wind:{avg:0,var:0}},winter:{temperature:{max:0,avg:0,min:0,var:0},humidity:{max:0,avg:0,min:0,var:0},wind:{avg:0,var:0}}}}),game.settings.register(e.ID,"debug",{name:Utils.i18n("settings.debug.name"),hint:Utils.i18n("settings.debug.hint"),scope:"client",config:!0,type:Boolean,default:!1,onChange:t=>{!function onChangeFunction(t){game[e.LCCNAME]&&game[e.LCCNAME].updateSettings()}()}}),Logger.debug("Settings Registered")};class WeatherMenu{static registerButtons(){CONFIG.Canvas.layers.weather={layerClass:WeatherLayer,group:"interface"},Hooks.on("getSceneControlButtons",(e=>{e.splice(e.findIndex((e=>"sounds"===e.name))+1,0,{name:"Scene Weather",title:"Scene Weather",icon:"fas fa-solid fa-cloud-bolt-sun",layer:"weather",tools:[{name:"Toggle Weather Effects",title:"Toggle Weather Effects",icon:"fas fa-regular fa-meteor",button:!0,onClick:()=>{}},{name:"Update clients",title:"Update clients",icon:"fas fa-solid fa-arrows-rotate",button:!0,onClick:()=>{}},{name:"Remove All Weather",title:"Remove All Weather",icon:"fas fa-solid fa-trash",button:!0,onClick:()=>{}}]}),Logger.debug("Hook:getSceneControlButtons",e)}))}}class WeatherLayer extends InteractionLayer{static get layerOptions(){return foundry.utils.mergeObject(super.layerOptions,{name:"weather",canDragCreate:!1,controllableObjects:!0,rotatableObjects:!0,zIndex:666})}selectObjects(e){canvas.tokens.selectObjects(e)}}class WeatherTab{static async addControlsTab(t,a){Logger.debug("addControlsTab",{app:t,jQ:a});let n=t.document.flags[e.ID],i={weatherMode:"disabled",weatherTemplate:"default",regionTemplate:"plains",timeProvider:"manual",dateProvider:"manual",timeHour:0,timeSeason:0};mergeObject(i,n,{overwrite:!0});let r={data:i,timeSeasons:[{id:0,name:"Winter"},{id:90,name:"Spring"},{id:180,name:"Summer"},{id:270,name:"Fall"}],timeProviders:[{id:"small-time",name:"SmallTime"},{id:"simple-calendar",name:"Simple Calendar"},{id:"manual",name:"Manual"}],dateProviders:[{id:"simple-calendar",name:"Simple Calendar"},{id:"manual",name:"Manual"}],weatherModes:[{id:"disabled",name:"Disabled (Use foundry default ambience)",hint:"Scene Weather is disabled. All ambience effects and types are set via the foundry default settings in Ambience."},{id:"weatherTemplate",name:"Use weather template (static)",hint:"Set a weather for the scene from a select choice of templates. The weather is static and will remain like that unless manually changed."},{id:"regionTemplate",name:"Use region template (dynamic)",hint:"Let the weather be generated based on a selected region template from a choice list. The weather will change dynamically based on given time of day and the season in the year. If an automatic calendar or time module is installed, it will change with the flow of time."},{id:"regionAuto",name:"Auto generate via region template (generated)",hint:"Let the weather be generated based on set attributes for the scene like mean temperature or elevation. The weather is dependant on a current time/date that needs to be provided to generate the dynamic weather based on all those parameters."}],weatherTemplates:[],regionTemplates:[]};r.weatherTemplates=WeatherModel.getTemplates(),r.regionTemplates=RegionMeteo.getTemplates(),Logger.debug("Render TabData with",{tabData:r});let s=await renderTemplate("modules/"+e.ID+"/templates/weatherTab.hbs",r);$(".sheet-tabs",a).append($("<a>").addClass("item").attr("data-tab","weather").html('<i class="fas fa-solid fa-cloud-bolt-sun"></i> Weather')),$("<div>").addClass("tab").attr("data-tab","weather").insertAfter($('div[data-tab="ambience"]',a)).append(s),WeatherTab.activateListeners(t,a,r.data.weatherMode)}static activateListeners(e,t,a){Logger.debug("WeatherTab.activateListeners",{app:e,jQ:t,select:a}),t.find('div[id="sceneWeather.mode.'+a+'"]').addClass("active"),t.find('button[data-key="flags.scene-weather.regionConfig"]').on("click",(function(){Logger.debug("Clicked Config Region for Scene",{sceneId:e.document._id});new RegionConfigDialog(e.document._id).render(!0)})),t.find('select[name="flags.scene-weather.weatherMode"]').on("change",(function(){let a=$(this).find(":selected").val();t.find("div.sceneWeather-collapsibleModeOption").each((function(){$(this).attr("id")=="sceneWeather.mode."+a?$(this).addClass("active"):$(this).removeClass("active")})),e.setPosition({height:"auto"}),Logger.debug("onChange",{app:e,jQ:t})}))}}Hooks.on("ready",(async()=>{Hooks.callAll(e.LCCNAME+"Initialized"),Logger.info("Ready")})),Hooks.once("setup",(()=>{WeatherMenu.registerButtons()})),Hooks.once("init",(()=>{registerSettings(),registerHbHelpers(),loadHandlebars(),SceneWeatherApi.registerApi(),Logger.debug("Init Done")})),Hooks.on("canvasReady",(async()=>{Hooks.on(e.LCCNAME+"Initialized",(async()=>{}))})),Hooks.on("renderSceneConfig",(async(e,t,a)=>{Logger.debug("renderSceneConfig",{app:e,jQ:t,data:a}),WeatherTab.addControlsTab(e,t)}));export{Logger,e as MODULE,RegionConfigDialog,RegionMeteo,SceneWeather,SceneWeatherApi,Utils,WeatherMenu,WeatherModel,WeatherTab,loadHandlebars,registerHbHelpers,registerSettings};
