const e={ID:"scene-weather",NAME:"Scene Weather",LCCNAME:"sceneWeather"},t={isaMSLtempC:16,isaSeaLevelPa:101325,adiabaticHyDryCoeff:-.0065,g:9.80665,mAir:.0289644,R:8.3144598,Tzero:237.7};class Logger{static info(t,a=!1){console.log(e.NAME+` Info | ${t}`),a&&ui.notifications.info(e.NAME+` | ${t}`)}static error(t,a=!1){console.error(e.NAME+` Error | ${t}`),a&&ui.notifications.error(e.NAME+` | ${t}`)}static debug(t,a){if(game.gmTokenTools?game.gmTokenTools.isDebug:Utils.getSetting("debug",!1)){if(!a)return void console.log(e.NAME+` Debug | ${t}`);const i=Utils.deepClone(a);console.log(e.NAME+` Debug | ${t}`,i)}}}class Utils{static clamp(e,t,a){return Math.min(Math.max(e,t),a)}static map(e,t,a,i,n){const r=(e-t)*(n-i)/(a-t)+i;return Utils.clamp(r,i,n)}static roundToDecimals(e,t){return Number(Math.round(e+"e"+t)+"e-"+t)}static omit(e,t){const{[t]:a,...i}=e;return i}static isBitSet(e,t){return 0!=(e&1<<t)}static deepClone(e,t){return deepClone(e,t)}static getActor(e,t){let a=null;return t&&(a=canvas.tokens.placeables.find((e=>e.id===t))),a?a.actor:game.actors.get(e)}static getItem(e,t){return e.items.get(t)}static getToken(e){return canvas.tokens.placeables.find((t=>t.id===e))}static getControlledTokens(){return game.canvas.tokens.controlled}static getControlledToken(){return game.canvas.tokens.controlled[0]}static getUserByTokenId(e){let t,a=e.actor.ownership;return game.users.forEach((e=>{null!==e.character&&e.active&&a[e._id]>0&&(t=e)})),t}static getSetting(t,a=null){let i=a??null;try{i=game.settings.get(e.ID,t)}catch{console.log(e.NAME+` Debug | GameConfig '${t}' not found`)}return i}static async setSetting(t,a){game.settings.settings.get(`${e.ID}.${t}`)?(await game.settings.set(e.ID,t,a),Logger.debug(`GameConfig '${t}' set to '${a}'`)):Logger.debug(`GameConfig '${t}' not found`)}static getUserFlag(t){return game.user.getFlag(e.ID,t)}static async setUserFlag(t,a){await game.user.setFlag(e.ID,t,a)}static async unsetUserFlag(t){await game.user.unsetFlag(e.ID,t)}static i18n(e,t=null){let a=game.i18n.localize(e);return a==e?(null==t&&(a=e),a):a}static isModuleActive(e){const t=game.modules.get(e);return t&&t.active}}class TimeProvider{static config={daysInYear:365,summerSolstice:172,winterSolstice:355,monthOffset:[0,31,59,90,120,151,181,212,243,273,304,334],hoursInDay:24};static initConfig(){}static _getTimeProvider(){return"simple-calendar"}static getCurrentTimeHash(){return TimeProvider.getTimeHash(TimeProvider.getDayOfYear(),TimeProvider.getHourOfDay())}static getTimeHash(e,t){return e*TimeProvider.config.hoursInDay+t}static getDayOfYearFromTimeHash(e){return Math.trunc(e/TimeProvider.config.hoursInDay)+1}static getMonthOfYearFromTimeHash(e){let t=TimeProvider.getDayOfYearFromTimeHash(e);for(let e=0;e<TimeProvider.config.monthOffset.length;e++)if(t<TimeProvider.config.monthOffset[e])return e;return TimeProvider.config.monthOffset.length}static getDayOfMonthFromTimeHash(e){let t=TimeProvider.getMonthOfYearFromTimeHash(e);return TimeProvider.getDayOfYearFromTimeHash(e)-TimeProvider.config.monthOffset[t-1]}static getTimeOfDayFromTimeHash(e){return e%TimeProvider.config.hoursInDay}static getDayOfYear(){if(game.modules.get("foundryvtt-simple-calendar")?.active&&"simple-calendar"===TimeProvider._getTimeProvider()){let e=SimpleCalendar.api.timestampToDate(game.time.worldTime);return TimeProvider.config.monthOffset[e.month]+e.day}{let t=canvas.scene.getFlag(e.ID,"timeSeason");return void 0===t&&(t=Util.getSetting("timeSeason",150)),sceneManualData}}static getHourOfDay(){const e=game.time.worldTime+0,t=Math.abs(Math.trunc(e%86400/3600));return e<0?24-t:t}}class WeatherModel{static templates={default:{name:"Default",temp:{ground:14,air:18,percieved:18},wind:{speed:0,gusts:0,direction:0},clouds:{coverage:0,bottom:0,top:0,type:0},precipitation:{amount:0,type:0},sun:{amount:.5},humidity:0}};constructor({regionMeteo:e,templateId:t="default"}){Logger.debug("WeatherModel:constrctor",{regionMeteo:e,templateId:t}),this._cache={},void 0===e?(this.regionMeteo=void 0,this.weatherData=WeatherModel.templates[t]):(this.regionMeteo=e,this.updateConfig())}static getTemplates(){let e=[];for(let t in WeatherModel.templates)e.push({id:t,name:WeatherModel.templates[t].name});return e}static fromTemplate(e){return new WeatherModel({templateId:e})}static fromRegion(e){return new WeatherModel({regionMeteo:e})}updateConfig(){return void 0!==this.regionMeteo?(Logger.debug("WeatherModel.updateConfig() -> invalidating cache, invoking on regionMeteo..."),this._cache={},this.regionMeteo.updateConfig()):(Logger.debug("WeatherModel.updateConfig() -> static, nothing to do."),!1)}getWeatherData(e=0,t=0){if(void 0===this.regionMeteo)return this.weatherData;{let a=this.regionMeteo.getRegionBase(e,t);if(void 0!==this._cache[a.timeHash])return this.weatherData=this._cache[a.timeHash],this._cache[a.timeHash];this.weatherData={name:a.name,temp:{ground:this._groundTemp(3,3,e,t),air:a.baseTemp,percieved:0},wind:{speed:a.wind,gusts:a.gusts+a.wind,direction:0},clouds:{coverage:0,bottom:Utils.clamp(Math.abs(WeatherModel._liftedCondensationLevel(a.baseTemp,a.baseHumidity)),0,2e4),top:0,type:0},precipitation:{amount:0,type:0},sun:{amount:a.sunAmount},humidity:a.baseHumidity};let i=WeatherModel._calcAdiCloudBottomCoeff(this.weatherData,a),n=WeatherModel._calcGeopotential(a);return this.weatherData.clouds.top=i<0?this.weatherData.clouds.bottom+12.6*n:this.weatherData.clouds.bottom+.27*n,this.weatherData.clouds.coverage=Utils.clamp((this.weatherData.clouds.top-this.weatherData.clouds.bottom)/100,0,1),this.weatherData.clouds.bottom<a.elevation?this.weatherData.clouds.type=1:(i<0&&(this.weatherData.clouds.top-this.weatherData.clouds.bottom>1e3&&(this.weatherData.clouds.type=3),this.weatherData.clouds.top-this.weatherData.clouds.bottom>3e3&&(this.weatherData.clouds.type=4)),this.weatherData.clouds.type<3&&this.weatherData.clouds.coverage>.3&&(this.weatherData.clouds.type=2)),this.weatherData.precipitation.amount=Utils.clamp(1.2*this.weatherData.clouds.coverage-.4,0,1)*this.regionMeteo._getNoisedValue(a.timeHash+321,8,.8,.2)*this.regionMeteo._getNoisedValue(a.timeHash+321,32,1,.5),this.weatherData.wind.gusts=this.weatherData.wind.gusts*(2.5*this.weatherData.precipitation.amount+.5),this.weatherData.wind.speed=this.weatherData.wind.speed+2.2*this.weatherData.precipitation.amount*this.weatherData.wind.speed,this.weatherData.sun.amount=this.weatherData.sun.amount*Utils.clamp(1-this.weatherData.clouds.coverage,.2,1),this.weatherData.temp.air=this.weatherData.temp.air-.03*this.weatherData.wind.speed+this.weatherData.sun.amount*Math.max(2,.6*this.weatherData.temp.ground),this.weatherData.temp.percieved=WeatherModel._apparentTemperature(this.weatherData.temp.air,this.weatherData.wind.speed,this.weatherData.humidity,WeatherModel._heightToPressure(a.elevation)),this.weatherData.clouds.top=3*Math.max(0,this.weatherData.clouds.top-a.elevation),this.weatherData.clouds.bottom=3*Math.max(0,this.weatherData.clouds.bottom-a.elevation),this.weatherData.precipitation.type=WeatherModel._calcPrecipitationType(this.weatherData),this.weatherData.wind.direction=this.regionMeteo._getNoisedValue(a.timeHash+1277,512,180,180),this.weatherData.wind.direction=this.weatherData.wind.direction+this.regionMeteo._getNoisedValue(a.timeHash+1277,8,16,16)*(.2*this.weatherData.wind.gusts),this.weatherData.wind.direction<0&&(this.weatherData.wind.direction+=360),this.weatherData.wind.direction>=360&&(this.weatherData.wind.direction-=360),this._cache[a.timeHash]=this.weatherData,this.weatherData}}static _calcGeopotential(e){return e.vegetation*(1.3*e.sunAmount+.7*e.wind)+(.3*e.sunAmount+e.waterAmount*(1.3*e.wind))}static _heightToPressure(e){if(e<11e3)return t.isaSeaLevelPa*Math.pow(t.isaMSLtempC/(t.isaMSLtempC+t.adiabaticHyDryCoeff*e),t.g*t.mAir/(t.R*t.adiabaticHyDryCoeff))/100;if(e<=2e4){var a=t.isaSeaLevelPa*Math.pow(t.isaMSLtempC/(e+11e3*t.adiabaticHyDryCoeff),t.g*t.mAir/(t.R*t.adiabaticHyDryCoeff)),i=t.isaMSLtempC+11e3*t.adiabaticHyDryCoeff;return a*Math.exp(-t.g*t.mAir*(e-11e3)/(t.R*i))/100}return 0}static _apparentTemperature(e,t,a,i){return e<10?WeatherModel._windChill(e,t):WeatherModel._heatIndex(e,a,i)}static _windChill(e,t){if(e>=10)return Tc;let a;return a=t>=4.8&&t<=177?13.12+.6215*e+(.3965*e-11.37)*Math.pow(t,.16):t<4.8?e+.2*(.1345*e-1.59)*t:e,a}static _heatIndex(e,a,i){if(i<16)return e;if(e<27||t.R<.4||WeatherModel._dewPoint(e,a)<12)return e;return 1.61139411*e-8.784695+2.338549*a+-.14611605*e*a+-.012308094*e*e+-.016424828*a*a+.002211732*e*e*a+72546e-8*e*a*a+1e-6*-3.582*e*e*a*a}static _dewPoint(e,a){if(e<0||e>60)return e;if((a/=100)<.01||a>1)return e;let i=17.27*e/(t.Tzero+e)+Math.log(a),n=t.Tzero*i/(17.27-i);return n<0||n>50?e:n}static _calcAdiCloudBottomCoeff(e,a){return t.isaMSLtempC+(e.clouds.bottom-a.elevation)*t.adiabaticHyDryCoeff-(a.baseTemp+(e.clouds.bottom-a.elevation)*t.adiabaticHyDryCoeff)}static _calcPrecipitationType(e){return e.precipitation.amount<.1?0:e.clouds.type>3&&e.precipitation.amount>.7?e.temp.air<4?6:e.wind.speed>.2?4:3:e.clouds.type>=3?e.temp.air<4?e.wind.speed>.2?6:5:2:2==e.clouds.type||e.precipitation.amount>.7?e.temp.air<4?5:1:0}_groundTemp(e,t,a=0,i=0){let n=0,r=0;for(let s=0;s<=e;s++){let e=1/Math.log2(s+2);n+=this.regionMeteo.getRegionBase(a,i-s*t).baseTemp*e,r+=e}return n/r}static _liftedCondensationLevel(e,t){return 125*(e-(e-(100-t)/5))}}class Noise{static F2=.5*(Math.sqrt(3)-1);static G2=(3-Math.sqrt(3))/6;static F3=1/3;static G3=1/6;static F4=(Math.sqrt(5)-1)/4;static G4=(5-Math.sqrt(5))/20;static fastFloor(e){return 0|Math.floor(e)}static getMulberry32(e){return function(){var t=e+=1831565813;return t=Math.imul(t^t>>>15,1|t),(((t^=t+Math.imul(t^t>>>7,61|t))^t>>>14)>>>0)/4294967296}}static grad2=new Float64Array([1,1,-1,1,1,-1,-1,-1,1,0,-1,0,1,0,-1,0,0,1,0,-1,0,1,0,-1]);static createNoise2D(e){const t=Noise._buildPermutationTable(e),a=new Float64Array(t).map((e=>Noise.grad2[e%12*2])),i=new Float64Array(t).map((e=>Noise.grad2[e%12*2+1]));return function(e,n){let r=0,s=0,o=0;const d=(e+n)*Noise.F2,l=Noise.fastFloor(e+d),c=Noise.fastFloor(n+d),g=(l+c)*Noise.G2,h=e-(l-g),u=n-(c-g);let m,p;h>u?(m=1,p=0):(m=0,p=1);const f=h-m+Noise.G2,v=u-p+Noise.G2,y=h-1+2*Noise.G2,w=u-1+2*Noise.G2,b=255&l,D=255&c;let M=.5-h*h-u*u;if(M>=0){const e=b+t[D];M*=M,r=M*M*(a[e]*h+i[e]*u)}let W=.5-f*f-v*v;if(W>=0){const e=b+m+t[D+p];W*=W,s=W*W*(a[e]*f+i[e]*v)}let C=.5-y*y-w*w;if(C>=0){const e=b+1+t[D+1];C*=C,o=C*C*(a[e]*y+i[e]*w)}return 70*(r+s+o)}}static _buildPermutationTable(e){const t=Noise.getMulberry32(e),a=512,i=new Uint8Array(a);for(let e=0;e<256;e++)i[e]=e;for(let e=0;e<255;e++){const a=e+~~(t()*(256-e)),n=i[e];i[e]=i[a],i[a]=n}for(let e=256;e<a;e++)i[e]=i[e-256];return i}}class RegionMeteo{static templates={rainforest:{name:"Tropical Rainforest",description:"Dense forest with high amounts of rainfall and high biodiversity.",elevation:200,vegetation:100,waterAmount:80,summer:{temperature:{day:32.5,night:22.5,var:5},humidity:{day:90,night:80,var:10},wind:{avg:5,var:5},sun:{hours:12}},winter:{temperature:{day:32.5,night:22.5,var:5},humidity:{day:80,night:70,var:10},wind:{avg:5,var:5},sun:{hours:12}}},desert:{name:"Desert",description:"Dry region with little rainfall and high temperatures during the day, but can be cold at night.",elevation:500,vegetation:0,waterAmount:0,summer:{temperature:{day:45,night:25,var:10},humidity:{day:10,night:20,var:5},wind:{avg:30,var:10},sun:{hours:13}},winter:{temperature:{day:25,night:5,var:10},humidity:{day:30,night:50,var:20},wind:{avg:25,var:10},sun:{hours:11}}},grassland:{name:"Grassland",description:"Open, flat region dominated by grasses and characterized by seasonal rainfall.",elevation:200,vegetation:40,waterAmount:20,summer:{temperature:{day:30,night:15,var:10},humidity:{day:70,night:80,var:5},wind:{avg:10,var:10},sun:{hours:14}},winter:{temperature:{day:10,night:-5,var:10},humidity:{day:70,night:60,var:10},wind:{avg:10,var:10},sun:{hours:10}}},temperate:{name:"Temperate Forest",description:"TODO",elevation:400,vegetation:50,waterAmount:10,summer:{temperature:{day:25,night:15,var:10},humidity:{day:70,night:60,var:10},wind:{avg:15,var:10},sun:{hours:15}},winter:{temperature:{day:10,night:0,var:10},humidity:{day:60,night:65,var:5},wind:{avg:20,var:10},sun:{hours:9}}},taiga:{name:"Boreal Forest",description:"Dense forest of coniferous trees found in colder regions with long winters.",elevation:400,vegetation:70,waterAmount:10,summer:{temperature:{day:20,night:10,var:10},humidity:{day:70,night:80,var:5},wind:{avg:15,var:10},sun:{hours:17}},winter:{temperature:{day:-5,night:-25,var:10},humidity:{day:80,night:60,var:5},wind:{avg:25,var:10},sun:{hours:8}}},tundra:{name:"Tundra",description:"Cold, treeless region with permafrost and a short growing season.",elevation:300,vegetation:1,waterAmount:5,summer:{temperature:{day:7.5,night:2.5,var:5},humidity:{day:60,night:50,var:10},wind:{avg:20,var:10},sun:{hours:18}},winter:{temperature:{day:-15,night:-25,var:10},humidity:{day:70,night:50,var:5},wind:{avg:25,var:10},sun:{hours:6}}},mediterranean:{name:"Mediterranean",description:"Region with mild, rainy winters and hot, dry summers, known for its characteristic vegetation.",elevation:500,vegetation:50,waterAmount:20,summer:{temperature:{day:30,night:17.5,var:7.5},humidity:{day:60,night:65,var:5},wind:{avg:15,var:10},sun:{hours:15}},winter:{temperature:{day:17.5,night:7.5,var:5},humidity:{day:70,night:60,var:10},wind:{avg:20,var:10},sun:{hours:9}}},savanna:{name:"Savanna",description:"Open grassland region with scattered trees and distinct dry and wet seasons.",elevation:300,vegetation:30,waterAmount:5,summer:{temperature:{day:32.5,night:22.5,var:5},humidity:{day:60,night:70,var:10},wind:{avg:20,var:10},sun:{hours:13}},winter:{temperature:{day:27.5,night:17.5,var:5},humidity:{day:40,night:30,var:10},wind:{avg:20,var:10},sun:{hours:11}}},alpine:{name:"Alpine",description:"High-altitude region with low temperatures and often covered in snow and ice.",elevation:1e3,vegetation:0,waterAmount:0,summer:{temperature:{day:15,night:5,var:7.5},humidity:{day:50,night:60,var:5},wind:{avg:30,var:10},sun:{hours:14}},winter:{temperature:{day:0,night:-15,var:7.5},humidity:{day:70,night:60,var:5},wind:{avg:40,var:20},sun:{hours:10}}},coastal:{name:"Coastal",description:"Region influenced by the ocean with relatively mild temperatures and often high humidity.",elevation:100,vegetation:20,waterAmount:70,summer:{temperature:{day:25,night:15,var:10},humidity:{day:80,night:75,var:15},wind:{avg:10,var:25},sun:{hours:14}},winter:{temperature:{day:15,night:5,var:10},humidity:{day:75,night:70,var:5},wind:{avg:20,var:25},sun:{hours:10}}},polar:{name:"Polar",description:"Regions with permanently frozen water and very low temperatures.",elevation:0,vegetation:0,waterAmount:30,summer:{temperature:{day:2.5,night:-2.5,var:5},humidity:{day:80,night:65,var:10},wind:{avg:35,var:20},sun:{hours:23}},winter:{temperature:{day:-15,night:-25,var:10},humidity:{day:90,night:70,var:5},wind:{avg:40,var:20},sun:{hours:1}}},chaparral:{name:"Chaparral",description:"Dry, shrubland region with hot summers and mild, rainy winters.",elevation:1e3,vegetation:5,waterAmount:5,summer:{temperature:{day:32.5,night:17.5,var:5},humidity:{day:60,night:40,var:5},wind:{avg:25,var:10},sun:{hours:13}},winter:{temperature:{day:17.5,night:2.5,var:5},humidity:{day:60,night:50,var:5},wind:{avg:30,var:10},sun:{hours:11}}},steppe:{name:"Steppe",description:"Large, flat region with low rainfall and characteristic grasses.",elevation:500,vegetation:5,waterAmount:0,summer:{temperature:{day:27.5,night:15,var:5},humidity:{day:30,night:25,var:5},wind:{avg:25,var:10},sun:{hours:14}},winter:{temperature:{day:5,night:-5,var:10},humidity:{day:40,night:30,var:10},wind:{avg:20,var:10},sun:{hours:10}}},wetland:{name:"Wetland",description:"Area with high water saturation, often with distinctive vegetation.",elevation:100,vegetation:60,waterAmount:80,summer:{temperature:{day:25,night:15,var:10},humidity:{day:70,night:80,var:10},wind:{avg:15,var:10},sun:{hours:16}},winter:{temperature:{day:5,night:-5,var:10},humidity:{day:60,night:60,var:5},wind:{avg:20,var:5},sun:{hours:8}}},mangrove:{name:"Mangrove",description:"Coastal wetland region characterized by trees and shrubs adapted to saltwater and often submerged in water.",elevation:0,vegetation:80,waterAmount:60,summer:{temperature:{day:32.5,night:22.5,var:5},humidity:{day:60,night:70,var:10},wind:{avg:10,var:5},sun:{hours:16}},winter:{temperature:{day:27.5,night:17.5,var:5},humidity:{day:60,night:60,var:10},wind:{avg:15,var:10},sun:{hours:8}}},littoral:{name:"Littoral",description:"The region where the land meets the water in a lake, river, or ocean, with unique plants and animals adapted to this interface.",elevation:0,vegetation:1,waterAmount:50,summer:{temperature:{day:25,night:15,var:10},humidity:{day:60,night:60,var:5},wind:{avg:10,var:5},sun:{hours:16}},winter:{temperature:{day:15,night:5,var:10},humidity:{day:60,night:60,var:10},wind:{avg:15,var:10},sun:{hours:8}}}};constructor(t){Logger.debug("RegionMeteo:constrctor",{templateId:t}),this.regionData=void 0!==t?RegionMeteo.templates[t]:canvas.scene.getFlag(e.ID,"regionSettings"),this._noise=Noise.createNoise2D(0),this.updateConfig()}static getTemplates(){let e=[];for(let t in RegionMeteo.templates)e.push({id:t,name:RegionMeteo.templates[t].name});return e}static fromTemplate(e){return new RegionMeteo(e)}updateConfig(){return Logger.debug("RegionMeteo.updateConfig()"),this._cache={},!0}getRegionBase(e=0,t=0){void 0===e&&(e=0),void 0===t&&(t=0);let a=TimeProvider.getDayOfYear(),i=TimeProvider.getHourOfDay();if(i+=t,i<0)for(;i<0;)i+=24,a--;if(i>=24)for(;i>=24;)i-=24,a++;if(a+=e,a<0)for(;a<0;)a+=TimeProvider.config.daysInYear;if(a>=TimeProvider.config.daysInYear)for(;a>=TimeProvider.config.daysInYear;)a-=TimeProvider.config.daysInYear;let n=TimeProvider.getTimeHash(a,i);if(void 0!==this._cache[n])return this._cache[n];let r={elevation:this.regionData.elevation,vegetation:this.regionData.vegetation,waterAmount:this.regionData.waterAmount,timeHash:n};void 0===this.regionData.name?r.name="custom":r.name=this.regionData.name;let s=RegionMeteo._hodPct(i),o=RegionMeteo._doyPct(a),d=(this.regionData.summer.temperature.day-this.regionData.winter.temperature.day)*o+this.regionData.winter.temperature.day,l=(this.regionData.summer.temperature.night-this.regionData.winter.temperature.night)*o+this.regionData.winter.temperature.night,c=(this.regionData.summer.temperature.var-this.regionData.winter.temperature.var)*o+this.regionData.winter.temperature.var;r.baseTemp=this._getNoisedValue(n+1282,64,(d-l)*s+l,c),r.baseTemp<0&&(r.waterAmount=0);let g=(this.regionData.summer.humidity.day-this.regionData.winter.humidity.day)*o+this.regionData.winter.humidity.day,h=(this.regionData.summer.humidity.night-this.regionData.winter.humidity.night)*o+this.regionData.winter.humidity.night,u=(this.regionData.summer.humidity.var-this.regionData.winter.humidity.var)*o+this.regionData.winter.humidity.var;r.baseHumidity=Utils.clamp(this._getNoisedValue(n+732,64,(g-h)*s+h,u),0,100);let m=((this.regionData.summer.sun.hours-this.regionData.winter.sun.hours)*o+this.regionData.winter.sun.hours)/2,p=Math.abs(12-i);r.sunAmount=p>m?0:Utils.clamp(m/3*(1-1/(m/p)),0,1);let f=(this.regionData.summer.wind.avg-this.regionData.winter.wind.avg)*o+this.regionData.winter.wind.avg,v=(this.regionData.summer.wind.var-this.regionData.winter.wind.var)*o+this.regionData.winter.wind.var,y=1;return y=r.sunAmount<.1?.9:r.sunAmount<.2?i>12?.8:1.2:1.1,r.wind=Utils.clamp(this._getNoisedValue(n+978,16,y*f,v),0,80),r.gusts=Utils.clamp(r.wind+this._getNoisedValue(n+12,8,y*v,v),0,80),this._cache[n]=r,r}_getNoisedValue(e,t,a,i){return e/=t,a+(i*((1*this._noise(1*e,1*e)+.5*this._noise(2*e,2*e)+.25*this._noise(4*e,4*e))/1.75)*2-i)}static _hodPct(e){return e%=24,(Math.sin((e/12-.5)*Math.PI)+1)/2}static _doyPct(e){const t=TimeProvider.config.summerSolstice%TimeProvider.config.daysInYear,a=TimeProvider.config.winterSolstice%TimeProvider.config.daysInYear;let i,n=a,r=a;return a<t?r=a+TimeProvider.config.daysInYear:n=a-TimeProvider.config.daysInYear,e>r&&(e-=TimeProvider.config.daysInYear),i=e==t?1:e<t?(e-n)/(t-n):1-(e-t)/(r-t),i}}class SceneWeather{constructor(e){this.sceneId=e._id,this.weatherModel=this._getWeatherModelForMode(e),Logger.debug("SceneWeather:constrctor",{weatherModel:this.weatherModel,sceneId:this.sceneId})}_getWeatherModelForMode(t){switch(this.weatherMode=t.getFlag(e.ID,"weatherMode"),Logger.debug("SceneWeather._getWeatherModelForMode(...)",{scene:t,weatherMode:this.weatherMode}),this.weatherMode){case"weatherTemplate":const a=t.getFlag(e.ID,"weatherTemplate");return WeatherModel.fromTemplate(a);case"regionTemplate":const i=t.getFlag(e.ID,"regionTemplate");return WeatherModel.fromRegion(RegionMeteo.fromTemplate(i));case"regionAuto":return WeatherModel.fromRegion(new RegionMeteo);default:throw new Error("Unable to instantiate new SceneWeather, while being disabled.")}}updateConfig(){Logger.debug("SceneWeather.updateConfig()",{sceneId:this.sceneId});const t=game.scenes.get(this.sceneId);if(void 0===t)throw Logger.error("Unable to instantiate SceneWeather for non existing Scene with id "+this.sceneId),new Error("Unable to instantiate SceneWeather for non existing Scene with id "+this.sceneId);return t.getFlag(e.ID,"weatherMode")!=this.weatherMode?(Logger.debug("SceneWeather.updateConfig() -> new mode",{sceneId:this.sceneId,prevMode:this.weatherMode,newMode:t.getFlag(e.ID,"weatherMode")}),this.weatherModel=this._getWeatherModelForMode(t),!0):(Logger.debug("SceneWeather.updateConfig() -> unchanged mode",{sceneId:this.sceneId}),this.weatherModel.updateConfig())}static fromConfig({sceneId:e=null}={}){null==e&&(e=canvas.scene._id);const t=game.scenes.get(e);if(void 0!==t)try{return new SceneWeather(t)}catch(e){return}else Logger.error("Unable to instantiate SceneWeather for non existing Scene with id "+e)}calculateWeather({force:t=!1}={}){const a=TimeProvider.getCurrentTimeHash(),i=this.weatherModel.getWeatherData(),n=this._calculateWeatherInfoFromModelData(i);Hooks.callAll(e.LCCNAME+"WeatherUpdated",{info:n,model:i,timeHash:a,sceneId:this.sceneId,force:t})}static _getPercievedTempId(e){return e<-7?"meteo.freezing":e<-3?"meteo.cold":e<3?"meteo.chill":e<7?"meteo.fresh":e<18?"meteo.moderate":e<22?"meteo.mild":e<30?"meteo.warm":e<37?"meteo.hot":"meteo.searing"}static _getWindDirId(e){return"meteo."+["n","nne","ne","ene","e","ese","se","sse","s","ssw","sw","wsw","w","wnw","nw","nnw"][Math.floor(e/22.5+.5)%16]}static _getCloudHightId(e){return e<600?"meteo.low":e<1e3?"meteo.mid":e<4e3?"meteo.high":"meteo.veryhigh"}static _getCloudAmountId(e){return["meteo.skc","meteo.few","meteo.few","meteo.sct","meteo.sct","meteo.bkn","meteo.bkn","meteo.bkn","meteo.ovc"][Math.round(8*e)]}static _getCloudTypeId(e){switch(e){case 0:return"meteo.none";case 1:return"meteo.fog";case 2:return"meteo.stratus";case 3:return"meteo.cumulus";default:return"meteo.cumulunimbus"}}static _getHumidityId(e){return e<20?"meteo.dry":e<40?"meteo.comfortable":e<50?"meteo.pleasant":e<65?"meteo.sticky":e<75?"meteo.humid":"meteo.oppressive"}static _getSunAmountId(e){return e<.1?"meteo.gloomy":e<.3?"meteo.shaded":e<.7?"meteo.normal":"meteo.bright"}static _getPrecipitationAmountId(e){return e<.2?"meteo.nothing":e<.4?"meteo.slight":e<.7?"meteo.average":e<.95?"meteo.heavy":"meteo.extreme"}static _getPrecipitationTypeId(e){switch(e){case 0:default:return"meteo.none";case 1:return"meteo.drizzle";case 2:return"meteo.rain";case 3:return"meteo.downpour";case 4:return"meteo.hail";case 5:return"meteo.snow";case 6:return"meteo.blizzard"}}static _getWindSpeedId(e){let t="";return e.gusts>5&&(t="Gusting"),e.speed<1?"meteo.calm"+t:e.speed<5?"meteo.light"+t:e.speed<11?"meteo.lightBreeze"+t:e.speed<28?"meteo.gentleBreeze"+t:e.speed<38?"meteo.freshBreeze"+t:e.speed<49?"meteo.strongBreeze"+t:e.speed<61?"meteo.moderateGale"+t:e.speed<74?"meteo.freshGale"+t:e.speed<88?"meteo.strongGale"+t:e.speed<102?"meteo.wholeGale"+t:e.speed<118?"meteo.storm"+t:"meteo.hurricane"+t}static getPerceptiveWeatherI18n(e){return Handlebars.compile(Utils.i18n("meteo.perceptive"))(e)}_calculateWeatherInfoFromModelData(e){return{name:e.name,temperature:{air:Math.round(e.temp.air),ground:Math.round(e.temp.ground),percieved:Math.round(e.temp.percieved),percievedId:SceneWeather._getPercievedTempId(e.temp.percieved)},humidity:{percent:Math.round(e.humidity),percentId:SceneWeather._getHumidityId(e.humidity)},wind:{speed:Math.round(e.wind.speed),gusts:Math.round(e.wind.gusts),speedId:SceneWeather._getWindSpeedId(e.wind),direction:Math.round(e.wind.direction),directionId:SceneWeather._getWindDirId(e.wind.direction)},clouds:{height:Math.round(e.clouds.bottom),heightId:SceneWeather._getCloudHightId(e.clouds.bottom),amount:Math.round(100*e.clouds.coverage),amountId:SceneWeather._getCloudAmountId(e.clouds.coverage),type:SceneWeather._getCloudTypeId(e.clouds.type)},sun:{amount:Math.round(100*e.sun.amount),amountId:SceneWeather._getSunAmountId(e.sun.amount)},precipitation:{amount:Math.round(100*e.precipitation.amount),amountId:SceneWeather._getPrecipitationAmountId(e.precipitation.amount),type:SceneWeather._getPrecipitationTypeId(e.precipitation.type)}}}getWeatherInfo(e=0,t=0){return this._calculateWeatherInfoFromModelData(this.weatherModel.getWeatherData(e,t))}fahrenheitToCelsius(e){return(e-32)/1.8}celsiusToFahrenheit(e){return 1.8*e+32}}class SceneWeatherApi{static _lastUpdate=0;static _sceneWeather={};static async registerApi(){game.sceneWeather?Logger.debug("SceneWeather API aleady registered!"):(game.sceneWeather={},game.sceneWeather.get=SceneWeatherApi.getSceneWeatherProvider,game.sceneWeather.updateSettings=SceneWeatherApi.updateSettings,game.sceneWeather.updateWeatherConfig=SceneWeatherApi.updateWeatherConfig,game.sceneWeather.calculateWeather=SceneWeatherApi.calculateWeather,game.sceneWeather.generators=[],game.sceneWeather.filters=[],Logger.debug("sceneWeather API registered as game.sceneWeather"))}static async updateSettings(){}static calculateWeather({force:e=!1}={}){Logger.debug("api::calculateWeather()"),e&&(SceneWeatherApi._lastUpdate=-1);let t=TimeProvider.getCurrentTimeHash();if(SceneWeatherApi._lastUpdate==t)return;SceneWeatherApi._lastUpdate=t;SceneWeatherApi.getSceneWeatherProvider().calculateWeather({force:e})}static updateWeatherConfig({forSceneId:e,force:t=!1,prewarm:a=!1,fade:i=!0}={}){Logger.debug("API:updateWeatherConfig()"),SceneWeatherApi.getSceneWeatherProvider(e,t).updateConfig()&&SceneWeatherApi.calculateWeather({force:!0})}static getSceneWeatherProvider(e,t=!1){let a=canvas.scene._id;return void 0!==e&&(a=e),Logger.debug("API.getSceneWeatherProvider()",{forSceneId:e,sceneId:a,ignoreCache:t}),t&&(SceneWeatherApi._sceneWeather[a]=void 0),void 0!==SceneWeatherApi._sceneWeather[a]||(SceneWeatherApi._sceneWeather[a]=SceneWeather.fromConfig({sceneId:a})),SceneWeatherApi._sceneWeather[a]}}const registerHbHelpers=function(){Handlebars.__switch_stack__=[],Handlebars.registerHelper("switch",(function(e,t){Handlebars.__switch_stack__.push({switch_match:!1,switch_value:e});var a=t.fn(this);return Handlebars.__switch_stack__.pop(),a})),Handlebars.registerHelper("case",(function(e,t){var a=Array.from(arguments),i=(t=a.pop(),a),n=Handlebars.__switch_stack__[Handlebars.__switch_stack__.length-1];return n.switch_match||-1===i.indexOf(n.switch_value)?"":(n.switch_match=!0,t.fn(this))})),Handlebars.registerHelper("default",(function(e){if(!Handlebars.__switch_stack__[Handlebars.__switch_stack__.length-1].switch_match)return e.fn(this)})),Logger.debug("HB Helpers Registered")},loadHandlebars=function(){loadTemplates({manualTime:"modules/"+e.ID+"/templates/manualTime.hbs",manualSeason:"modules/"+e.ID+"/templates/manualSeason.hbs",weatherMeteogram:"modules/"+e.ID+"/templates/weatherMeteogram.hbs"}),Logger.debug("HB partials loaded")};class RegionConfigDialog extends FormApplication{constructor(e){super(),this.applyToScene=e,Logger.debug("RegionConfigDialog:constrctor",{applyToScene:e})}static get defaultOptions(){return mergeObject(super.defaultOptions,{classes:["form"],popOut:!0,template:"modules/"+e.ID+"/templates/regionConfig.hbs",id:"region-settings",title:"Region Settings",closeOnSubmit:!0,submitOnChange:!1,submitOnClose:!1})}activateListeners(e){super.activateListeners(e),Logger.debug("RegionConfigDialog:activateListeners")}getData(){let t={waterAmounts:[{id:0,name:"Desert, Rocky Wasteland (0%)"},{id:5,name:"Plains, City (5%)"},{id:10,name:"Meadow, Shrubland (10%)"},{id:25,name:"Marsh, Some Rivers, Forest (25%)"},{id:50,name:"Shoreline, Huge Lake (50%)"},{id:75,name:"Small Island (75%)"},{id:100,name:"Ocean (100%)"}]};if(void 0===this.applyToScene)return mergeObject(t,game.settings.get(e.ID,"defaultRegionSettings")),Logger.debug("RegionConfigDialog:getData(general)",{applyToScene:this.applyToScene,data:t}),t;{let a=game.scenes.get(this.applyToScene).getFlag(e.ID,"regionSettings");return mergeObject(t,a),Logger.debug("RegionConfigDialog:getData(scene)",{applyToScene:this.applyToScene,data:t}),t}}_updateObject(t,a){const i=expandObject(a);Logger.debug("updateObject, regionConfig",{data:i,scene:this.applyToScene}),void 0===this.applyToScene?game.settings.set(e.ID,"defaultRegionSettings",i):game.scenes.get(this.applyToScene).setFlag(e.ID,"regionSettings",i)}}function onChangeFunction(t){game[e.LCCNAME]&&game[e.LCCNAME].updateSettings()}const registerSettings=function(){game.settings.register(e.ID,"startup",{name:"One-Time Startup Prompt",scope:"world",config:!1,type:Boolean,default:!1}),game.settings.registerMenu(e.ID,"defaultRegionSettingsMenu",{name:"Default Region Settings",label:"Default Region Settings",hint:"A description of what will occur in the submenu dialog.",icon:"fas fa-bars",type:RegionConfigDialog,restricted:!0}),game.settings.register(e.ID,"defaultRegionSettings",{scope:"world",config:!1,type:Object,default:{elevation:0,vegetation:0,waterAmount:0,summer:{temperature:{max:0,avg:0,min:0,var:0},humidity:{max:0,avg:0,min:0,var:0},wind:{avg:0,var:0}},winter:{temperature:{max:0,avg:0,min:0,var:0},humidity:{max:0,avg:0,min:0,var:0},wind:{avg:0,var:0}}}}),game.settings.register(e.ID,"uiVisible",{name:Utils.i18n("settings.uiVisible.name"),hint:Utils.i18n("settings.uiVisible.hint"),scope:"client",config:!0,type:Boolean,default:!1,onChange:e=>{onChangeFunction()}}),game.settings.register(e.ID,"uiPosition",{name:Utils.i18n("settings.uiPosition.name"),hint:Utils.i18n("settings.uiPosition.hint"),scope:"client",config:!1,type:Object,default:{top:440,left:15},onChange:e=>{onChangeFunction()}}),game.settings.register(e.ID,"meteoVisible",{name:Utils.i18n("settings.meteoVisible.name"),hint:Utils.i18n("settings.meteoVisible.hint"),scope:"client",config:!0,type:Boolean,default:!1,onChange:e=>{onChangeFunction()}}),game.settings.register(e.ID,"meteoPosition",{name:Utils.i18n("settings.meteoPosition.name"),hint:Utils.i18n("settings.meteoPosition.hint"),scope:"client",config:!1,type:Object,default:{top:440,left:15},onChange:e=>{onChangeFunction()}}),game.settings.register(e.ID,"uiPinned",{name:Utils.i18n("settings.uiPinned.name"),hint:Utils.i18n("settings.uiPinned.hint"),scope:"client",config:!1,type:Boolean,default:!0,onChange:e=>{onChangeFunction()}}),game.settings.register(e.ID,"debug",{name:Utils.i18n("settings.debug.name"),hint:Utils.i18n("settings.debug.hint"),scope:"client",config:!0,type:Boolean,default:!1,onChange:e=>{onChangeFunction()}}),Logger.debug("Settings Registered")};Hooks.on(e.LCCNAME+"WeatherUpdated",(async e=>{e.sceneId==canvas.scene._id&&void 0!==e.info&&WeatherUi.update(e.info)})),Hooks.on("renderWeatherUi",(()=>{Logger.debug("Hook:renderWeatherUi");const e=game.sceneWeather.get().getWeatherInfo();WeatherUi.update(e)}));class WeatherUi extends FormApplication{static _isOpen=!1;async _render(t=!1,a={}){await super._render(t,a),game.settings.get(e.ID,"uiPinned")&&WeatherUi.pinApp(),WeatherUi._isOpen=!0,delete ui.windows[this.appId]}async close(t={}){return t.sceneWeather&&(WeatherUi._isOpen=!1,game.settings.set(e.ID,"uiVisible",!1)),super.close(t)}constructor(){super()}static get defaultOptions(){return document.getElementById("players"),this.initialPosition=game.settings.get(e.ID,"uiPosition"),mergeObject(super.defaultOptions,{classes:["form"],popOut:!0,width:200,height:100,submitOnChange:!0,closeOnSubmit:!1,minimizable:!1,template:"modules/"+e.ID+"/templates/weatherUi.hbs",id:"scene-weather-app",title:"SceneWeather",top:this.initialPosition.top,left:this.initialPosition.left})}async _updateObject(e,t){Logger.debug("WeatherUi._updateObjec",{event:e,formData:t})}getData(){return game.sceneWeather.get().getWeatherInfo()}activateListeners(t){super.activateListeners(t);const a=t.find("#dragHandle")[0],i=new Draggable(this,t,a,!1);let n=!1;i._onDragMouseMove=function _newOnDragMouseMove(e){e.preventDefault();const t=document.getElementById("players").getBoundingClientRect(),a=Date.now();if(a-this._moveTime<1e3/60)return;this._moveTime=a;const{left:i,top:r}=this.element.getBoundingClientRect();WeatherUi.unPinApp()&&Object.assign(this.position,{left:i,top:r}),this.app.setPosition({left:this.position.left+(e.clientX-this._initial.x),top:this.position.top+(e.clientY-this._initial.y)});let s=t.top-50,o=t.top+50;e.clientX>t.left&&e.clientX<t.left+t.width&&e.clientY>s&&e.clientY<o?($("#scene-weather-app").css("animation","jiggle 0.2s infinite"),n=!0):($("#scene-weather-app").css("animation",""),n=!1)},i._onDragMouseUp=async function _newOnDragMouseUp(t){t.preventDefault(),window.removeEventListener(...this.handlers.dragMove),window.removeEventListener(...this.handlers.dragUp);let a=document.getElementById("players").getBoundingClientRect().height+50;if(n)WeatherUi.pinApp(),await game.settings.set(e.ID,"uiPinned",!0),this.app.setPosition({left:15,top:window.innerHeight-a});else{let t=$("#scene-weather-app").position(),a={top:t.top,left:t.left};await game.settings.set(e.ID,"uiPosition",a),await game.settings.set(e.ID,"uiPinned",!1)}$("#scene-weather-app").css("animation","")}}static async pinApp(){const t=game.modules.get(e.ID).uiApp;t&&!t.element.hasClass("pinned")&&($("#players").before(t.element),t.element.addClass("pinned"))}static unPinApp(){const t=game.modules.get(e.ID).uiApp;if(t&&t.element.hasClass("pinned")){const e=t.element;return $("body").append(e),e.removeClass("pinned"),!0}}static async toggleAppVis(t){"toggle"===t?!0===game.settings.get(e.ID,"uiVisible")?($("#scene-weather-app").stop(),$("#scene-weather-app").css({animation:"close 0.3s",opacity:"0"}),setTimeout((function(){game.modules.get(e.ID).uiApp.close({sceneWeather:!0})}),200)):(WeatherUi._isOpen&&game.modules.get(e.ID).uiApp.close({sceneWeather:!0}),game.modules.get(e.ID).uiApp=await(new WeatherUi).render(!0),game.settings.set(e.ID,"uiVisible",!0)):!0===game.settings.get(e.ID,"uiVisible")&&(game.modules.get(e.ID).uiApp=await(new WeatherUi).render(!0))}static async update(t){if(Logger.debug("WeatherUi.update(...)",{weatherInfo:t}),!0===game.settings.get(e.ID,"uiVisible")){const e=SceneWeather.getPerceptiveWeatherI18n(t);$("#weatherInfo").html(e)}}}Hooks.on(e.LCCNAME+"WeatherUpdated",(async e=>{e.sceneId==canvas.scene._id&&void 0!==e.model&&MeteoUi.update()}));class MeteoUi extends FormApplication{static _isOpen=!1;static _context=void 0;static _fromHr=-12;static _toHr=12;async _render(e=!1,t={}){await super._render(e,t),MeteoUi._isOpen=!0,MeteoUi._context=document.getElementById("meteogramCanvas"),MeteoUi._chart=void 0,MeteoUi._drawWeatherModelData(),delete ui.windows[this.appId]}async close(t={}){return t.sceneWeather&&(MeteoUi._isOpen=!1,MeteoUi._context=void 0,game.settings.set(e.ID,"meteoVisible",!1)),super.close(t)}constructor(){super()}static get defaultOptions(){return this.initialPosition=game.settings.get(e.ID,"meteoPosition"),mergeObject(super.defaultOptions,{classes:["form"],popOut:!0,width:600,height:400,submitOnChange:!1,closeOnSubmit:!1,minimizable:!1,template:"modules/"+e.ID+"/templates/meteoUi.hbs",id:"scene-weather-meteo-app",title:"SceneWeather Meteogram",top:this.initialPosition.top,left:this.initialPosition.left})}async _updateObject(e,t){Logger.debug("MeteoUi._updateObjec",{event:e,formData:t})}getData(){return{}}activateListeners(t){super.activateListeners(t);const a=t.find("#dragHandle")[0],i=new Draggable(this,t,a,!1);i._onDragMouseMove=function _newOnDragMouseMove(e){e.preventDefault();const t=Date.now();t-this._moveTime<1e3/60||(this._moveTime=t,this.app.setPosition({left:this.position.left+(e.clientX-this._initial.x),top:this.position.top+(e.clientY-this._initial.y)}))},i._onDragMouseUp=async function _newOnDragMouseUp(t){t.preventDefault(),window.removeEventListener(...this.handlers.dragMove),window.removeEventListener(...this.handlers.dragUp);let a=$("#scene-weather-meteo-app").position(),i={top:a.top,left:a.left};await game.settings.set(e.ID,"meteoPosition",i)}}static async toggleAppVis(t){"toggle"===t?!0===game.settings.get(e.ID,"meteoVisible")?($("#scene-weather-meteo-app").stop(),$("#scene-weather-meteo-app").css({animation:"close 0.3s",opacity:"0"}),setTimeout((function(){game.modules.get(e.ID).meteoApp.close({sceneWeather:!0})}),200)):(MeteoUi._isOpen&&game.modules.get(e.ID).meteoApp.close({sceneWeather:!0}),game.modules.get(e.ID).meteoApp=await(new MeteoUi).render(!0),game.settings.set(e.ID,"meteoVisible",!0)):!0===game.settings.get(e.ID,"meteoVisible")&&(game.modules.get(e.ID).meteoApp=await(new MeteoUi).render(!0))}static async update(){Logger.debug("Updating MeteoUi"),!0===game.settings.get(e.ID,"meteoVisible")&&MeteoUi._drawWeatherModelData()}static async _drawWeatherModelData(){const e=MeteoUi._fromHr,t=MeteoUi._toHr,a=MeteoUi._context;if(void 0===a)return void Logger.debug("No Context Yet");let i={labels:[],datasets:[]},n={label:"tempGround",data:[],borderWidth:1,pointRadius:0,borderColor:"#ff0000",borderDash:[5,5],yAxisID:"y"},r={label:"tempAir",data:[],borderWidth:1,pointRadius:0,borderColor:"#ff4400",borderDash:[5,5],yAxisID:"y"},s={label:"tempPercieved",data:[],borderWidth:1,pointRadius:0,borderColor:"#ff0044",yAxisID:"y"},o={label:"windSpeed",data:[],borderWidth:1,pointRadius:0,borderColor:"rgba(20, 200, 0, 0.9)",yAxisID:"y"},d={label:"windGusts",data:[],borderWidth:1,pointRadius:0,borderColor:"rgba(0, 200, 0, 0.8)",borderDash:[5,5],yAxisID:"y"},l={label:"windDirection",data:[],borderWidth:1,showLine:!1,borderColor:"#b74"},c={label:"cloudsCoverage",data:[],borderWidth:1,pointRadius:0,backgroundColor:"rgba(128, 128, 128, 0.3)",fill:!0,stepped:!0,yAxisID:"y2"},g={label:"precipitationAmount",data:[],borderWidth:1,pointRadius:0,backgroundColor:"rgba(60,60,255,0.2)",fill:!0,yAxisID:"y2"},h={label:"sunAmount",data:[],borderWidth:1,pointRadius:0,backgroundColor:"rgba(255, 255, 0, 0.6)",fill:!0,yAxisID:"y2"},u={label:"humidity",data:[],borderWidth:1,pointRadius:0,borderColor:"#9999ff",yAxisID:"y2"},m=game.sceneWeather.get();for(let a=e;a<t;a++){let e=m.weatherModel.getWeatherData(0,a);n.data.push(e.temp.ground),r.data.push(e.temp.air),s.data.push(e.temp.percieved),o.data.push(e.wind.speed),d.data.push(e.wind.gusts),l.data.push(e.wind.direction/10),c.data.push(100*e.clouds.coverage),g.data.push(100*e.precipitation.amount),h.data.push(100*e.sun.amount),u.data.push(e.humidity),a<0?i.labels.push(a+"h"):a>0?i.labels.push("+"+a+"h"):i.labels.push("now")}i.datasets.push(n),i.datasets.push(r),i.datasets.push(s),i.datasets.push(o),i.datasets.push(d),i.datasets.push(l),i.datasets.push(c),i.datasets.push(g),i.datasets.push(h),i.datasets.push(u);let p={type:"line",data:i,options:{layout:{autoPadding:!1},interaction:{mode:"nearest",axis:"x",intersect:!1},plugins:{legend:{position:"right",labels:{usePointStyle:!0}}},responsive:!1,animation:!1,scales:{x:{position:"bottom"},y:{display:!0,position:"left",type:"linear",min:-30,max:70,title:{display:!0,text:"°C"},grid:{color:function(e){return 0==e.tick.value?"rgba(0,0,0,1)":"rgba(80,80,80,0.3)"}}},y2:{position:"right",type:"linear",min:0,max:100,title:{display:!0,text:"%"}}}}};if(void 0===MeteoUi._chart)MeteoUi._chart=new Chart(a,p),Logger.debug("MeteoUI::new",{ctx:a,chart:MeteoUi._chart});else{Logger.debug("MeteoUi::update");for(let e=0;e<MeteoUi._chart.data.datasets.length;e++)MeteoUi._chart.data.datasets[e].data=i.datasets[e].data;MeteoUi._chart.data.labels=i.labels,MeteoUi._chart.update()}}}class WeatherEffect extends ParticleEffect{static label="sceneweather.fxname";static getFxEmittersForModel(e){let t=[];return game.sceneWeather.generators.forEach((a=>{let i=a.getEmitter(e);null!=i&&t.push(i)})),Logger.debug("WeatherEffect.getFxEmittersForModel()",{model:e,gen:game.sceneWeather.generators,emitters:t}),t}play({easeIn:e=!0}={}){e||this.emitters.forEach((e=>{e.autoUpdate=!1,e.emit=!0,e.update(e.maxLifetime),e.autoUpdate=!0})),super.play()}getParticleEmitters(e={}){if(Logger.debug("WeatherEffect.getParticleEmitters(...)",{options:e}),void 0===e.data||void 0===e.data.model)return Logger.debug("WeatherEffect.getParticleEmitters() no model data contained, no emitters."),[];const t=WeatherEffect.getFxEmittersForModel(e.data.model);let a=[];return t.forEach((e=>{a.push(this.createEmitter(e))})),a}async softStop({gracePeriod:e}={}){const t=this.emitters.map((t=>new Promise((a=>{let i=t._activeParticlesFirst;for(;null!=i;){const t=e,a=Math.max(i.age,i.maxLife-t);i.age=a,i.agePercent=i.age*i.oneOverLife,i=i.next}t.emitterLifetime=0,t.playOnceAndDestroy((()=>{a()}))})))),a=[Promise.all(t)];void 0!==e&&a.push(new Promise((t=>setTimeout(t,1e3*e))).then(this.destroy.bind(this))),await Promise.race(a),this.stop()}}Hooks.on(e.LCCNAME+"WeatherUpdated",(async e=>{Logger.debug("-> Hooks::WeatherUpdated -> WeatherEffectsLayer.draw*Effects",{data:e}),void 0!==canvas.sceneweatherfx?await Promise.all([canvas.sceneweatherfx.drawParticleEffects({soft:!e.force,data:e}),canvas.sceneweatherfx.drawFilterEffects({soft:!e.force,data:e})]):Logger.debug("No canvas.sceneweatherfx")}));class WeatherEffectsLayer extends CanvasLayer{particleEffectsContainer;activeEffects=[];activeFilters={};constructor(){super(),canvas.app.ticker.add(this.handleTick,this)}static getFxFiltersForModel(e){let t={};return game.sceneWeather.filters.forEach((a=>{foundry.utils.mergeObject(t,a.getFilterConfig(e))})),Logger.debug("WeatherEffectsLayer.getFxFiltersForModel()",{model:e,filter:t}),t}get elevation(){return(canvas.weather?.elevation??9999)+1}set elevation(e){const t=canvas.weather;t&&(t.elevation=e-1)}static get layerOptions(){return foundry.utils.mergeObject(super.layerOptions,{name:"weather-particle-effects"})}async _draw(){Logger.debug("WeatherEffectsLayer._draw()",{this:this})}async _tearDown(){return Logger.debug("WeatherEffectsLayer._tearDown()",{effects:this.activeEffects}),this.activeEffects.forEach((e=>{e.destroy()})),this.activeEffects=[],this.particleEffectsContainer=void 0,super._tearDown()}handleTick(){for(const e in this.activeFilters)this.activeFilters[e].step()}async drawFilterEffects(e){if(Logger.debug("WeatherEffectsLayer.drawFilterEffects(...)",{options:e}),e=foundry.utils.mergeObject({soft:!1},e),!canvas.scene)return;const t=Object.values(this.activeFilters).map((e=>e.destroy()));await Promise.all(t);const a=Object.values(this.activeFilters);if(canvas.environment.filters=canvas.environment.filters?.filter((function(e){return!a.find((function(t){return e===t}))}))??[],this.activeFilters={},void 0===e.data||void 0===e.data.model)return void Logger.debug("WeatherEffectsLayer.drawFilterEffects() no model data contained, no filters.");const i=WeatherEffectsLayer.getFxFiltersForModel(e.data.model);Object.entries(i).map((([t,a])=>{this.activeFilters[t]=new a.type({soft:e.soft,options:foundry.utils.mergeObject(a,{"-=type":null},{performDeletions:!0})}),canvas.environment.filters.push(this.activeFilters[t])}))}async drawParticleEffects(e){if(e=foundry.utils.mergeObject({soft:!1},e),!canvas.scene)return;this.particleEffectsContainer||(this.particleEffectsContainer=this.addChild(new PIXI.Container));const t=Promise.all(this.activeEffects.map((async t=>{e.soft?await t.softStop({gracePeriod:10}):(t.destroy(),t.stop());const a=this.activeEffects.indexOf(t);a>-1&&this.activeEffects.splice(a,1)})));{const t=new WeatherEffect(this.particleEffectsContainer,e);t.play({easeIn:e.soft}),this.activeEffects.push(t)}Logger.debug("waiting for emitters to clean up softly",{effects:this.activeEffects}),await t,Logger.debug("cleaned up emitters",{effects:this.activeEffects})}}class WeatherMenu{static registerButtons(){CONFIG.Canvas.layers.sceneweather={layerClass:WeatherLayer,group:"interface"},CONFIG.Canvas.layers.sceneweatherfx={layerClass:WeatherEffectsLayer,group:"primary"},Hooks.on("getSceneControlButtons",(e=>{const t=[{name:"Toggle Weather UI",title:"Toggle Weather UI",icon:"fas fa-solid fa-eye",visible:game.user.isGM,toggle:!0,active:WeatherUi._isOpen,onClick:()=>{WeatherUi.toggleAppVis("toggle")}},{name:"Update clients",title:"Update clients",icon:"fas fa-solid fa-arrows-rotate",button:!0,onClick:()=>{MeteoUi.toggleAppVis("toggle")}},{name:"Remove All Weather",title:"Remove All Weather",icon:"fas fa-solid fa-trash",button:!0,onClick:()=>{}}];e.splice(e.findIndex((e=>"sounds"===e.name))+1,0,{name:"Scene Weather",title:"Scene Weather",icon:"fas fa-solid fa-cloud-bolt-sun",layer:"sceneweather",tools:t})}))}}class WeatherLayer extends InteractionLayer{static get layerOptions(){return foundry.utils.mergeObject(super.layerOptions,{name:"sceneweather",canDragCreate:!1,controllableObjects:!0,rotatableObjects:!0,zIndex:666})}selectObjects(e){canvas.tokens.selectObjects(e)}}class WeatherTab{static async addControlsTab(t,a){Logger.debug("addControlsTab",{app:t,jQ:a});let i=t.document.flags[e.ID],n={weatherMode:"disabled",weatherTemplate:"default",regionTemplate:"plains",timeProvider:"manual",dateProvider:"manual",timeHour:0,timeSeason:0};mergeObject(n,i,{overwrite:!0});let r={data:n,timeSeasons:[{id:0,name:"Winter"},{id:90,name:"Spring"},{id:180,name:"Summer"},{id:270,name:"Fall"}],timeProviders:[{id:"small-time",name:"SmallTime"},{id:"simple-calendar",name:"Simple Calendar"},{id:"manual",name:"Manual"}],dateProviders:[{id:"simple-calendar",name:"Simple Calendar"},{id:"manual",name:"Manual"}],weatherModes:[{id:"disabled",name:"Disabled (Use foundry default ambience)",hint:"Scene Weather is disabled. All ambience effects and types are set via the foundry default settings in Ambience."},{id:"weatherTemplate",name:"Use weather template (static)",hint:"Set a weather for the scene from a select choice of templates. The weather is static and will remain like that unless manually changed."},{id:"regionTemplate",name:"Use region template (dynamic)",hint:"Let the weather be generated based on a selected region template from a choice list. The weather will change dynamically based on given time of day and the season in the year. If an automatic calendar or time module is installed, it will change with the flow of time."},{id:"regionAuto",name:"Auto generate via region template (generated)",hint:"Let the weather be generated based on set attributes for the scene like mean temperature or elevation. The weather is dependant on a current time/date that needs to be provided to generate the dynamic weather based on all those parameters."}],weatherTemplates:[],regionTemplates:[]};r.weatherTemplates=WeatherModel.getTemplates(),r.regionTemplates=RegionMeteo.getTemplates(),Logger.debug("Render TabData with",{tabData:r});let s=await renderTemplate("modules/"+e.ID+"/templates/weatherTab.hbs",r);$(".sheet-tabs",a).append($("<a>").addClass("item").attr("data-tab","weather").html('<i class="fas fa-solid fa-cloud-bolt-sun"></i> Weather')),$("<div>").addClass("tab").attr("data-tab","weather").insertAfter($('div[data-tab="ambience"]',a)).append(s),WeatherTab.activateListeners(t,a,r.data.weatherMode)}static activateListeners(e,t,a){Logger.debug("WeatherTab.activateListeners",{app:e,jQ:t,select:a}),t.find('div[id="sceneWeather.mode.'+a+'"]').addClass("active"),t.find('button[data-key="flags.scene-weather.regionConfig"]').on("click",(function(){Logger.debug("Clicked Config Region for Scene",{sceneId:e.document._id});new RegionConfigDialog(e.document._id).render(!0)})),t.find('select[name="flags.scene-weather.weatherMode"]').on("change",(function(){let a=$(this).find(":selected").val();t.find("div.sceneWeather-collapsibleModeOption").each((function(){$(this).attr("id")=="sceneWeather.mode."+a?$(this).addClass("active"):$(this).removeClass("active")})),e.setPosition({height:"auto"}),Logger.debug("onChange",{app:e,jQ:t})}))}}Hooks.on("ready",(async()=>{Hooks.callAll(e.LCCNAME+"Initialized"),Logger.info("Ready")})),Hooks.once("setup",(()=>{WeatherMenu.registerButtons()})),Hooks.on("renderMeteoUi",(()=>{Logger.debug("Hook:renderMeteoUi")})),Hooks.on("deactivateSpecialEffectsLayer",(e=>{Logger.debug("deactivateSpecialEffectsLayer  ->",e)})),Hooks.once("init",(()=>{registerSettings(),registerHbHelpers(),loadHandlebars(),SceneWeatherApi.registerApi(),Hooks.callAll(e.LCCNAME+"RegisterGenerators"),Hooks.callAll(e.LCCNAME+"RegisterFilters"),Logger.debug("Init Done",{api:game.sceneWeather})})),Hooks.on("canvasReady",(e=>{Logger.debug("Hook:canvasInit()",{canvas:e}),SceneWeatherApi.calculateWeather({force:!0})})),Hooks.on("updateWorldTime",(()=>{Logger.debug("Hook:updateWorldTime()"),SceneWeatherApi.calculateWeather()})),Hooks.on("pauseGame",(()=>{SceneWeatherApi.calculateWeather()})),Hooks.on("simple-calendar-clock-start-stop",(()=>{SceneWeatherApi.calculateWeather()})),Hooks.on("simple-calendar-date-time-change",(e=>{})),Hooks.on("canvasReady",(async()=>{Hooks.on(e.LCCNAME+"Initialized",(async()=>{Hooks.on("updateScene",(async(t,a,i,n)=>{void 0!==a.flags&&void 0!==a.flags[e.ID]&&(Logger.debug("updateScene-> ",{deltaData:a,options:i}),SceneWeatherApi.updateWeatherConfig({forSceneId:a._id,force:!0}))}))})),WeatherUi.toggleAppVis("initial"),game.settings.get(e.ID,"uiPinned")&&WeatherUi.pinApp(),MeteoUi.toggleAppVis("initial")})),Hooks.on("renderSceneConfig",(async(e,t,a)=>{Logger.debug("renderSceneConfig",{app:e,jQ:t,data:a}),WeatherTab.addControlsTab(e,t)}));class ColorFilter extends PIXI.filters.AdjustmentFilter{constructor({options:e={},soft:t=!1}={}){super();const{color:a,...i}=foundry.utils.mergeObject({tint:"#ffffff",saturation:1,gamma:1,brightness:1,contrast:1},e),{r:n,g:r,b:s}=foundry.utils.Color.from(e.tint),o={...i,red:n,green:r,blue:s},d=Object.keys(o);for(const e of d)this.optionContext[e]=o[e];this.enabled=!0}get optionContext(){return this}async destroy(){return this.enabled=!1,!0}async step(){}}class Generators{static _scaleValues(e,t){e.list=e.list.map((e=>({...e,value:e.value*t})))}static _scaleRange(e,t){e.min=e.min*t,e.max=e.max*t}static _getTransposedPosition(e,t,a,i,n,r){const s=e+a/2,o=t+i/2,d=r*Math.PI/180;return{x:s+n*Math.cos(d)-a/2,y:o+n*Math.sin(d)-i/2}}static applyGeneratorToEmitterConfig(e,t){const a=2/3,i=canvas.dimensions.sceneRect;t.maxParticles=canvas.dimensions.width/canvas.dimensions.size*(canvas.dimensions.height/canvas.dimensions.size)*e.density;const n=t.behaviors.find((({type:e})=>"moveSpeedStatic"===e))?.config;if(void 0!==n){const r=(n.min+n.max)/2,s=Math.sqrt(i.width*i.width+i.height*i.height),o=s/r,d=o/a/2,l=o/a;t.lifetime={min:d,max:l},t.frequency=(d+l)/2/t.maxParticles;const c=Generators._getTransposedPosition(i.x,i.y,i.width,i.height,s/4,(e.direction+180)%360);t.behaviors.push({type:"spawnShape",config:{type:"rect",data:{x:c.x,y:c.y,w:i.width,h:i.height}}})}else{t.frequency=(t.lifetime.min+t.lifetime.max)/2/t.maxParticles;const e=canvas.dimensions.sceneRect;t.behaviors.push({type:"spawnShape",config:{type:"rect",data:{x:e.x-e.width/4,y:e.y-e.height/4,w:1.5*e.width,h:1.5*e.height}}})}void 0!==e.alpha&&t.behaviors.filter((e=>"alpha"===e.type)).forEach((({config:t})=>Generators._scaleValues(t.alpha,e.alpha)));let r=e.scale*(canvas.dimensions.size/100);t.behaviors.filter((e=>"scale"===e.type)).forEach((({config:e})=>Generators._scaleValues(e.scale,r))),t.behaviors.filter((e=>"scaleStatic"===e.type)).forEach((({config:e})=>Generators._scaleRange(e,r))),r=e.speed*(canvas.dimensions.size/100),t.behaviors.filter((e=>["moveSpeed","movePath"].includes(e.type))).forEach((({config:e})=>Generators._scaleValues(e.speed,r))),t.behaviors.filter((e=>"moveSpeedStatic"===e.type)).forEach((({config:e})=>Generators._scaleRange(e,r))),Generators._scaleRange(t.lifetime,1/r),t.frequency/=r;const s=e.direction;void 0!==s&&(t.behaviors.filter((e=>"rotation"===e.type)).forEach((({config:e})=>{const t=e.maxStart-e.minStart;e.minStart=s-t/2,e.maxStart=s+t/2})),t.behaviors.filter((e=>"rotationStatic"===e.type)).forEach((({config:e})=>{const t=e.max-e.min;e.min=s-t/2,e.max=s+t/2})));const o=e.lifetime;Generators._scaleRange(t.lifetime,o),t.frequency*=o,null!=e.tint&&(t.behaviors=t.behaviors.filter((({type:e})=>"color"!==e&&"colorStatic"!==e)).concat({type:"colorStatic",config:{color:e.tint}}))}}Hooks.on(e.LCCNAME+"RegisterGenerators",(async()=>{Logger.debug("registered generator for cumulus"),game.sceneWeather.generators.push({name:"cumulus",getEmitter:function(t){if(Utils.getSetting("cloudsAlpha",100)<2)return;if(![3,4].includes(t.clouds.type))return null;let a={alpha:Utils.getSetting("cloudsAlpha",100)/100,direction:(Math.round(t.wind.direction)+90)%360,speed:Utils.map(t.wind.speed,10,70,.2,3),scale:Utils.map(t.clouds.coverage,.3,1,.8,1),lifetime:1,density:Utils.map(t.clouds.coverage,.2,1,.005,.02),tint:null};4==t.clouds.type&&(a.tint="#B0B0B0",a.density=.001);const i=foundry.utils.deepClone({behaviors:[{type:"alpha",config:{alpha:{list:[{value:0,time:0},{value:.5,time:.05},{value:.5,time:.95},{value:0,time:1}]}}},{type:"moveSpeedStatic",config:{min:30,max:100}},{type:"scaleStatic",config:{min:2.58,max:3.3}},{type:"rotationStatic",config:{min:85,max:95}},{type:"textureRandom",config:{textures:Array.fromRange(5).map((t=>"modules/"+e.ID+`/assets/cu${t+1}.webp`))}}]});return Generators.applyGeneratorToEmitterConfig(a,i),i}})}));class FlashFilter extends PIXI.filters.AdjustmentFilter{options;constructor({options:e={},soft:t=!1}={}){super(),this.options=foundry.utils.mergeObject({frequency:0,duration:0,brightness:1,nextTime:canvas.app.ticker.lastTime/10},e);const a=Object.keys(this.options);for(const e of a)this.optionContext[e]=this.options[e];this.enabled=!0}get optionContext(){return this}async discard(){return this.enabled=!1,!0}async step(){if(canvas.app.ticker.lastTime/10>this.options.nextTime){this.options.nextTime=canvas.app.ticker.lastTime/10+40+this.options.frequency*Math.random();const animate=t=>{const a=[{parent:this,attribute:"brightness",to:t}];return CanvasAnimation.animate(a,{name:e.ID+`.${this.constructor.name}.${randomID()}`,context:this,duration:100+this.options.duration*Math.random(),easing:function(e){const t=2.5949095;return e<.5?Math.pow(2*e,2)*(7.189819*e-t)/2:(Math.pow(2*e-2,2)*((t+1)*(2*e-2)+t)+2)/2}})};await animate(this.options.brightness),await animate(1)}}}Hooks.on(e.LCCNAME+"RegisterGenerators",(async()=>{Logger.debug("registered generator for fog"),game.sceneWeather.generators.push({name:"fog",getEmitter:function(t){if(Utils.getSetting("cloudsAlpha",100)<2)return;if(1!=t.clouds.type)return null;const a={alpha:Utils.getSetting("cloudsAlpha",100)/100,direction:0,speed:1,scale:1,lifetime:1,density:Utils.map(t.clouds.coverage,.2,1,.01,1),tint:null},i=foundry.utils.deepClone({lifetime:{min:10,max:25},behaviors:[{type:"alpha",config:{alpha:{list:[{value:0,time:0},{value:.1,time:.1},{value:.3,time:.5},{value:.1,time:.9},{value:0,time:1}]}}},{type:"moveSpeed",config:{speed:{list:[{time:0,value:15},{time:1,value:10}]},minMult:.2}},{type:"scale",config:{scale:{list:[{value:2.5,time:0},{value:2,time:1}]},minMult:.5}},{type:"rotation",config:{accel:0,minSpeed:.15,maxSpeed:.35,minStart:0,maxStart:365}},{type:"textureRandom",config:{textures:Array.fromRange(3).map((t=>"modules/"+e.ID+`/assets/fg${t+1}.webp`))}},{type:"colorStatic",config:{color:"dddddd"}}]});return Generators.applyGeneratorToEmitterConfig(a,i),i}})})),Hooks.on(e.LCCNAME+"RegisterFilters",(async()=>{Logger.debug("registered filter for heatglare"),game.sceneWeather.filters.push({name:"heatglare",getFilterConfig:function(e){let t={};return e.sun.amount>.8&&e.temp.air>30&&(t.heatglare={type:ColorFilter,tint:Utils.mapColorHex(e.sun.amount,.8,1,"#ffffff","#FFF3D1"),saturation:1,gamma:1,brightness:Utils.map(e.sun.amount,.8,1,1,1.4),contrast:Utils.map(e.temp.air,30,50,1,1.5)}),t}})})),Hooks.on(e.LCCNAME+"RegisterFilters",(async()=>{Logger.debug("registered filter for freeze"),game.sceneWeather.filters.push({name:"freeze",getFilterConfig:function(e){let t={};return e.temp.air<0&&(t.freeze={type:ColorFilter,tint:Utils.mapColorHex(e.temp.air+10,0,10,"#E1F3FE","#FFFFFF"),saturation:1-Utils.map(e.temp.air+10,10,0,0,.4),gamma:1,brightness:1,contrast:1}),t}})})),Hooks.on(e.LCCNAME+"RegisterFilters",(async()=>{Logger.debug("registered filter for lightning"),game.sceneWeather.filters.push({name:"lightning",getFilterConfig:function(e){let t={};return e.clouds.type>3&&[2,3,4].includes(e.precipitation.type)&&e.precipitation.amount>.3&&(t.lightning={type:FlashFilter,frequency:2e3-Utils.map(e.precipitation.amount,.3,1,0,1600),duration:100,brightness:1.2},t.cloudcolor={type:ColorFilter,tint:"#D1CBD7",saturation:1,gamma:1,brightness:1,contrast:1}),t}})})),Hooks.on(e.LCCNAME+"RegisterGenerators",(async()=>{Logger.debug("registered generator for cumulus"),game.sceneWeather.generators.push({name:"cumulus",getEmitter:function(t){if(Utils.getSetting("cloudsAlpha",100)<2)return;if(4!=t.clouds.type)return null;let a={alpha:Utils.getSetting("cloudsAlpha",100)/100,direction:(Math.round(t.wind.direction)+90)%360,speed:Utils.map(t.wind.speed,10,70,.2,3),scale:Utils.map(t.clouds.coverage,.3,1,.8,1),lifetime:1,density:Utils.map(t.clouds.coverage,.2,1,.005,.02),tint:null};const i=foundry.utils.deepClone({behaviors:[{type:"alpha",config:{alpha:{list:[{value:0,time:0},{value:.5,time:.05},{value:.5,time:.95},{value:0,time:1}]}}},{type:"moveSpeedStatic",config:{min:30,max:100}},{type:"scaleStatic",config:{min:2.08,max:2.8}},{type:"rotationStatic",config:{min:90,max:90}},{type:"textureRandom",config:{textures:Array.fromRange(4).map((t=>"modules/"+e.ID+`/assets/tcu${t+1}.webp`))}}]});return Generators.applyGeneratorToEmitterConfig(a,i),i}})})),Hooks.on(e.LCCNAME+"RegisterGenerators",(async()=>{Logger.debug("registered generator for rain"),game.sceneWeather.generators.push({name:"rain",getEmitter:function(e){if(Utils.getSetting("precipitationAlpha",100)<2)return;if(![1,2,3,4].includes(e.precipitation.type))return null;let t=90;switch(e.precipitation.mode??"winddir"){case"winddir":default:t=(Math.round(e.wind.direction)+90)%360;break;case"topdown":t=90;break;case"slanted":t=75;break;case"windinfluence":t=90+Math.sin(e.wind.direction*Math.PI/180)*Utils.map(e.wind.speed,10,70,3,45)}const a={alpha:Utils.getSetting("precipitationAlpha",100)/100,direction:t,speed:Utils.map(e.precipitation.amount,.4,.95,.6,2),scale:1,lifetime:Utils.map(e.precipitation.amount,.4,.95,1,.5),density:Utils.map(e.precipitation.amount,.4,.95,.01,4),tint:null},i=foundry.utils.deepClone({lifetime:{min:.5,max:.5},pos:{x:0,y:0},behaviors:[{type:"alpha",config:{alpha:{list:[{time:0,value:.7},{time:1,value:.1}]}}},{type:"moveSpeedStatic",config:{min:2800,max:3500}},{type:"scaleStatic",config:{min:.8,max:1}},{type:"rotationStatic",config:{min:89,max:91}},{type:"textureSingle",config:{texture:"ui/particles/rain.png"}}]});return Generators.applyGeneratorToEmitterConfig(a,i),i}})})),Hooks.on(e.LCCNAME+"RegisterGenerators",(async()=>{Logger.debug("registered generator for snow"),game.sceneWeather.generators.push({name:"snow",getEmitter:function(e){if(Utils.getSetting("precipitationAlpha",100)<2)return;if(![5,6].includes(e.precipitation.type))return null;let t=90;switch(e.precipitation.mode??"winddir"){case"winddir":default:t=(Math.round(e.wind.direction)+90)%360;break;case"topdown":t=90;break;case"slanted":t=75;break;case"windinfluence":t=90+Math.sin(e.wind.direction*Math.PI/180)*Utils.map(e.wind.speed,10,70,10,90)}const a={alpha:Utils.getSetting("precipitationAlpha",100)/100,direction:t,speed:Utils.map(e.wind.speed,10,70,.3,5),scale:1,lifetime:Utils.map(e.precipitation.amount,.4,.95,1,.7),density:Utils.map(e.precipitation.amount,.4,.95,.01,3),tint:null},i=Utils.deepClone({lifetime:{min:4,max:4},behaviors:[{type:"alpha",config:{alpha:{list:[{time:0,value:.9},{time:1,value:.5}]}}},{type:"moveSpeed",config:{speed:{list:[{time:0,value:190},{time:1,value:210}]},minMult:.6}},{type:"scale",config:{scale:{list:[{time:0,value:.2},{time:1,value:.4}]},minMult:.5}},{type:"rotation",config:{accel:0,minSpeed:0,maxSpeed:200,minStart:50,maxStart:75}},{type:"textureSingle",config:{texture:"ui/particles/snow.png"}}]});return Generators.applyGeneratorToEmitterConfig(a,i),i}})})),Hooks.on(e.LCCNAME+"RegisterGenerators",(async()=>{Logger.debug("registered generator for stratus"),game.sceneWeather.generators.push({name:"stratus",getEmitter:function(t){if(Utils.getSetting("cloudsAlpha",100)<2)return;if(![2,3,4].includes(t.clouds.type))return null;let a={alpha:Utils.getSetting("cloudsAlpha",100)/100,direction:(Math.round(t.wind.direction)+90)%360,speed:Utils.map(t.wind.speed,10,100,.2,2.5),scale:Utils.map(t.clouds.coverage,.3,1,1,2),lifetime:1,density:Utils.map(t.clouds.coverage,.2,1,.001,.01),tint:null};3==t.clouds.type&&(a.tint="#A0A0A0",a.density=.007,a.scale=1),4==t.clouds.type&&(a.tint="#808080",a.density=.01,a.scale=1.2);const i=foundry.utils.deepClone({behaviors:[{type:"alpha",config:{alpha:{list:[{value:0,time:0},{value:.5,time:.05},{value:.5,time:.95},{value:0,time:1}]}}},{type:"moveSpeedStatic",config:{min:30,max:100}},{type:"scaleStatic",config:{min:2.58,max:3.3}},{type:"rotationStatic",config:{min:80,max:100}},{type:"textureRandom",config:{textures:Array.fromRange(6).map((t=>"modules/"+e.ID+`/assets/st${t+1}.webp`))}}]});return Generators.applyGeneratorToEmitterConfig(a,i),i}})}));export{ColorFilter,FlashFilter,Generators,Logger,t as METEO,e as MODULE,MeteoUi,Noise,RegionConfigDialog,RegionMeteo,SceneWeather,SceneWeatherApi,TimeProvider,Utils,WeatherEffect,WeatherEffectsLayer,WeatherMenu,WeatherModel,WeatherTab,WeatherUi,loadHandlebars,registerHbHelpers,registerSettings};
